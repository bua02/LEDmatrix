
proj_3_Sem.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b4  08008a30  08008a30  00018a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093e4  080093e4  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080093e4  080093e4  000193e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093ec  080093ec  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093ec  080093ec  000193ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080093f0  080093f0  000193f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080093f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001be0  20000078  0800946c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c58  0800946c  00021c58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025771  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b81  00000000  00000000  00045819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d98  00000000  00000000  0004a3a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001bb0  00000000  00000000  0004c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025159  00000000  00000000  0004dce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002338c  00000000  00000000  00072e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d9c95  00000000  00000000  000961cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016fe62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007f14  00000000  00000000  0016feb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a18 	.word	0x08008a18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08008a18 	.word	0x08008a18

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of i2cMessageQueue */
  i2cMessageQueueHandle = osMessageQueueNew (3, sizeof(uint8_t), &i2cMessageQueue_attributes);
 80004d8:	4a16      	ldr	r2, [pc, #88]	; (8000534 <MX_FREERTOS_Init+0x60>)
 80004da:	2101      	movs	r1, #1
 80004dc:	2003      	movs	r0, #3
 80004de:	f005 fa4e 	bl	800597e <osMessageQueueNew>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a14      	ldr	r2, [pc, #80]	; (8000538 <MX_FREERTOS_Init+0x64>)
 80004e6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004e8:	4a14      	ldr	r2, [pc, #80]	; (800053c <MX_FREERTOS_Init+0x68>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4814      	ldr	r0, [pc, #80]	; (8000540 <MX_FREERTOS_Init+0x6c>)
 80004ee:	f005 f919 	bl	8005724 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a13      	ldr	r2, [pc, #76]	; (8000544 <MX_FREERTOS_Init+0x70>)
 80004f6:	6013      	str	r3, [r2, #0]

  /* creation of displayTask */
  displayTaskHandle = osThreadNew(displayTask_App, NULL, &displayTask_attributes);
 80004f8:	4a13      	ldr	r2, [pc, #76]	; (8000548 <MX_FREERTOS_Init+0x74>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4813      	ldr	r0, [pc, #76]	; (800054c <MX_FREERTOS_Init+0x78>)
 80004fe:	f005 f911 	bl	8005724 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a12      	ldr	r2, [pc, #72]	; (8000550 <MX_FREERTOS_Init+0x7c>)
 8000506:	6013      	str	r3, [r2, #0]

  /* creation of i2cTask */
  i2cTaskHandle = osThreadNew(i2cTask_App, NULL, &i2cTask_attributes);
 8000508:	4a12      	ldr	r2, [pc, #72]	; (8000554 <MX_FREERTOS_Init+0x80>)
 800050a:	2100      	movs	r1, #0
 800050c:	4812      	ldr	r0, [pc, #72]	; (8000558 <MX_FREERTOS_Init+0x84>)
 800050e:	f005 f909 	bl	8005724 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a11      	ldr	r2, [pc, #68]	; (800055c <MX_FREERTOS_Init+0x88>)
 8000516:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Create the event(s) */
  /* creation of dataReceived */
  dataReceivedHandle = osEventFlagsNew(&dataReceived_attributes);
 8000518:	4811      	ldr	r0, [pc, #68]	; (8000560 <MX_FREERTOS_Init+0x8c>)
 800051a:	f005 f9f1 	bl	8005900 <osEventFlagsNew>
 800051e:	4603      	mov	r3, r0
 8000520:	4a10      	ldr	r2, [pc, #64]	; (8000564 <MX_FREERTOS_Init+0x90>)
 8000522:	6013      	str	r3, [r2, #0]

  /* creation of i2cAddressed */
  i2cAddressedHandle = osEventFlagsNew(&i2cAddressed_attributes);
 8000524:	4810      	ldr	r0, [pc, #64]	; (8000568 <MX_FREERTOS_Init+0x94>)
 8000526:	f005 f9eb 	bl	8005900 <osEventFlagsNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a0f      	ldr	r2, [pc, #60]	; (800056c <MX_FREERTOS_Init+0x98>)
 800052e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000530:	bf00      	nop
 8000532:	bd80      	pop	{r7, pc}
 8000534:	08009304 	.word	0x08009304
 8000538:	200000a0 	.word	0x200000a0
 800053c:	08009298 	.word	0x08009298
 8000540:	08000571 	.word	0x08000571
 8000544:	20000094 	.word	0x20000094
 8000548:	080092bc 	.word	0x080092bc
 800054c:	08000581 	.word	0x08000581
 8000550:	20000098 	.word	0x20000098
 8000554:	080092e0 	.word	0x080092e0
 8000558:	080006a9 	.word	0x080006a9
 800055c:	2000009c 	.word	0x2000009c
 8000560:	0800931c 	.word	0x0800931c
 8000564:	200000a4 	.word	0x200000a4
 8000568:	0800932c 	.word	0x0800932c
 800056c:	200000a8 	.word	0x200000a8

08000570 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000578:	2001      	movs	r0, #1
 800057a:	f005 f9a6 	bl	80058ca <osDelay>
 800057e:	e7fb      	b.n	8000578 <StartDefaultTask+0x8>

08000580 <displayTask_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayTask_App */
void displayTask_App(void *argument)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayTask_App */
	uint8_t pulse = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
	Numbers singleDigits;
	osStatus_t result;
  /* Infinite loop */
  for(;;)
  {
	  result = osMessageQueueGet(i2cMessageQueueHandle, &pulse, 0U, 0U);
 800058c:	4b42      	ldr	r3, [pc, #264]	; (8000698 <displayTask_App+0x118>)
 800058e:	6818      	ldr	r0, [r3, #0]
 8000590:	f107 010f 	add.w	r1, r7, #15
 8000594:	2300      	movs	r3, #0
 8000596:	2200      	movs	r2, #0
 8000598:	f005 fac4 	bl	8005b24 <osMessageQueueGet>
 800059c:	6138      	str	r0, [r7, #16]
	  if(result == osOK){
 800059e:	693b      	ldr	r3, [r7, #16]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d10d      	bne.n	80005c0 <displayTask_App+0x40>
		  singleDigits = getSingleDigits(pulse);
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	4618      	mov	r0, r3
 80005a8:	f000 fa54 	bl	8000a54 <getSingleDigits>
 80005ac:	4603      	mov	r3, r0
 80005ae:	461a      	mov	r2, r3
 80005b0:	733a      	strb	r2, [r7, #12]
 80005b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80005b6:	737a      	strb	r2, [r7, #13]
 80005b8:	f3c3 4307 	ubfx	r3, r3, #16, #8
 80005bc:	73bb      	strb	r3, [r7, #14]
 80005be:	e006      	b.n	80005ce <displayTask_App+0x4e>
	  }else if(pulse == 0){
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d103      	bne.n	80005ce <displayTask_App+0x4e>
		  singleDigits.tens = 87 - '0';
 80005c6:	2327      	movs	r3, #39	; 0x27
 80005c8:	737b      	strb	r3, [r7, #13]
		  singleDigits.ones = 8;
 80005ca:	2308      	movs	r3, #8
 80005cc:	73bb      	strb	r3, [r7, #14]
	  }

	  for(int i = 0; i<=7; i++){
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	e052      	b.n	800067a <displayTask_App+0xfa>
	  		  if(i==0){
 80005d4:	697b      	ldr	r3, [r7, #20]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d10d      	bne.n	80005f6 <displayTask_App+0x76>
	  			  HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005e4:	f001 f828 	bl	8001638 <HAL_GPIO_WritePin>
	  			  HAL_GPIO_WritePin(Reset_GPIO_Port, Reset_Pin, GPIO_PIN_SET);
 80005e8:	2201      	movs	r2, #1
 80005ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f001 f821 	bl	8001638 <HAL_GPIO_WritePin>
	  		  }

	  		  while(HAL_SPI_GetState(&hspi3)!=HAL_SPI_STATE_READY);
 80005f6:	bf00      	nop
 80005f8:	4828      	ldr	r0, [pc, #160]	; (800069c <displayTask_App+0x11c>)
 80005fa:	f003 fef5 	bl	80043e8 <HAL_SPI_GetState>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b01      	cmp	r3, #1
 8000602:	d1f9      	bne.n	80005f8 <displayTask_App+0x78>
	  		  HAL_SPI_Transmit_IT(&hspi3, &c7x10r_font[(singleDigits.ones + '0')*8+i], 1);
 8000604:	7bbb      	ldrb	r3, [r7, #14]
 8000606:	3330      	adds	r3, #48	; 0x30
 8000608:	00da      	lsls	r2, r3, #3
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	4413      	add	r3, r2
 800060e:	4a24      	ldr	r2, [pc, #144]	; (80006a0 <displayTask_App+0x120>)
 8000610:	4413      	add	r3, r2
 8000612:	2201      	movs	r2, #1
 8000614:	4619      	mov	r1, r3
 8000616:	4821      	ldr	r0, [pc, #132]	; (800069c <displayTask_App+0x11c>)
 8000618:	f003 fd44 	bl	80040a4 <HAL_SPI_Transmit_IT>
	  		  while(HAL_SPI_GetState(&hspi3)!=HAL_SPI_STATE_READY);
 800061c:	bf00      	nop
 800061e:	481f      	ldr	r0, [pc, #124]	; (800069c <displayTask_App+0x11c>)
 8000620:	f003 fee2 	bl	80043e8 <HAL_SPI_GetState>
 8000624:	4603      	mov	r3, r0
 8000626:	2b01      	cmp	r3, #1
 8000628:	d1f9      	bne.n	800061e <displayTask_App+0x9e>
	  		  HAL_SPI_Transmit_IT(&hspi3, &c7x10r_font[(singleDigits.tens + '0')*8+i], 1);
 800062a:	7b7b      	ldrb	r3, [r7, #13]
 800062c:	3330      	adds	r3, #48	; 0x30
 800062e:	00da      	lsls	r2, r3, #3
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	4413      	add	r3, r2
 8000634:	4a1a      	ldr	r2, [pc, #104]	; (80006a0 <displayTask_App+0x120>)
 8000636:	4413      	add	r3, r2
 8000638:	2201      	movs	r2, #1
 800063a:	4619      	mov	r1, r3
 800063c:	4817      	ldr	r0, [pc, #92]	; (800069c <displayTask_App+0x11c>)
 800063e:	f003 fd31 	bl	80040a4 <HAL_SPI_Transmit_IT>
	  		  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2101      	movs	r1, #1
 8000646:	4817      	ldr	r0, [pc, #92]	; (80006a4 <displayTask_App+0x124>)
 8000648:	f000 fff6 	bl	8001638 <HAL_GPIO_WritePin>
	  		  HAL_GPIO_WritePin(Latch_GPIO_Port, Latch_Pin, RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2101      	movs	r1, #1
 8000650:	4814      	ldr	r0, [pc, #80]	; (80006a4 <displayTask_App+0x124>)
 8000652:	f000 fff1 	bl	8001638 <HAL_GPIO_WritePin>
	  		 if(i > 0){
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	2b00      	cmp	r3, #0
 800065a:	dd0b      	ble.n	8000674 <displayTask_App+0xf4>
	  				HAL_GPIO_WritePin(RClock_GPIO_Port, RClock_Pin, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2101      	movs	r1, #1
 8000660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000664:	f000 ffe8 	bl	8001638 <HAL_GPIO_WritePin>
	  				HAL_GPIO_WritePin(RClock_GPIO_Port, RClock_Pin, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2101      	movs	r1, #1
 800066c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000670:	f000 ffe2 	bl	8001638 <HAL_GPIO_WritePin>
	  for(int i = 0; i<=7; i++){
 8000674:	697b      	ldr	r3, [r7, #20]
 8000676:	3301      	adds	r3, #1
 8000678:	617b      	str	r3, [r7, #20]
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	2b07      	cmp	r3, #7
 800067e:	dda9      	ble.n	80005d4 <displayTask_App+0x54>
	  		 }
	  	  }
	  	  HAL_GPIO_WritePin(R_Reset_GPIO_Port, R_Reset_Pin, GPIO_PIN_SET);
 8000680:	2201      	movs	r2, #1
 8000682:	2102      	movs	r1, #2
 8000684:	4807      	ldr	r0, [pc, #28]	; (80006a4 <displayTask_App+0x124>)
 8000686:	f000 ffd7 	bl	8001638 <HAL_GPIO_WritePin>
	  	  HAL_GPIO_WritePin(R_Reset_GPIO_Port, R_Reset_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2102      	movs	r1, #2
 800068e:	4805      	ldr	r0, [pc, #20]	; (80006a4 <displayTask_App+0x124>)
 8000690:	f000 ffd2 	bl	8001638 <HAL_GPIO_WritePin>
	  result = osMessageQueueGet(i2cMessageQueueHandle, &pulse, 0U, 0U);
 8000694:	e77a      	b.n	800058c <displayTask_App+0xc>
 8000696:	bf00      	nop
 8000698:	200000a0 	.word	0x200000a0
 800069c:	20000104 	.word	0x20000104
 80006a0:	08008a98 	.word	0x08008a98
 80006a4:	48000400 	.word	0x48000400

080006a8 <i2cTask_App>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_i2cTask_App */
void i2cTask_App(void *argument)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN i2cTask_App */
	uint8_t rxdata [] = {0};
 80006b0:	2300      	movs	r3, #0
 80006b2:	733b      	strb	r3, [r7, #12]
	extern I2C_HandleTypeDef hi2c1;
  /* Infinite loop */
  for(;;)
  {
	  if(rxDone == 3){
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <i2cTask_App+0x60>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	2b03      	cmp	r3, #3
 80006ba:	d109      	bne.n	80006d0 <i2cTask_App+0x28>
		  HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)rxdata, 8);
 80006bc:	f107 030c 	add.w	r3, r7, #12
 80006c0:	2208      	movs	r2, #8
 80006c2:	4619      	mov	r1, r3
 80006c4:	4811      	ldr	r0, [pc, #68]	; (800070c <i2cTask_App+0x64>)
 80006c6:	f001 f85f 	bl	8001788 <HAL_I2C_Slave_Receive_IT>
		  osThreadYield();
 80006ca:	f005 f8bd 	bl	8005848 <osThreadYield>
 80006ce:	e7f1      	b.n	80006b4 <i2cTask_App+0xc>
	  }else if(rxDone == 1){
 80006d0:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <i2cTask_App+0x60>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d1ed      	bne.n	80006b4 <i2cTask_App+0xc>
		  rxDone = 0;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <i2cTask_App+0x60>)
 80006da:	2200      	movs	r2, #0
 80006dc:	701a      	strb	r2, [r3, #0]
		  osMessageQueuePut(i2cMessageQueueHandle, (uint8_t *)rxdata, 0U, 0U);
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <i2cTask_App+0x68>)
 80006e0:	6818      	ldr	r0, [r3, #0]
 80006e2:	f107 010c 	add.w	r1, r7, #12
 80006e6:	2300      	movs	r3, #0
 80006e8:	2200      	movs	r2, #0
 80006ea:	f005 f9bb 	bl	8005a64 <osMessageQueuePut>
		  osDelay(1000);
 80006ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006f2:	f005 f8ea 	bl	80058ca <osDelay>
		  HAL_I2C_Slave_Receive_IT(&hi2c1, (uint8_t *)rxdata, 8);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2208      	movs	r2, #8
 80006fc:	4619      	mov	r1, r3
 80006fe:	4803      	ldr	r0, [pc, #12]	; (800070c <i2cTask_App+0x64>)
 8000700:	f001 f842 	bl	8001788 <HAL_I2C_Slave_Receive_IT>
	  if(rxDone == 3){
 8000704:	e7d6      	b.n	80006b4 <i2cTask_App+0xc>
 8000706:	bf00      	nop
 8000708:	20000000 	.word	0x20000000
 800070c:	200000ac 	.word	0x200000ac
 8000710:	200000a0 	.word	0x200000a0

08000714 <HAL_I2C_SlaveRxCpltCallback>:
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c){
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	 rxDone = 1;
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <HAL_I2C_SlaveRxCpltCallback+0x20>)
 800071e:	2201      	movs	r2, #1
 8000720:	701a      	strb	r2, [r3, #0]
	 osThreadResume(i2cTaskHandle);
 8000722:	4b05      	ldr	r3, [pc, #20]	; (8000738 <HAL_I2C_SlaveRxCpltCallback+0x24>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	4618      	mov	r0, r3
 8000728:	f005 f8ae 	bl	8005888 <osThreadResume>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	20000000 	.word	0x20000000
 8000738:	2000009c 	.word	0x2000009c

0800073c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b088      	sub	sp, #32
 8000740:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	4b29      	ldr	r3, [pc, #164]	; (80007f8 <MX_GPIO_Init+0xbc>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	4a28      	ldr	r2, [pc, #160]	; (80007f8 <MX_GPIO_Init+0xbc>)
 8000758:	f043 0304 	orr.w	r3, r3, #4
 800075c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <MX_GPIO_Init+0xbc>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	f003 0304 	and.w	r3, r3, #4
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b23      	ldr	r3, [pc, #140]	; (80007f8 <MX_GPIO_Init+0xbc>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	4a22      	ldr	r2, [pc, #136]	; (80007f8 <MX_GPIO_Init+0xbc>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000776:	4b20      	ldr	r3, [pc, #128]	; (80007f8 <MX_GPIO_Init+0xbc>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b1d      	ldr	r3, [pc, #116]	; (80007f8 <MX_GPIO_Init+0xbc>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	4a1c      	ldr	r2, [pc, #112]	; (80007f8 <MX_GPIO_Init+0xbc>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800078e:	4b1a      	ldr	r3, [pc, #104]	; (80007f8 <MX_GPIO_Init+0xbc>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	603b      	str	r3, [r7, #0]
 8000798:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RClock_Pin|Reset_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f240 1101 	movw	r1, #257	; 0x101
 80007a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007a4:	f000 ff48 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_Pin|R_Reset_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2103      	movs	r1, #3
 80007ac:	4813      	ldr	r0, [pc, #76]	; (80007fc <MX_GPIO_Init+0xc0>)
 80007ae:	f000 ff43 	bl	8001638 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RClock_Pin|Reset_Pin;
 80007b2:	f240 1301 	movw	r3, #257	; 0x101
 80007b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b8:	2301      	movs	r3, #1
 80007ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 030c 	add.w	r3, r7, #12
 80007c8:	4619      	mov	r1, r3
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f000 fdc9 	bl	8001364 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Latch_Pin|R_Reset_Pin;
 80007d2:	2303      	movs	r3, #3
 80007d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d6:	2301      	movs	r3, #1
 80007d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007de:	2300      	movs	r3, #0
 80007e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e2:	f107 030c 	add.w	r3, r7, #12
 80007e6:	4619      	mov	r1, r3
 80007e8:	4804      	ldr	r0, [pc, #16]	; (80007fc <MX_GPIO_Init+0xc0>)
 80007ea:	f000 fdbb 	bl	8001364 <HAL_GPIO_Init>

}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000
 80007fc:	48000400 	.word	0x48000400

08000800 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000804:	4b1b      	ldr	r3, [pc, #108]	; (8000874 <MX_I2C1_Init+0x74>)
 8000806:	4a1c      	ldr	r2, [pc, #112]	; (8000878 <MX_I2C1_Init+0x78>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800080a:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_I2C1_Init+0x74>)
 800080c:	4a1b      	ldr	r2, [pc, #108]	; (800087c <MX_I2C1_Init+0x7c>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 86;
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <MX_I2C1_Init+0x74>)
 8000812:	2256      	movs	r2, #86	; 0x56
 8000814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_I2C1_Init+0x74>)
 8000818:	2201      	movs	r2, #1
 800081a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_I2C1_Init+0x74>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <MX_I2C1_Init+0x74>)
 8000824:	2200      	movs	r2, #0
 8000826:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000828:	4b12      	ldr	r3, [pc, #72]	; (8000874 <MX_I2C1_Init+0x74>)
 800082a:	2200      	movs	r2, #0
 800082c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <MX_I2C1_Init+0x74>)
 8000830:	2200      	movs	r2, #0
 8000832:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <MX_I2C1_Init+0x74>)
 8000836:	2200      	movs	r2, #0
 8000838:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083a:	480e      	ldr	r0, [pc, #56]	; (8000874 <MX_I2C1_Init+0x74>)
 800083c:	f000 ff14 	bl	8001668 <HAL_I2C_Init>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000846:	f000 f983 	bl	8000b50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800084a:	2100      	movs	r1, #0
 800084c:	4809      	ldr	r0, [pc, #36]	; (8000874 <MX_I2C1_Init+0x74>)
 800084e:	f002 f917 	bl	8002a80 <HAL_I2CEx_ConfigAnalogFilter>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000858:	f000 f97a 	bl	8000b50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800085c:	2100      	movs	r1, #0
 800085e:	4805      	ldr	r0, [pc, #20]	; (8000874 <MX_I2C1_Init+0x74>)
 8000860:	f002 f959 	bl	8002b16 <HAL_I2CEx_ConfigDigitalFilter>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800086a:	f000 f971 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	200000ac 	.word	0x200000ac
 8000878:	40005400 	.word	0x40005400
 800087c:	00707cbb 	.word	0x00707cbb

08000880 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b09e      	sub	sp, #120	; 0x78
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000898:	f107 0310 	add.w	r3, r7, #16
 800089c:	2254      	movs	r2, #84	; 0x54
 800089e:	2100      	movs	r1, #0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f007 ffef 	bl	8008884 <memset>
  if(i2cHandle->Instance==I2C1)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	4a27      	ldr	r2, [pc, #156]	; (8000948 <HAL_I2C_MspInit+0xc8>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d147      	bne.n	8000940 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008b0:	2340      	movs	r3, #64	; 0x40
 80008b2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008b4:	2300      	movs	r3, #0
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4618      	mov	r0, r3
 80008be:	f003 f855 	bl	800396c <HAL_RCCEx_PeriphCLKConfig>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80008c8:	f000 f942 	bl	8000b50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008cc:	4b1f      	ldr	r3, [pc, #124]	; (800094c <HAL_I2C_MspInit+0xcc>)
 80008ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d0:	4a1e      	ldr	r2, [pc, #120]	; (800094c <HAL_I2C_MspInit+0xcc>)
 80008d2:	f043 0301 	orr.w	r3, r3, #1
 80008d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d8:	4b1c      	ldr	r3, [pc, #112]	; (800094c <HAL_I2C_MspInit+0xcc>)
 80008da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008dc:	f003 0301 	and.w	r3, r3, #1
 80008e0:	60fb      	str	r3, [r7, #12]
 80008e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008e4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008e8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008ea:	2312      	movs	r3, #18
 80008ec:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f2:	2303      	movs	r3, #3
 80008f4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008f6:	2304      	movs	r3, #4
 80008f8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008fe:	4619      	mov	r1, r3
 8000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000904:	f000 fd2e 	bl	8001364 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000908:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_I2C_MspInit+0xcc>)
 800090a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800090c:	4a0f      	ldr	r2, [pc, #60]	; (800094c <HAL_I2C_MspInit+0xcc>)
 800090e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000912:	6593      	str	r3, [r2, #88]	; 0x58
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_I2C_MspInit+0xcc>)
 8000916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800091c:	60bb      	str	r3, [r7, #8]
 800091e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2105      	movs	r1, #5
 8000924:	201f      	movs	r0, #31
 8000926:	f000 fca3 	bl	8001270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800092a:	201f      	movs	r0, #31
 800092c:	f000 fcbc 	bl	80012a8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2105      	movs	r1, #5
 8000934:	2020      	movs	r0, #32
 8000936:	f000 fc9b 	bl	8001270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800093a:	2020      	movs	r0, #32
 800093c:	f000 fcb4 	bl	80012a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000940:	bf00      	nop
 8000942:	3778      	adds	r7, #120	; 0x78
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	40005400 	.word	0x40005400
 800094c:	40021000 	.word	0x40021000

08000950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000956:	f000 fb9a 	bl	800108e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095a:	f000 f819 	bl	8000990 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095e:	f7ff feed 	bl	800073c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000962:	f000 fad1 	bl	8000f08 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000966:	f000 f8f9 	bl	8000b5c <MX_SPI3_Init>
  MX_TIM6_Init();
 800096a:	f000 fa71 	bl	8000e50 <MX_TIM6_Init>
  MX_I2C1_Init();
 800096e:	f7ff ff47 	bl	8000800 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim6);
 8000972:	4806      	ldr	r0, [pc, #24]	; (800098c <main+0x3c>)
 8000974:	f003 ff9a 	bl	80048ac <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000978:	f004 fe8a 	bl	8005690 <osKernelInitialize>
  MX_FREERTOS_Init();
 800097c:	f7ff fdaa 	bl	80004d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000980:	f004 feaa 	bl	80056d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t spi_txbuf = 0x55;
 8000984:	2355      	movs	r3, #85	; 0x55
 8000986:	71fb      	strb	r3, [r7, #7]

  while (1)
 8000988:	e7fe      	b.n	8000988 <main+0x38>
 800098a:	bf00      	nop
 800098c:	200001b4 	.word	0x200001b4

08000990 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b096      	sub	sp, #88	; 0x58
 8000994:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000996:	f107 0314 	add.w	r3, r7, #20
 800099a:	2244      	movs	r2, #68	; 0x44
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f007 ff70 	bl	8008884 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a4:	463b      	mov	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009b2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009b6:	f002 f919 	bl	8002bec <HAL_PWREx_ControlVoltageScaling>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009c0:	f000 f8c6 	bl	8000b50 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009c4:	f002 f8f4 	bl	8002bb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80009c8:	4b21      	ldr	r3, [pc, #132]	; (8000a50 <SystemClock_Config+0xc0>)
 80009ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80009ce:	4a20      	ldr	r2, [pc, #128]	; (8000a50 <SystemClock_Config+0xc0>)
 80009d0:	f023 0318 	bic.w	r3, r3, #24
 80009d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80009d8:	2314      	movs	r3, #20
 80009da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80009dc:	2301      	movs	r3, #1
 80009de:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009e0:	2301      	movs	r3, #1
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80009e8:	2360      	movs	r3, #96	; 0x60
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ec:	2302      	movs	r3, #2
 80009ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80009f0:	2301      	movs	r3, #1
 80009f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009f4:	2301      	movs	r3, #1
 80009f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80009f8:	2310      	movs	r3, #16
 80009fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009fc:	2307      	movs	r3, #7
 80009fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a00:	2302      	movs	r3, #2
 8000a02:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 f943 	bl	8002c98 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a18:	f000 f89a 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	230f      	movs	r3, #15
 8000a1e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a20:	2303      	movs	r3, #3
 8000a22:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a30:	463b      	mov	r3, r7
 8000a32:	2101      	movs	r1, #1
 8000a34:	4618      	mov	r0, r3
 8000a36:	f002 fd43 	bl	80034c0 <HAL_RCC_ClockConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000a40:	f000 f886 	bl	8000b50 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000a44:	f003 f988 	bl	8003d58 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000a48:	bf00      	nop
 8000a4a:	3758      	adds	r7, #88	; 0x58
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	40021000 	.word	0x40021000

08000a54 <getSingleDigits>:

/* USER CODE BEGIN 4 */
Numbers getSingleDigits(uint8_t number){
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	Numbers singleDigits;
	singleDigits.ones = number % 10;
 8000a5e:	79fa      	ldrb	r2, [r7, #7]
 8000a60:	4b2a      	ldr	r3, [pc, #168]	; (8000b0c <getSingleDigits+0xb8>)
 8000a62:	fba3 1302 	umull	r1, r3, r3, r2
 8000a66:	08d9      	lsrs	r1, r3, #3
 8000a68:	460b      	mov	r3, r1
 8000a6a:	009b      	lsls	r3, r3, #2
 8000a6c:	440b      	add	r3, r1
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	1ad3      	subs	r3, r2, r3
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	72bb      	strb	r3, [r7, #10]
	number = number - singleDigits.ones;
 8000a76:	7abb      	ldrb	r3, [r7, #10]
 8000a78:	79fa      	ldrb	r2, [r7, #7]
 8000a7a:	1ad3      	subs	r3, r2, r3
 8000a7c:	71fb      	strb	r3, [r7, #7]
	singleDigits.tens = (number % 100)/10;
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4a23      	ldr	r2, [pc, #140]	; (8000b10 <getSingleDigits+0xbc>)
 8000a82:	fba2 1203 	umull	r1, r2, r2, r3
 8000a86:	0952      	lsrs	r2, r2, #5
 8000a88:	2164      	movs	r1, #100	; 0x64
 8000a8a:	fb01 f202 	mul.w	r2, r1, r2
 8000a8e:	1a9b      	subs	r3, r3, r2
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4a1e      	ldr	r2, [pc, #120]	; (8000b0c <getSingleDigits+0xb8>)
 8000a94:	fba2 2303 	umull	r2, r3, r2, r3
 8000a98:	08db      	lsrs	r3, r3, #3
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	727b      	strb	r3, [r7, #9]
	number = number - singleDigits.tens;
 8000a9e:	7a7b      	ldrb	r3, [r7, #9]
 8000aa0:	79fa      	ldrb	r2, [r7, #7]
 8000aa2:	1ad3      	subs	r3, r2, r3
 8000aa4:	71fb      	strb	r3, [r7, #7]
	singleDigits.hundreds = number % 1000/100;
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	4b1a      	ldr	r3, [pc, #104]	; (8000b14 <getSingleDigits+0xc0>)
 8000aaa:	fb83 1302 	smull	r1, r3, r3, r2
 8000aae:	1199      	asrs	r1, r3, #6
 8000ab0:	17d3      	asrs	r3, r2, #31
 8000ab2:	1acb      	subs	r3, r1, r3
 8000ab4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ab8:	fb01 f303 	mul.w	r3, r1, r3
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	4a14      	ldr	r2, [pc, #80]	; (8000b10 <getSingleDigits+0xbc>)
 8000ac0:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac4:	1152      	asrs	r2, r2, #5
 8000ac6:	17db      	asrs	r3, r3, #31
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	b2db      	uxtb	r3, r3
 8000acc:	723b      	strb	r3, [r7, #8]
	number = number - singleDigits.hundreds;
 8000ace:	7a3b      	ldrb	r3, [r7, #8]
 8000ad0:	79fa      	ldrb	r2, [r7, #7]
 8000ad2:	1ad3      	subs	r3, r2, r3
 8000ad4:	71fb      	strb	r3, [r7, #7]

	return singleDigits;
 8000ad6:	f107 030c 	add.w	r3, r7, #12
 8000ada:	f107 0208 	add.w	r2, r7, #8
 8000ade:	6812      	ldr	r2, [r2, #0]
 8000ae0:	4611      	mov	r1, r2
 8000ae2:	8019      	strh	r1, [r3, #0]
 8000ae4:	3302      	adds	r3, #2
 8000ae6:	0c12      	lsrs	r2, r2, #16
 8000ae8:	701a      	strb	r2, [r3, #0]
 8000aea:	2300      	movs	r3, #0
 8000aec:	7b3a      	ldrb	r2, [r7, #12]
 8000aee:	f362 0307 	bfi	r3, r2, #0, #8
 8000af2:	7b7a      	ldrb	r2, [r7, #13]
 8000af4:	f362 230f 	bfi	r3, r2, #8, #8
 8000af8:	7bba      	ldrb	r2, [r7, #14]
 8000afa:	f362 4317 	bfi	r3, r2, #16, #8
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	cccccccd 	.word	0xcccccccd
 8000b10:	51eb851f 	.word	0x51eb851f
 8000b14:	10624dd3 	.word	0x10624dd3

08000b18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	if(htim == &htim6){
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000b24:	4293      	cmp	r3, r2
 8000b26:	d102      	bne.n	8000b2e <HAL_TIM_PeriodElapsedCallback+0x16>
		showNextLine = true;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a06      	ldr	r2, [pc, #24]	; (8000b4c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d101      	bne.n	8000b3c <HAL_TIM_PeriodElapsedCallback+0x24>
    HAL_IncTick();
 8000b38:	f000 fac2 	bl	80010c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200001b4 	.word	0x200001b4
 8000b48:	20000100 	.word	0x20000100
 8000b4c:	40014400 	.word	0x40014400

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000b62:	4a1c      	ldr	r2, [pc, #112]	; (8000bd4 <MX_SPI3_Init+0x78>)
 8000b64:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000b68:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b6c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000b70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b74:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b76:	4b16      	ldr	r3, [pc, #88]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000b78:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b7c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b7e:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000b8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b90:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b92:	4b0f      	ldr	r3, [pc, #60]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000b94:	2228      	movs	r2, #40	; 0x28
 8000b96:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b98:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b9e:	4b0c      	ldr	r3, [pc, #48]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ba4:	4b0a      	ldr	r3, [pc, #40]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000baa:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000bb0:	4b07      	ldr	r3, [pc, #28]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000bb8:	2208      	movs	r2, #8
 8000bba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000bbc:	4804      	ldr	r0, [pc, #16]	; (8000bd0 <MX_SPI3_Init+0x74>)
 8000bbe:	f003 f9cd 	bl	8003f5c <HAL_SPI_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8000bc8:	f7ff ffc2 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000104 	.word	0x20000104
 8000bd4:	40003c00 	.word	0x40003c00

08000bd8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b08a      	sub	sp, #40	; 0x28
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a1b      	ldr	r2, [pc, #108]	; (8000c64 <HAL_SPI_MspInit+0x8c>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d12f      	bne.n	8000c5a <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000bfa:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <HAL_SPI_MspInit+0x90>)
 8000bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bfe:	4a1a      	ldr	r2, [pc, #104]	; (8000c68 <HAL_SPI_MspInit+0x90>)
 8000c00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c04:	6593      	str	r3, [r2, #88]	; 0x58
 8000c06:	4b18      	ldr	r3, [pc, #96]	; (8000c68 <HAL_SPI_MspInit+0x90>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c0e:	613b      	str	r3, [r7, #16]
 8000c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c12:	4b15      	ldr	r3, [pc, #84]	; (8000c68 <HAL_SPI_MspInit+0x90>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <HAL_SPI_MspInit+0x90>)
 8000c18:	f043 0302 	orr.w	r3, r3, #2
 8000c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <HAL_SPI_MspInit+0x90>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	f003 0302 	and.w	r3, r3, #2
 8000c26:	60fb      	str	r3, [r7, #12]
 8000c28:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000c2a:	2328      	movs	r3, #40	; 0x28
 8000c2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c3a:	2306      	movs	r3, #6
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	4809      	ldr	r0, [pc, #36]	; (8000c6c <HAL_SPI_MspInit+0x94>)
 8000c46:	f000 fb8d 	bl	8001364 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2105      	movs	r1, #5
 8000c4e:	2033      	movs	r0, #51	; 0x33
 8000c50:	f000 fb0e 	bl	8001270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000c54:	2033      	movs	r0, #51	; 0x33
 8000c56:	f000 fb27 	bl	80012a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	; 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40003c00 	.word	0x40003c00
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	48000400 	.word	0x48000400

08000c70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c76:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	6613      	str	r3, [r2, #96]	; 0x60
 8000c82:	4b0e      	ldr	r3, [pc, #56]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c86:	f003 0301 	and.w	r3, r3, #1
 8000c8a:	607b      	str	r3, [r7, #4]
 8000c8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c8e:	4b0b      	ldr	r3, [pc, #44]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c92:	4a0a      	ldr	r2, [pc, #40]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c98:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9a:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <HAL_MspInit+0x4c>)
 8000c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	210f      	movs	r1, #15
 8000caa:	f06f 0001 	mvn.w	r0, #1
 8000cae:	f000 fadf 	bl	8001270 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08c      	sub	sp, #48	; 0x30
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8000cce:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <HAL_InitTick+0xc8>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	4a2d      	ldr	r2, [pc, #180]	; (8000d88 <HAL_InitTick+0xc8>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cda:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <HAL_InitTick+0xc8>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ce6:	f107 020c 	add.w	r2, r7, #12
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	4611      	mov	r1, r2
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 fda9 	bl	8003848 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000cf6:	f002 fd91 	bl	800381c <HAL_RCC_GetPCLK2Freq>
 8000cfa:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cfe:	4a23      	ldr	r2, [pc, #140]	; (8000d8c <HAL_InitTick+0xcc>)
 8000d00:	fba2 2303 	umull	r2, r3, r2, r3
 8000d04:	0c9b      	lsrs	r3, r3, #18
 8000d06:	3b01      	subs	r3, #1
 8000d08:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	; (8000d90 <HAL_InitTick+0xd0>)
 8000d0c:	4a21      	ldr	r2, [pc, #132]	; (8000d94 <HAL_InitTick+0xd4>)
 8000d0e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000d10:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <HAL_InitTick+0xd0>)
 8000d12:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d16:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8000d18:	4a1d      	ldr	r2, [pc, #116]	; (8000d90 <HAL_InitTick+0xd0>)
 8000d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1c:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <HAL_InitTick+0xd0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <HAL_InitTick+0xd0>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	; (8000d90 <HAL_InitTick+0xd0>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8000d30:	4817      	ldr	r0, [pc, #92]	; (8000d90 <HAL_InitTick+0xd0>)
 8000d32:	f003 fd64 	bl	80047fe <HAL_TIM_Base_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d11b      	bne.n	8000d7c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8000d44:	4812      	ldr	r0, [pc, #72]	; (8000d90 <HAL_InitTick+0xd0>)
 8000d46:	f003 fdb1 	bl	80048ac <HAL_TIM_Base_Start_IT>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d50:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d111      	bne.n	8000d7c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000d58:	2019      	movs	r0, #25
 8000d5a:	f000 faa5 	bl	80012a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b0f      	cmp	r3, #15
 8000d62:	d808      	bhi.n	8000d76 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000d64:	2200      	movs	r2, #0
 8000d66:	6879      	ldr	r1, [r7, #4]
 8000d68:	2019      	movs	r0, #25
 8000d6a:	f000 fa81 	bl	8001270 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d6e:	4a0a      	ldr	r2, [pc, #40]	; (8000d98 <HAL_InitTick+0xd8>)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	e002      	b.n	8000d7c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3730      	adds	r7, #48	; 0x30
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	431bde83 	.word	0x431bde83
 8000d90:	20000168 	.word	0x20000168
 8000d94:	40014400 	.word	0x40014400
 8000d98:	20000008 	.word	0x20000008

08000d9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <NMI_Handler+0x4>

08000da2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <MemManage_Handler+0x4>

08000dae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db2:	e7fe      	b.n	8000db2 <BusFault_Handler+0x4>

08000db4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <UsageFault_Handler+0x4>

08000dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000dcc:	4802      	ldr	r0, [pc, #8]	; (8000dd8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000dce:	f003 fdc1 	bl	8004954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	20000168 	.word	0x20000168

08000ddc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000de0:	4802      	ldr	r0, [pc, #8]	; (8000dec <I2C1_EV_IRQHandler+0x10>)
 8000de2:	f000 fd21 	bl	8001828 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	200000ac 	.word	0x200000ac

08000df0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <I2C1_ER_IRQHandler+0x10>)
 8000df6:	f000 fd31 	bl	800185c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200000ac 	.word	0x200000ac

08000e04 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <SPI3_IRQHandler+0x10>)
 8000e0a:	f003 f9d9 	bl	80041c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	20000104 	.word	0x20000104

08000e18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <TIM6_DAC_IRQHandler+0x10>)
 8000e1e:	f003 fd99 	bl	8004954 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200001b4 	.word	0x200001b4

08000e2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <SystemInit+0x20>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a05      	ldr	r2, [pc, #20]	; (8000e4c <SystemInit+0x20>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e40:	bf00      	nop
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
 8000e4a:	bf00      	nop
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <MX_TIM6_Init+0x64>)
 8000e62:	4a15      	ldr	r2, [pc, #84]	; (8000eb8 <MX_TIM6_Init+0x68>)
 8000e64:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 320;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <MX_TIM6_Init+0x64>)
 8000e68:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000e6c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6e:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_TIM6_Init+0x64>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 142;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <MX_TIM6_Init+0x64>)
 8000e76:	228e      	movs	r2, #142	; 0x8e
 8000e78:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_TIM6_Init+0x64>)
 8000e7c:	2280      	movs	r2, #128	; 0x80
 8000e7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000e80:	480c      	ldr	r0, [pc, #48]	; (8000eb4 <MX_TIM6_Init+0x64>)
 8000e82:	f003 fcbc 	bl	80047fe <HAL_TIM_Base_Init>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d001      	beq.n	8000e90 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8000e8c:	f7ff fe60 	bl	8000b50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e90:	2300      	movs	r3, #0
 8000e92:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_TIM6_Init+0x64>)
 8000e9e:	f003 ff05 	bl	8004cac <HAL_TIMEx_MasterConfigSynchronization>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8000ea8:	f7ff fe52 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000eac:	bf00      	nop
 8000eae:	3710      	adds	r7, #16
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200001b4 	.word	0x200001b4
 8000eb8:	40001000 	.word	0x40001000

08000ebc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	4a0d      	ldr	r2, [pc, #52]	; (8000f00 <HAL_TIM_Base_MspInit+0x44>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d113      	bne.n	8000ef6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ece:	4b0d      	ldr	r3, [pc, #52]	; (8000f04 <HAL_TIM_Base_MspInit+0x48>)
 8000ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ed2:	4a0c      	ldr	r2, [pc, #48]	; (8000f04 <HAL_TIM_Base_MspInit+0x48>)
 8000ed4:	f043 0310 	orr.w	r3, r3, #16
 8000ed8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eda:	4b0a      	ldr	r3, [pc, #40]	; (8000f04 <HAL_TIM_Base_MspInit+0x48>)
 8000edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ede:	f003 0310 	and.w	r3, r3, #16
 8000ee2:	60fb      	str	r3, [r7, #12]
 8000ee4:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	2105      	movs	r1, #5
 8000eea:	2036      	movs	r0, #54	; 0x36
 8000eec:	f000 f9c0 	bl	8001270 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ef0:	2036      	movs	r0, #54	; 0x36
 8000ef2:	f000 f9d9 	bl	80012a8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40001000 	.word	0x40001000
 8000f04:	40021000 	.word	0x40021000

08000f08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <MX_USART2_UART_Init+0x5c>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_USART2_UART_Init+0x58>)
 8000f4c:	f003 ff32 	bl	8004db4 <HAL_UART_Init>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f56:	f7ff fdfb 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000200 	.word	0x20000200
 8000f64:	40004400 	.word	0x40004400

08000f68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b09e      	sub	sp, #120	; 0x78
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	2254      	movs	r2, #84	; 0x54
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f007 fc7b 	bl	8008884 <memset>
  if(uartHandle->Instance==USART2)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a28      	ldr	r2, [pc, #160]	; (8001034 <HAL_UART_MspInit+0xcc>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d148      	bne.n	800102a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fa0:	f107 0310 	add.w	r3, r7, #16
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f002 fce1 	bl	800396c <HAL_RCCEx_PeriphCLKConfig>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fb0:	f7ff fdce 	bl	8000b50 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb4:	4b20      	ldr	r3, [pc, #128]	; (8001038 <HAL_UART_MspInit+0xd0>)
 8000fb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb8:	4a1f      	ldr	r2, [pc, #124]	; (8001038 <HAL_UART_MspInit+0xd0>)
 8000fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbe:	6593      	str	r3, [r2, #88]	; 0x58
 8000fc0:	4b1d      	ldr	r3, [pc, #116]	; (8001038 <HAL_UART_MspInit+0xd0>)
 8000fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b1a      	ldr	r3, [pc, #104]	; (8001038 <HAL_UART_MspInit+0xd0>)
 8000fce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd0:	4a19      	ldr	r2, [pc, #100]	; (8001038 <HAL_UART_MspInit+0xd0>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_UART_MspInit+0xd0>)
 8000fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	60bb      	str	r3, [r7, #8]
 8000fe2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000fe4:	2304      	movs	r3, #4
 8000fe6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe8:	2302      	movs	r3, #2
 8000fea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ff8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001002:	f000 f9af 	bl	8001364 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001006:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800100a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001014:	2303      	movs	r3, #3
 8001016:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001018:	2303      	movs	r3, #3
 800101a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800101c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001020:	4619      	mov	r1, r3
 8001022:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001026:	f000 f99d 	bl	8001364 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800102a:	bf00      	nop
 800102c:	3778      	adds	r7, #120	; 0x78
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40004400 	.word	0x40004400
 8001038:	40021000 	.word	0x40021000

0800103c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800103c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001074 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001040:	f7ff fef4 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001044:	480c      	ldr	r0, [pc, #48]	; (8001078 <LoopForever+0x6>)
  ldr r1, =_edata
 8001046:	490d      	ldr	r1, [pc, #52]	; (800107c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <LoopForever+0xe>)
  movs r3, #0
 800104a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800104c:	e002      	b.n	8001054 <LoopCopyDataInit>

0800104e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800104e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001050:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001052:	3304      	adds	r3, #4

08001054 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001054:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001056:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001058:	d3f9      	bcc.n	800104e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800105a:	4a0a      	ldr	r2, [pc, #40]	; (8001084 <LoopForever+0x12>)
  ldr r4, =_ebss
 800105c:	4c0a      	ldr	r4, [pc, #40]	; (8001088 <LoopForever+0x16>)
  movs r3, #0
 800105e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001060:	e001      	b.n	8001066 <LoopFillZerobss>

08001062 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001062:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001064:	3204      	adds	r2, #4

08001066 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001066:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001068:	d3fb      	bcc.n	8001062 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800106a:	f007 fbd7 	bl	800881c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800106e:	f7ff fc6f 	bl	8000950 <main>

08001072 <LoopForever>:

LoopForever:
    b LoopForever
 8001072:	e7fe      	b.n	8001072 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001074:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001078:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800107c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001080:	080093f4 	.word	0x080093f4
  ldr r2, =_sbss
 8001084:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001088:	20001c58 	.word	0x20001c58

0800108c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800108c:	e7fe      	b.n	800108c <ADC1_IRQHandler>

0800108e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001098:	2003      	movs	r0, #3
 800109a:	f000 f8de 	bl	800125a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800109e:	200f      	movs	r0, #15
 80010a0:	f7ff fe0e 	bl	8000cc0 <HAL_InitTick>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d002      	beq.n	80010b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	71fb      	strb	r3, [r7, #7]
 80010ae:	e001      	b.n	80010b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010b0:	f7ff fdde 	bl	8000c70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010b4:	79fb      	ldrb	r3, [r7, #7]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
	...

080010c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_IncTick+0x20>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <HAL_IncTick+0x24>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4413      	add	r3, r2
 80010d0:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <HAL_IncTick+0x24>)
 80010d2:	6013      	str	r3, [r2, #0]
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	2000000c 	.word	0x2000000c
 80010e4:	20000284 	.word	0x20000284

080010e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return uwTick;
 80010ec:	4b03      	ldr	r3, [pc, #12]	; (80010fc <HAL_GetTick+0x14>)
 80010ee:	681b      	ldr	r3, [r3, #0]
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	20000284 	.word	0x20000284

08001100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001110:	4b0c      	ldr	r3, [pc, #48]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001116:	68ba      	ldr	r2, [r7, #8]
 8001118:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800111c:	4013      	ands	r3, r2
 800111e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001128:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001132:	4a04      	ldr	r2, [pc, #16]	; (8001144 <__NVIC_SetPriorityGrouping+0x44>)
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	60d3      	str	r3, [r2, #12]
}
 8001138:	bf00      	nop
 800113a:	3714      	adds	r7, #20
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800114c:	4b04      	ldr	r3, [pc, #16]	; (8001160 <__NVIC_GetPriorityGrouping+0x18>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	f003 0307 	and.w	r3, r3, #7
}
 8001156:	4618      	mov	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001164:	b480      	push	{r7}
 8001166:	b083      	sub	sp, #12
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001172:	2b00      	cmp	r3, #0
 8001174:	db0b      	blt.n	800118e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001176:	79fb      	ldrb	r3, [r7, #7]
 8001178:	f003 021f 	and.w	r2, r3, #31
 800117c:	4907      	ldr	r1, [pc, #28]	; (800119c <__NVIC_EnableIRQ+0x38>)
 800117e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001182:	095b      	lsrs	r3, r3, #5
 8001184:	2001      	movs	r0, #1
 8001186:	fa00 f202 	lsl.w	r2, r0, r2
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800118e:	bf00      	nop
 8001190:	370c      	adds	r7, #12
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	e000e100 	.word	0xe000e100

080011a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	6039      	str	r1, [r7, #0]
 80011aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	db0a      	blt.n	80011ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	b2da      	uxtb	r2, r3
 80011b8:	490c      	ldr	r1, [pc, #48]	; (80011ec <__NVIC_SetPriority+0x4c>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	0112      	lsls	r2, r2, #4
 80011c0:	b2d2      	uxtb	r2, r2
 80011c2:	440b      	add	r3, r1
 80011c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011c8:	e00a      	b.n	80011e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	b2da      	uxtb	r2, r3
 80011ce:	4908      	ldr	r1, [pc, #32]	; (80011f0 <__NVIC_SetPriority+0x50>)
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	f003 030f 	and.w	r3, r3, #15
 80011d6:	3b04      	subs	r3, #4
 80011d8:	0112      	lsls	r2, r2, #4
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	440b      	add	r3, r1
 80011de:	761a      	strb	r2, [r3, #24]
}
 80011e0:	bf00      	nop
 80011e2:	370c      	adds	r7, #12
 80011e4:	46bd      	mov	sp, r7
 80011e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ea:	4770      	bx	lr
 80011ec:	e000e100 	.word	0xe000e100
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b089      	sub	sp, #36	; 0x24
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	f1c3 0307 	rsb	r3, r3, #7
 800120e:	2b04      	cmp	r3, #4
 8001210:	bf28      	it	cs
 8001212:	2304      	movcs	r3, #4
 8001214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	3304      	adds	r3, #4
 800121a:	2b06      	cmp	r3, #6
 800121c:	d902      	bls.n	8001224 <NVIC_EncodePriority+0x30>
 800121e:	69fb      	ldr	r3, [r7, #28]
 8001220:	3b03      	subs	r3, #3
 8001222:	e000      	b.n	8001226 <NVIC_EncodePriority+0x32>
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001228:	f04f 32ff 	mov.w	r2, #4294967295
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	fa02 f303 	lsl.w	r3, r2, r3
 8001232:	43da      	mvns	r2, r3
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	401a      	ands	r2, r3
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800123c:	f04f 31ff 	mov.w	r1, #4294967295
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	fa01 f303 	lsl.w	r3, r1, r3
 8001246:	43d9      	mvns	r1, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	4313      	orrs	r3, r2
         );
}
 800124e:	4618      	mov	r0, r3
 8001250:	3724      	adds	r7, #36	; 0x24
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff ff4c 	bl	8001100 <__NVIC_SetPriorityGrouping>
}
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	60b9      	str	r1, [r7, #8]
 800127a:	607a      	str	r2, [r7, #4]
 800127c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001282:	f7ff ff61 	bl	8001148 <__NVIC_GetPriorityGrouping>
 8001286:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	68b9      	ldr	r1, [r7, #8]
 800128c:	6978      	ldr	r0, [r7, #20]
 800128e:	f7ff ffb1 	bl	80011f4 <NVIC_EncodePriority>
 8001292:	4602      	mov	r2, r0
 8001294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f7ff ff80 	bl	80011a0 <__NVIC_SetPriority>
}
 80012a0:	bf00      	nop
 80012a2:	3718      	adds	r7, #24
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff ff54 	bl	8001164 <__NVIC_EnableIRQ>
}
 80012bc:	bf00      	nop
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d005      	beq.n	80012e8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2204      	movs	r2, #4
 80012e0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e029      	b.n	800133c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f022 020e 	bic.w	r2, r2, #14
 80012f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f022 0201 	bic.w	r2, r2, #1
 8001306:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130c:	f003 021c 	and.w	r2, r3, #28
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	2101      	movs	r1, #1
 8001316:	fa01 f202 	lsl.w	r2, r1, r2
 800131a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2201      	movs	r2, #1
 8001320:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001330:	2b00      	cmp	r3, #0
 8001332:	d003      	beq.n	800133c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	4798      	blx	r3
    }
  }
  return status;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
}
 800133e:	4618      	mov	r0, r3
 8001340:	3710      	adds	r7, #16
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001354:	b2db      	uxtb	r3, r3
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001372:	e148      	b.n	8001606 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2101      	movs	r1, #1
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	fa01 f303 	lsl.w	r3, r1, r3
 8001380:	4013      	ands	r3, r2
 8001382:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f000 813a 	beq.w	8001600 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d005      	beq.n	80013a4 <HAL_GPIO_Init+0x40>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	2b02      	cmp	r3, #2
 80013a2:	d130      	bne.n	8001406 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4013      	ands	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	68da      	ldr	r2, [r3, #12]
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013da:	2201      	movs	r2, #1
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	fa02 f303 	lsl.w	r3, r2, r3
 80013e2:	43db      	mvns	r3, r3
 80013e4:	693a      	ldr	r2, [r7, #16]
 80013e6:	4013      	ands	r3, r2
 80013e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	091b      	lsrs	r3, r3, #4
 80013f0:	f003 0201 	and.w	r2, r3, #1
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b03      	cmp	r3, #3
 8001410:	d017      	beq.n	8001442 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d123      	bne.n	8001496 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	08da      	lsrs	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3208      	adds	r2, #8
 8001456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	220f      	movs	r2, #15
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	691a      	ldr	r2, [r3, #16]
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f003 0307 	and.w	r3, r3, #7
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	08da      	lsrs	r2, r3, #3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3208      	adds	r2, #8
 8001490:	6939      	ldr	r1, [r7, #16]
 8001492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	2203      	movs	r2, #3
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43db      	mvns	r3, r3
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	4013      	ands	r3, r2
 80014ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 0203 	and.w	r2, r3, #3
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8094 	beq.w	8001600 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d8:	4b52      	ldr	r3, [pc, #328]	; (8001624 <HAL_GPIO_Init+0x2c0>)
 80014da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014dc:	4a51      	ldr	r2, [pc, #324]	; (8001624 <HAL_GPIO_Init+0x2c0>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6613      	str	r3, [r2, #96]	; 0x60
 80014e4:	4b4f      	ldr	r3, [pc, #316]	; (8001624 <HAL_GPIO_Init+0x2c0>)
 80014e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	60bb      	str	r3, [r7, #8]
 80014ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f0:	4a4d      	ldr	r2, [pc, #308]	; (8001628 <HAL_GPIO_Init+0x2c4>)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	089b      	lsrs	r3, r3, #2
 80014f6:	3302      	adds	r3, #2
 80014f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	f003 0303 	and.w	r3, r3, #3
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	220f      	movs	r2, #15
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800151a:	d00d      	beq.n	8001538 <HAL_GPIO_Init+0x1d4>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a43      	ldr	r2, [pc, #268]	; (800162c <HAL_GPIO_Init+0x2c8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d007      	beq.n	8001534 <HAL_GPIO_Init+0x1d0>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a42      	ldr	r2, [pc, #264]	; (8001630 <HAL_GPIO_Init+0x2cc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d101      	bne.n	8001530 <HAL_GPIO_Init+0x1cc>
 800152c:	2302      	movs	r3, #2
 800152e:	e004      	b.n	800153a <HAL_GPIO_Init+0x1d6>
 8001530:	2307      	movs	r3, #7
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x1d6>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_GPIO_Init+0x1d6>
 8001538:	2300      	movs	r3, #0
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	f002 0203 	and.w	r2, r2, #3
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	4093      	lsls	r3, r2
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800154a:	4937      	ldr	r1, [pc, #220]	; (8001628 <HAL_GPIO_Init+0x2c4>)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800157c:	4a2d      	ldr	r2, [pc, #180]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001582:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015a6:	4a23      	ldr	r2, [pc, #140]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015ac:	4b21      	ldr	r3, [pc, #132]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015d0:	4a18      	ldr	r2, [pc, #96]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015fa:	4a0e      	ldr	r2, [pc, #56]	; (8001634 <HAL_GPIO_Init+0x2d0>)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	f47f aeaf 	bne.w	8001374 <HAL_GPIO_Init+0x10>
  }
}
 8001616:	bf00      	nop
 8001618:	bf00      	nop
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	48000400 	.word	0x48000400
 8001630:	48000800 	.word	0x48000800
 8001634:	40010400 	.word	0x40010400

08001638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	460b      	mov	r3, r1
 8001642:	807b      	strh	r3, [r7, #2]
 8001644:	4613      	mov	r3, r2
 8001646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001648:	787b      	ldrb	r3, [r7, #1]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800164e:	887a      	ldrh	r2, [r7, #2]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001654:	e002      	b.n	800165c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d101      	bne.n	800167a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	e081      	b.n	800177e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001680:	b2db      	uxtb	r3, r3
 8001682:	2b00      	cmp	r3, #0
 8001684:	d106      	bne.n	8001694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff f8f6 	bl	8000880 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2224      	movs	r2, #36	; 0x24
 8001698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685a      	ldr	r2, [r3, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80016c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	68db      	ldr	r3, [r3, #12]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d107      	bne.n	80016e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80016de:	609a      	str	r2, [r3, #8]
 80016e0:	e006      	b.n	80016f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689a      	ldr	r2, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80016ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d104      	bne.n	8001702 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001700:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001710:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001714:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68da      	ldr	r2, [r3, #12]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001724:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	691a      	ldr	r2, [r3, #16]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	695b      	ldr	r3, [r3, #20]
 800172e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	430a      	orrs	r2, r1
 800173e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69d9      	ldr	r1, [r3, #28]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a1a      	ldr	r2, [r3, #32]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	430a      	orrs	r2, r1
 800174e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0201 	orr.w	r2, r2, #1
 800175e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2220      	movs	r2, #32
 800176a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2200      	movs	r2, #0
 8001778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	4613      	mov	r3, r2
 8001794:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d139      	bne.n	8001816 <HAL_I2C_Slave_Receive_IT+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d101      	bne.n	80017b0 <HAL_I2C_Slave_Receive_IT+0x28>
 80017ac:	2302      	movs	r3, #2
 80017ae:	e033      	b.n	8001818 <HAL_I2C_Slave_Receive_IT+0x90>
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2222      	movs	r2, #34	; 0x22
 80017bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	2220      	movs	r2, #32
 80017c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2200      	movs	r2, #0
 80017cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	685a      	ldr	r2, [r3, #4]
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017dc:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	68ba      	ldr	r2, [r7, #8]
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	88fa      	ldrh	r2, [r7, #6]
 80017e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <HAL_I2C_Slave_Receive_IT+0x98>)
 80017f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	4a09      	ldr	r2, [pc, #36]	; (8001824 <HAL_I2C_Slave_Receive_IT+0x9c>)
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2200      	movs	r2, #0
 8001804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8001808:	f248 0102 	movw	r1, #32770	; 0x8002
 800180c:	68f8      	ldr	r0, [r7, #12]
 800180e:	f001 f86f 	bl	80028f0 <I2C_Enable_IRQ>

    return HAL_OK;
 8001812:	2300      	movs	r3, #0
 8001814:	e000      	b.n	8001818 <HAL_I2C_Slave_Receive_IT+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001816:	2302      	movs	r3, #2
  }
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	ffff0000 	.word	0xffff0000
 8001824:	080019db 	.word	0x080019db

08001828 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	699b      	ldr	r3, [r3, #24]
 8001836:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001844:	2b00      	cmp	r3, #0
 8001846:	d005      	beq.n	8001854 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800184c:	68ba      	ldr	r2, [r7, #8]
 800184e:	68f9      	ldr	r1, [r7, #12]
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	4798      	blx	r3
  }
}
 8001854:	bf00      	nop
 8001856:	3710      	adds	r7, #16
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}

0800185c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	0a1b      	lsrs	r3, r3, #8
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	2b00      	cmp	r3, #0
 800187e:	d010      	beq.n	80018a2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	09db      	lsrs	r3, r3, #7
 8001884:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8001888:	2b00      	cmp	r3, #0
 800188a:	d00a      	beq.n	80018a2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001890:	f043 0201 	orr.w	r2, r3, #1
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	0a9b      	lsrs	r3, r3, #10
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d010      	beq.n	80018d0 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	09db      	lsrs	r3, r3, #7
 80018b2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00a      	beq.n	80018d0 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f043 0208 	orr.w	r2, r3, #8
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ce:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	0a5b      	lsrs	r3, r3, #9
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d010      	beq.n	80018fe <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	09db      	lsrs	r3, r3, #7
 80018e0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d00a      	beq.n	80018fe <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ec:	f043 0202 	orr.w	r2, r3, #2
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018fc:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001902:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f003 030b 	and.w	r3, r3, #11
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800190e:	68f9      	ldr	r1, [r7, #12]
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 fe81 	bl	8002618 <I2C_ITError>
  }
}
 8001916:	bf00      	nop
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800191e:	b480      	push	{r7}
 8001920:	b083      	sub	sp, #12
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800193a:	bf00      	nop
 800193c:	370c      	adds	r7, #12
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr

08001946 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001946:	b480      	push	{r7}
 8001948:	b083      	sub	sp, #12
 800194a:	af00      	add	r7, sp, #0
 800194c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr

0800195a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800195a:	b480      	push	{r7}
 800195c:	b083      	sub	sp, #12
 800195e:	af00      	add	r7, sp, #0
 8001960:	6078      	str	r0, [r7, #4]
 8001962:	460b      	mov	r3, r1
 8001964:	70fb      	strb	r3, [r7, #3]
 8001966:	4613      	mov	r3, r2
 8001968:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800196a:	bf00      	nop
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr

08001976 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001976:	b480      	push	{r7}
 8001978:	b083      	sub	sp, #12
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800197e:	bf00      	nop
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80019a6:	bf00      	nop
 80019a8:	370c      	adds	r7, #12
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr

080019b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80019b2:	b480      	push	{r7}
 80019b4:	b083      	sub	sp, #12
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr

080019c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80019c6:	b480      	push	{r7}
 80019c8:	b083      	sub	sp, #12
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b086      	sub	sp, #24
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d101      	bne.n	80019fe <I2C_Slave_ISR_IT+0x24>
 80019fa:	2302      	movs	r3, #2
 80019fc:	e0ec      	b.n	8001bd8 <I2C_Slave_ISR_IT+0x1fe>
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	095b      	lsrs	r3, r3, #5
 8001a0a:	f003 0301 	and.w	r3, r3, #1
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d009      	beq.n	8001a26 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	095b      	lsrs	r3, r3, #5
 8001a16:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001a1e:	6939      	ldr	r1, [r7, #16]
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f000 fc99 	bl	8002358 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	091b      	lsrs	r3, r3, #4
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d04d      	beq.n	8001ace <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	091b      	lsrs	r3, r3, #4
 8001a36:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d047      	beq.n	8001ace <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d128      	bne.n	8001a9a <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	2b28      	cmp	r3, #40	; 0x28
 8001a52:	d108      	bne.n	8001a66 <I2C_Slave_ISR_IT+0x8c>
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a5a:	d104      	bne.n	8001a66 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8001a5c:	6939      	ldr	r1, [r7, #16]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f000 fd84 	bl	800256c <I2C_ITListenCplt>
 8001a64:	e032      	b.n	8001acc <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b29      	cmp	r3, #41	; 0x29
 8001a70:	d10e      	bne.n	8001a90 <I2C_Slave_ISR_IT+0xb6>
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001a78:	d00a      	beq.n	8001a90 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2210      	movs	r2, #16
 8001a80:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 febf 	bl	8002806 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 fb3d 	bl	8002108 <I2C_ITSlaveSeqCplt>
 8001a8e:	e01d      	b.n	8001acc <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2210      	movs	r2, #16
 8001a96:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8001a98:	e096      	b.n	8001bc8 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2210      	movs	r2, #16
 8001aa0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	f043 0204 	orr.w	r2, r3, #4
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <I2C_Slave_ISR_IT+0xe4>
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aba:	f040 8085 	bne.w	8001bc8 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	68f8      	ldr	r0, [r7, #12]
 8001ac6:	f000 fda7 	bl	8002618 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001aca:	e07d      	b.n	8001bc8 <I2C_Slave_ISR_IT+0x1ee>
 8001acc:	e07c      	b.n	8001bc8 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	089b      	lsrs	r3, r3, #2
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d030      	beq.n	8001b3c <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	089b      	lsrs	r3, r3, #2
 8001ade:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d02a      	beq.n	8001b3c <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d018      	beq.n	8001b22 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d14f      	bne.n	8001bcc <I2C_Slave_ISR_IT+0x1f2>
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b32:	d04b      	beq.n	8001bcc <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 fae7 	bl	8002108 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8001b3a:	e047      	b.n	8001bcc <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	08db      	lsrs	r3, r3, #3
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00a      	beq.n	8001b5e <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	08db      	lsrs	r3, r3, #3
 8001b4c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d004      	beq.n	8001b5e <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8001b54:	6939      	ldr	r1, [r7, #16]
 8001b56:	68f8      	ldr	r0, [r7, #12]
 8001b58:	f000 fa15 	bl	8001f86 <I2C_ITAddrCplt>
 8001b5c:	e037      	b.n	8001bce <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	085b      	lsrs	r3, r3, #1
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d031      	beq.n	8001bce <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	085b      	lsrs	r3, r3, #1
 8001b6e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d02b      	beq.n	8001bce <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7a:	b29b      	uxth	r3, r3
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d018      	beq.n	8001bb2 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	781a      	ldrb	r2, [r3, #0]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	1c5a      	adds	r2, r3, #1
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b9a:	b29b      	uxth	r3, r3
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	851a      	strh	r2, [r3, #40]	; 0x28
 8001bb0:	e00d      	b.n	8001bce <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb8:	d002      	beq.n	8001bc0 <I2C_Slave_ISR_IT+0x1e6>
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d106      	bne.n	8001bce <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8001bc0:	68f8      	ldr	r0, [r7, #12]
 8001bc2:	f000 faa1 	bl	8002108 <I2C_ITSlaveSeqCplt>
 8001bc6:	e002      	b.n	8001bce <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8001bc8:	bf00      	nop
 8001bca:	e000      	b.n	8001bce <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8001bcc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001bd6:	2300      	movs	r3, #0
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b088      	sub	sp, #32
 8001be4:	af02      	add	r7, sp, #8
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d101      	bne.n	8001bfa <I2C_Master_ISR_DMA+0x1a>
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	e0e1      	b.n	8001dbe <I2C_Master_ISR_DMA+0x1de>
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d017      	beq.n	8001c3e <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d011      	beq.n	8001c3e <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2210      	movs	r2, #16
 8001c20:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c26:	f043 0204 	orr.w	r2, r3, #4
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8001c2e:	2120      	movs	r1, #32
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f000 fe5d 	bl	80028f0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f000 fde5 	bl	8002806 <I2C_Flush_TXDR>
 8001c3c:	e0ba      	b.n	8001db4 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	09db      	lsrs	r3, r3, #7
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d072      	beq.n	8001d30 <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	099b      	lsrs	r3, r3, #6
 8001c4e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d06c      	beq.n	8001d30 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c64:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c6a:	b29b      	uxth	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d04e      	beq.n	8001d0e <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c7c:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	2bff      	cmp	r3, #255	; 0xff
 8001c86:	d906      	bls.n	8001c96 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	22ff      	movs	r2, #255	; 0xff
 8001c8c:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8001c8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	e010      	b.n	8001cb8 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ca8:	d003      	beq.n	8001cb2 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cae:	617b      	str	r3, [r7, #20]
 8001cb0:	e002      	b.n	8001cb8 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8001cb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cb6:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	8a79      	ldrh	r1, [r7, #18]
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	68f8      	ldr	r0, [r7, #12]
 8001cc8:	f000 fde0 	bl	800288c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b22      	cmp	r3, #34	; 0x22
 8001ce8:	d108      	bne.n	8001cfc <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cf8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001cfa:	e05b      	b.n	8001db4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d0a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8001d0c:	e052      	b.n	8001db4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d18:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d1c:	d003      	beq.n	8001d26 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8001d1e:	68f8      	ldr	r0, [r7, #12]
 8001d20:	f000 f9b5 	bl	800208e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8001d24:	e046      	b.n	8001db4 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001d26:	2140      	movs	r1, #64	; 0x40
 8001d28:	68f8      	ldr	r0, [r7, #12]
 8001d2a:	f000 fc75 	bl	8002618 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8001d2e:	e041      	b.n	8001db4 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	099b      	lsrs	r3, r3, #6
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d029      	beq.n	8001d90 <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	099b      	lsrs	r3, r3, #6
 8001d40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d023      	beq.n	8001d90 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d119      	bne.n	8001d86 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001d60:	d027      	beq.n	8001db2 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d66:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d6a:	d108      	bne.n	8001d7e <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d7a:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8001d7c:	e019      	b.n	8001db2 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f985 	bl	800208e <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8001d84:	e015      	b.n	8001db2 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8001d86:	2140      	movs	r1, #64	; 0x40
 8001d88:	68f8      	ldr	r0, [r7, #12]
 8001d8a:	f000 fc45 	bl	8002618 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8001d8e:	e010      	b.n	8001db2 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00b      	beq.n	8001db4 <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	095b      	lsrs	r3, r3, #5
 8001da0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8001da8:	68b9      	ldr	r1, [r7, #8]
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 fa0a 	bl	80021c4 <I2C_ITMasterCplt>
 8001db0:	e000      	b.n	8001db4 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8001db2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3718      	adds	r7, #24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b088      	sub	sp, #32
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	60b9      	str	r1, [r7, #8]
 8001dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd6:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <I2C_Slave_ISR_DMA+0x24>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e0c9      	b.n	8001f7e <I2C_Slave_ISR_DMA+0x1b8>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	095b      	lsrs	r3, r3, #5
 8001df6:	f003 0301 	and.w	r3, r3, #1
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <I2C_Slave_ISR_DMA+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	095b      	lsrs	r3, r3, #5
 8001e02:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8001e0a:	68b9      	ldr	r1, [r7, #8]
 8001e0c:	68f8      	ldr	r0, [r7, #12]
 8001e0e:	f000 faa3 	bl	8002358 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	091b      	lsrs	r3, r3, #4
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 809a 	beq.w	8001f54 <I2C_Slave_ISR_DMA+0x18e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	091b      	lsrs	r3, r3, #4
 8001e24:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	f000 8093 	beq.w	8001f54 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	0b9b      	lsrs	r3, r3, #14
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d105      	bne.n	8001e46 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	0bdb      	lsrs	r3, r3, #15
 8001e3e:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d07f      	beq.n	8001f46 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00d      	beq.n	8001e6a <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	0bdb      	lsrs	r3, r3, #15
 8001e52:	f003 0301 	and.w	r3, r3, #1
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d007      	beq.n	8001e6a <I2C_Slave_ISR_DMA+0xa4>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d101      	bne.n	8001e6a <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8001e66:	2301      	movs	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d00d      	beq.n	8001e8e <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	0b9b      	lsrs	r3, r3, #14
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <I2C_Slave_ISR_DMA+0xc8>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d128      	bne.n	8001ee6 <I2C_Slave_ISR_DMA+0x120>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	2b28      	cmp	r3, #40	; 0x28
 8001e9e:	d108      	bne.n	8001eb2 <I2C_Slave_ISR_DMA+0xec>
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ea6:	d104      	bne.n	8001eb2 <I2C_Slave_ISR_DMA+0xec>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8001ea8:	68b9      	ldr	r1, [r7, #8]
 8001eaa:	68f8      	ldr	r0, [r7, #12]
 8001eac:	f000 fb5e 	bl	800256c <I2C_ITListenCplt>
 8001eb0:	e048      	b.n	8001f44 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eb8:	b2db      	uxtb	r3, r3
 8001eba:	2b29      	cmp	r3, #41	; 0x29
 8001ebc:	d10e      	bne.n	8001edc <I2C_Slave_ISR_DMA+0x116>
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001ec4:	d00a      	beq.n	8001edc <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2210      	movs	r2, #16
 8001ecc:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 fc99 	bl	8002806 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 f917 	bl	8002108 <I2C_ITSlaveSeqCplt>
 8001eda:	e033      	b.n	8001f44 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2210      	movs	r2, #16
 8001ee2:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8001ee4:	e034      	b.n	8001f50 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2210      	movs	r2, #16
 8001eec:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	f043 0204 	orr.w	r2, r3, #4
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f00:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <I2C_Slave_ISR_DMA+0x14a>
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f0e:	d11f      	bne.n	8001f50 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
 8001f12:	2b21      	cmp	r3, #33	; 0x21
 8001f14:	d002      	beq.n	8001f1c <I2C_Slave_ISR_DMA+0x156>
 8001f16:	7dfb      	ldrb	r3, [r7, #23]
 8001f18:	2b29      	cmp	r3, #41	; 0x29
 8001f1a:	d103      	bne.n	8001f24 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2221      	movs	r2, #33	; 0x21
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
 8001f22:	e008      	b.n	8001f36 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001f24:	7dfb      	ldrb	r3, [r7, #23]
 8001f26:	2b22      	cmp	r3, #34	; 0x22
 8001f28:	d002      	beq.n	8001f30 <I2C_Slave_ISR_DMA+0x16a>
 8001f2a:	7dfb      	ldrb	r3, [r7, #23]
 8001f2c:	2b2a      	cmp	r3, #42	; 0x2a
 8001f2e:	d102      	bne.n	8001f36 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2222      	movs	r2, #34	; 0x22
 8001f34:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 fb6b 	bl	8002618 <I2C_ITError>
      if (treatdmanack == 1U)
 8001f42:	e005      	b.n	8001f50 <I2C_Slave_ISR_DMA+0x18a>
 8001f44:	e004      	b.n	8001f50 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2210      	movs	r2, #16
 8001f4c:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f4e:	e011      	b.n	8001f74 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8001f50:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8001f52:	e00f      	b.n	8001f74 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	08db      	lsrs	r3, r3, #3
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <I2C_Slave_ISR_DMA+0x1ae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	08db      	lsrs	r3, r3, #3
 8001f64:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d003      	beq.n	8001f74 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f809 	bl	8001f86 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3720      	adds	r7, #32
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001f9c:	2b28      	cmp	r3, #40	; 0x28
 8001f9e:	d16a      	bne.n	8002076 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	0c1b      	lsrs	r3, r3, #16
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	699b      	ldr	r3, [r3, #24]
 8001fb6:	0c1b      	lsrs	r3, r3, #16
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001fbe:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fcc:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8001fda:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	2b02      	cmp	r3, #2
 8001fe2:	d138      	bne.n	8002056 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8001fe4:	897b      	ldrh	r3, [r7, #10]
 8001fe6:	09db      	lsrs	r3, r3, #7
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	89bb      	ldrh	r3, [r7, #12]
 8001fec:	4053      	eors	r3, r2
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	f003 0306 	and.w	r3, r3, #6
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d11c      	bne.n	8002032 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8001ff8:	897b      	ldrh	r3, [r7, #10]
 8001ffa:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002000:	1c5a      	adds	r2, r3, #1
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200a:	2b02      	cmp	r3, #2
 800200c:	d13b      	bne.n	8002086 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2208      	movs	r2, #8
 800201a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002024:	89ba      	ldrh	r2, [r7, #12]
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	4619      	mov	r1, r3
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	f7ff fc95 	bl	800195a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002030:	e029      	b.n	8002086 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002032:	893b      	ldrh	r3, [r7, #8]
 8002034:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fcc2 	bl	80029c4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002048:	89ba      	ldrh	r2, [r7, #12]
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	4619      	mov	r1, r3
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7ff fc83 	bl	800195a <HAL_I2C_AddrCallback>
}
 8002054:	e017      	b.n	8002086 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002056:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 fcb2 	bl	80029c4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002068:	89ba      	ldrh	r2, [r7, #12]
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	4619      	mov	r1, r3
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	f7ff fc73 	bl	800195a <HAL_I2C_AddrCallback>
}
 8002074:	e007      	b.n	8002086 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	2208      	movs	r2, #8
 800207c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b21      	cmp	r3, #33	; 0x21
 80020a8:	d115      	bne.n	80020d6 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2211      	movs	r2, #17
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80020be:	2101      	movs	r1, #1
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f000 fc7f 	bl	80029c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2200      	movs	r2, #0
 80020ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff fc25 	bl	800191e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80020d4:	e014      	b.n	8002100 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2220      	movs	r2, #32
 80020da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2212      	movs	r2, #18
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80020ea:	2102      	movs	r1, #2
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fc69 	bl	80029c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7ff fc19 	bl	8001932 <HAL_I2C_MasterRxCpltCallback>
}
 8002100:	bf00      	nop
 8002102:	3708      	adds	r7, #8
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	0b9b      	lsrs	r3, r3, #14
 8002124:	f003 0301 	and.w	r3, r3, #1
 8002128:	2b00      	cmp	r3, #0
 800212a:	d008      	beq.n	800213e <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800213a:	601a      	str	r2, [r3, #0]
 800213c:	e00d      	b.n	800215a <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	0bdb      	lsrs	r3, r3, #15
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	d007      	beq.n	800215a <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002158:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b29      	cmp	r3, #41	; 0x29
 8002164:	d112      	bne.n	800218c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2228      	movs	r2, #40	; 0x28
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2221      	movs	r2, #33	; 0x21
 8002172:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002174:	2101      	movs	r1, #1
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fc24 	bl	80029c4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002184:	6878      	ldr	r0, [r7, #4]
 8002186:	f7ff fbde 	bl	8001946 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800218a:	e017      	b.n	80021bc <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b2a      	cmp	r3, #42	; 0x2a
 8002196:	d111      	bne.n	80021bc <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2228      	movs	r2, #40	; 0x28
 800219c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2222      	movs	r2, #34	; 0x22
 80021a4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80021a6:	2102      	movs	r1, #2
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 fc0b 	bl	80029c4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7fe faac 	bl	8000714 <HAL_I2C_SlaveRxCpltCallback>
}
 80021bc:	bf00      	nop
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}

080021c4 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b086      	sub	sp, #24
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2220      	movs	r2, #32
 80021d8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b21      	cmp	r3, #33	; 0x21
 80021e4:	d107      	bne.n	80021f6 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80021e6:	2101      	movs	r1, #1
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f000 fbeb 	bl	80029c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2211      	movs	r2, #17
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
 80021f4:	e00c      	b.n	8002210 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b22      	cmp	r3, #34	; 0x22
 8002200:	d106      	bne.n	8002210 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002202:	2102      	movs	r1, #2
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	f000 fbdd 	bl	80029c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2212      	movs	r2, #18
 800220e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6859      	ldr	r1, [r3, #4]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	4b4d      	ldr	r3, [pc, #308]	; (8002350 <I2C_ITMasterCplt+0x18c>)
 800221c:	400b      	ands	r3, r1
 800221e:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a4a      	ldr	r2, [pc, #296]	; (8002354 <I2C_ITMasterCplt+0x190>)
 800222a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	f003 0301 	and.w	r3, r3, #1
 8002234:	2b00      	cmp	r3, #0
 8002236:	d009      	beq.n	800224c <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2210      	movs	r2, #16
 800223e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002244:	f043 0204 	orr.w	r2, r3, #4
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b60      	cmp	r3, #96	; 0x60
 8002256:	d10b      	bne.n	8002270 <I2C_ITMasterCplt+0xac>
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	089b      	lsrs	r3, r3, #2
 800225c:	f003 0301 	and.w	r3, r3, #1
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	b2db      	uxtb	r3, r3
 800226c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800226e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f000 fac8 	bl	8002806 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b60      	cmp	r3, #96	; 0x60
 8002286:	d002      	beq.n	800228e <I2C_ITMasterCplt+0xca>
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d006      	beq.n	800229c <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	4619      	mov	r1, r3
 8002294:	6878      	ldr	r0, [r7, #4]
 8002296:	f000 f9bf 	bl	8002618 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800229a:	e054      	b.n	8002346 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	2b21      	cmp	r3, #33	; 0x21
 80022a6:	d124      	bne.n	80022f2 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2220      	movs	r2, #32
 80022ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2200      	movs	r2, #0
 80022b4:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	2b40      	cmp	r3, #64	; 0x40
 80022c0:	d10b      	bne.n	80022da <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f7ff fb59 	bl	800198a <HAL_I2C_MemTxCpltCallback>
}
 80022d8:	e035      	b.n	8002346 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff fb17 	bl	800191e <HAL_I2C_MasterTxCpltCallback>
}
 80022f0:	e029      	b.n	8002346 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b22      	cmp	r3, #34	; 0x22
 80022fc:	d123      	bne.n	8002346 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2220      	movs	r2, #32
 8002302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002312:	b2db      	uxtb	r3, r3
 8002314:	2b40      	cmp	r3, #64	; 0x40
 8002316:	d10b      	bne.n	8002330 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7ff fb38 	bl	800199e <HAL_I2C_MemRxCpltCallback>
}
 800232e:	e00a      	b.n	8002346 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff faf6 	bl	8001932 <HAL_I2C_MasterRxCpltCallback>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	fe00e800 	.word	0xfe00e800
 8002354:	ffff0000 	.word	0xffff0000

08002358 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002374:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2220      	movs	r2, #32
 800237c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800237e:	7bfb      	ldrb	r3, [r7, #15]
 8002380:	2b21      	cmp	r3, #33	; 0x21
 8002382:	d002      	beq.n	800238a <I2C_ITSlaveCplt+0x32>
 8002384:	7bfb      	ldrb	r3, [r7, #15]
 8002386:	2b29      	cmp	r3, #41	; 0x29
 8002388:	d108      	bne.n	800239c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800238a:	f248 0101 	movw	r1, #32769	; 0x8001
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 fb18 	bl	80029c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2221      	movs	r2, #33	; 0x21
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
 800239a:	e00d      	b.n	80023b8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	2b22      	cmp	r3, #34	; 0x22
 80023a0:	d002      	beq.n	80023a8 <I2C_ITSlaveCplt+0x50>
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	2b2a      	cmp	r3, #42	; 0x2a
 80023a6:	d107      	bne.n	80023b8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80023a8:	f248 0102 	movw	r1, #32770	; 0x8002
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fb09 	bl	80029c4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2222      	movs	r2, #34	; 0x22
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023c6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6859      	ldr	r1, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	4b64      	ldr	r3, [pc, #400]	; (8002564 <I2C_ITSlaveCplt+0x20c>)
 80023d4:	400b      	ands	r3, r1
 80023d6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f000 fa14 	bl	8002806 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	0b9b      	lsrs	r3, r3, #14
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d013      	beq.n	8002412 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80023f8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d020      	beq.n	8002444 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	b29a      	uxth	r2, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002410:	e018      	b.n	8002444 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	0bdb      	lsrs	r3, r3, #15
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d012      	beq.n	8002444 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800242c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	b29a      	uxth	r2, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	089b      	lsrs	r3, r3, #2
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d020      	beq.n	8002492 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	f023 0304 	bic.w	r3, r3, #4
 8002456:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	1c5a      	adds	r2, r3, #1
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00c      	beq.n	8002492 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a0:	f043 0204 	orr.w	r2, r3, #4
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d010      	beq.n	80024e0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	4619      	mov	r1, r3
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	f000 f8a7 	bl	8002618 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b28      	cmp	r3, #40	; 0x28
 80024d4:	d141      	bne.n	800255a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80024d6:	6979      	ldr	r1, [r7, #20]
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f847 	bl	800256c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80024de:	e03c      	b.n	800255a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024e8:	d014      	beq.n	8002514 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff fe0c 	bl	8002108 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <I2C_ITSlaveCplt+0x210>)
 80024f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2220      	movs	r2, #32
 80024fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff fa32 	bl	8001976 <HAL_I2C_ListenCpltCallback>
}
 8002512:	e022      	b.n	800255a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b22      	cmp	r3, #34	; 0x22
 800251e:	d10e      	bne.n	800253e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2220      	movs	r2, #32
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	f7fe f8ec 	bl	8000714 <HAL_I2C_SlaveRxCpltCallback>
}
 800253c:	e00d      	b.n	800255a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff f9f6 	bl	8001946 <HAL_I2C_SlaveTxCpltCallback>
}
 800255a:	bf00      	nop
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	fe00e800 	.word	0xfe00e800
 8002568:	ffff0000 	.word	0xffff0000

0800256c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a26      	ldr	r2, [pc, #152]	; (8002614 <I2C_ITListenCplt+0xa8>)
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2200      	movs	r2, #0
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	089b      	lsrs	r3, r3, #2
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d022      	beq.n	80025ea <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d012      	beq.n	80025ea <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	3b01      	subs	r3, #1
 80025d8:	b29a      	uxth	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f043 0204 	orr.w	r2, r3, #4
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80025ea:	f248 0103 	movw	r1, #32771	; 0x8003
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 f9e8 	bl	80029c4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2210      	movs	r2, #16
 80025fa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff f9b6 	bl	8001976 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800260a:	bf00      	nop
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	ffff0000 	.word	0xffff0000

08002618 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002628:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a5d      	ldr	r2, [pc, #372]	; (80027ac <I2C_ITError+0x194>)
 8002636:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	431a      	orrs	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	2b28      	cmp	r3, #40	; 0x28
 800264e:	d005      	beq.n	800265c <I2C_ITError+0x44>
 8002650:	7bfb      	ldrb	r3, [r7, #15]
 8002652:	2b29      	cmp	r3, #41	; 0x29
 8002654:	d002      	beq.n	800265c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002656:	7bfb      	ldrb	r3, [r7, #15]
 8002658:	2b2a      	cmp	r3, #42	; 0x2a
 800265a:	d10b      	bne.n	8002674 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800265c:	2103      	movs	r1, #3
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f9b0 	bl	80029c4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2228      	movs	r2, #40	; 0x28
 8002668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a50      	ldr	r2, [pc, #320]	; (80027b0 <I2C_ITError+0x198>)
 8002670:	635a      	str	r2, [r3, #52]	; 0x34
 8002672:	e011      	b.n	8002698 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002674:	f248 0103 	movw	r1, #32771	; 0x8003
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f9a3 	bl	80029c4 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b60      	cmp	r3, #96	; 0x60
 8002688:	d003      	beq.n	8002692 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2220      	movs	r2, #32
 800268e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d039      	beq.n	800271a <I2C_ITError+0x102>
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b11      	cmp	r3, #17
 80026aa:	d002      	beq.n	80026b2 <I2C_ITError+0x9a>
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	2b21      	cmp	r3, #33	; 0x21
 80026b0:	d133      	bne.n	800271a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026c0:	d107      	bne.n	80026d2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80026d0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7fe fe35 	bl	8001346 <HAL_DMA_GetState>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d017      	beq.n	8002712 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e6:	4a33      	ldr	r2, [pc, #204]	; (80027b4 <I2C_ITError+0x19c>)
 80026e8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fe fde4 	bl	80012c4 <HAL_DMA_Abort_IT>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d04d      	beq.n	800279e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800270c:	4610      	mov	r0, r2
 800270e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002710:	e045      	b.n	800279e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f850 	bl	80027b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002718:	e041      	b.n	800279e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271e:	2b00      	cmp	r3, #0
 8002720:	d039      	beq.n	8002796 <I2C_ITError+0x17e>
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b12      	cmp	r3, #18
 8002726:	d002      	beq.n	800272e <I2C_ITError+0x116>
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2b22      	cmp	r3, #34	; 0x22
 800272c:	d133      	bne.n	8002796 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002738:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800273c:	d107      	bne.n	800274e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800274c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	4618      	mov	r0, r3
 8002754:	f7fe fdf7 	bl	8001346 <HAL_DMA_GetState>
 8002758:	4603      	mov	r3, r0
 800275a:	2b01      	cmp	r3, #1
 800275c:	d017      	beq.n	800278e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	4a14      	ldr	r2, [pc, #80]	; (80027b4 <I2C_ITError+0x19c>)
 8002764:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fda6 	bl	80012c4 <HAL_DMA_Abort_IT>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d011      	beq.n	80027a2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002788:	4610      	mov	r0, r2
 800278a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800278c:	e009      	b.n	80027a2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800278e:	6878      	ldr	r0, [r7, #4]
 8002790:	f000 f812 	bl	80027b8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002794:	e005      	b.n	80027a2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f80e 	bl	80027b8 <I2C_TreatErrorCallback>
  }
}
 800279c:	e002      	b.n	80027a4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800279e:	bf00      	nop
 80027a0:	e000      	b.n	80027a4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80027a2:	bf00      	nop
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	ffff0000 	.word	0xffff0000
 80027b0:	080019db 	.word	0x080019db
 80027b4:	0800284f 	.word	0x0800284f

080027b8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b60      	cmp	r3, #96	; 0x60
 80027ca:	d10e      	bne.n	80027ea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2220      	movs	r2, #32
 80027d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2200      	movs	r2, #0
 80027d8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff f8ef 	bl	80019c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80027e8:	e009      	b.n	80027fe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff f8da 	bl	80019b2 <HAL_I2C_ErrorCallback>
}
 80027fe:	bf00      	nop
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002806:	b480      	push	{r7}
 8002808:	b083      	sub	sp, #12
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	699b      	ldr	r3, [r3, #24]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b02      	cmp	r3, #2
 800281a:	d103      	bne.n	8002824 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d007      	beq.n	8002842 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f042 0201 	orr.w	r2, r2, #1
 8002840:	619a      	str	r2, [r3, #24]
  }
}
 8002842:	bf00      	nop
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b084      	sub	sp, #16
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	2200      	movs	r2, #0
 800286a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d003      	beq.n	800287c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002878:	2200      	movs	r2, #0
 800287a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f7ff ff9b 	bl	80027b8 <I2C_TreatErrorCallback>
}
 8002882:	bf00      	nop
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
	...

0800288c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800288c:	b480      	push	{r7}
 800288e:	b087      	sub	sp, #28
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	607b      	str	r3, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	817b      	strh	r3, [r7, #10]
 800289a:	4613      	mov	r3, r2
 800289c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800289e:	897b      	ldrh	r3, [r7, #10]
 80028a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028a4:	7a7b      	ldrb	r3, [r7, #9]
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	0d5b      	lsrs	r3, r3, #21
 80028c6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028ca:	4b08      	ldr	r3, [pc, #32]	; (80028ec <I2C_TransferConfig+0x60>)
 80028cc:	430b      	orrs	r3, r1
 80028ce:	43db      	mvns	r3, r3
 80028d0:	ea02 0103 	and.w	r1, r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	697a      	ldr	r2, [r7, #20]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028de:	bf00      	nop
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e8:	4770      	bx	lr
 80028ea:	bf00      	nop
 80028ec:	03ff63ff 	.word	0x03ff63ff

080028f0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	460b      	mov	r3, r1
 80028fa:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002904:	4a2d      	ldr	r2, [pc, #180]	; (80029bc <I2C_Enable_IRQ+0xcc>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d004      	beq.n	8002914 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 800290e:	4a2c      	ldr	r2, [pc, #176]	; (80029c0 <I2C_Enable_IRQ+0xd0>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d11d      	bne.n	8002950 <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002914:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002918:	2b00      	cmp	r3, #0
 800291a:	da03      	bge.n	8002924 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002922:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002924:	887b      	ldrh	r3, [r7, #2]
 8002926:	2b10      	cmp	r3, #16
 8002928:	d103      	bne.n	8002932 <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002930:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002932:	887b      	ldrh	r3, [r7, #2]
 8002934:	2b20      	cmp	r3, #32
 8002936:	d103      	bne.n	8002940 <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800293e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002940:	887b      	ldrh	r3, [r7, #2]
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d12c      	bne.n	80029a0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800294c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800294e:	e027      	b.n	80029a0 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002950:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002954:	2b00      	cmp	r3, #0
 8002956:	da03      	bge.n	8002960 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800295e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8002960:	887b      	ldrh	r3, [r7, #2]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8002970:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8002972:	887b      	ldrh	r3, [r7, #2]
 8002974:	f003 0302 	and.w	r3, r3, #2
 8002978:	2b00      	cmp	r3, #0
 800297a:	d003      	beq.n	8002984 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8002982:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002984:	887b      	ldrh	r3, [r7, #2]
 8002986:	2b10      	cmp	r3, #16
 8002988:	d103      	bne.n	8002992 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002990:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002992:	887b      	ldrh	r3, [r7, #2]
 8002994:	2b20      	cmp	r3, #32
 8002996:	d103      	bne.n	80029a0 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f043 0320 	orr.w	r3, r3, #32
 800299e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6819      	ldr	r1, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	601a      	str	r2, [r3, #0]
}
 80029b0:	bf00      	nop
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	08001be1 	.word	0x08001be1
 80029c0:	08001dc7 	.word	0x08001dc7

080029c4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	460b      	mov	r3, r1
 80029ce:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80029d4:	887b      	ldrh	r3, [r7, #2]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00f      	beq.n	80029fe <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80029e4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029f2:	2b28      	cmp	r3, #40	; 0x28
 80029f4:	d003      	beq.n	80029fe <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80029fc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80029fe:	887b      	ldrh	r3, [r7, #2]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00f      	beq.n	8002a28 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8002a0e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002a1c:	2b28      	cmp	r3, #40	; 0x28
 8002a1e:	d003      	beq.n	8002a28 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8002a26:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8002a28:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	da03      	bge.n	8002a38 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8002a36:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8002a38:	887b      	ldrh	r3, [r7, #2]
 8002a3a:	2b10      	cmp	r3, #16
 8002a3c:	d103      	bne.n	8002a46 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8002a44:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8002a46:	887b      	ldrh	r3, [r7, #2]
 8002a48:	2b20      	cmp	r3, #32
 8002a4a:	d103      	bne.n	8002a54 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f043 0320 	orr.w	r3, r3, #32
 8002a52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	2b40      	cmp	r3, #64	; 0x40
 8002a58:	d103      	bne.n	8002a62 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a60:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6819      	ldr	r1, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	400a      	ands	r2, r1
 8002a72:	601a      	str	r2, [r3, #0]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d138      	bne.n	8002b08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d101      	bne.n	8002aa4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002aa0:	2302      	movs	r3, #2
 8002aa2:	e032      	b.n	8002b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2224      	movs	r2, #36	; 0x24
 8002ab0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f022 0201 	bic.w	r2, r2, #1
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ad2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6819      	ldr	r1, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	683a      	ldr	r2, [r7, #0]
 8002ae0:	430a      	orrs	r2, r1
 8002ae2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f042 0201 	orr.w	r2, r2, #1
 8002af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	e000      	b.n	8002b0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002b08:	2302      	movs	r3, #2
  }
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002b16:	b480      	push	{r7}
 8002b18:	b085      	sub	sp, #20
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
 8002b1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d139      	bne.n	8002ba0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b32:	2b01      	cmp	r3, #1
 8002b34:	d101      	bne.n	8002b3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002b36:	2302      	movs	r3, #2
 8002b38:	e033      	b.n	8002ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2224      	movs	r2, #36	; 0x24
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0201 	bic.w	r2, r2, #1
 8002b58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002b68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	021b      	lsls	r3, r3, #8
 8002b6e:	68fa      	ldr	r2, [r7, #12]
 8002b70:	4313      	orrs	r3, r2
 8002b72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2220      	movs	r2, #32
 8002b90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	e000      	b.n	8002ba2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002ba0:	2302      	movs	r3, #2
  }
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
	...

08002bb0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a04      	ldr	r2, [pc, #16]	; (8002bcc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbe:	6013      	str	r3, [r2, #0]
}
 8002bc0:	bf00      	nop
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr
 8002bca:	bf00      	nop
 8002bcc:	40007000 	.word	0x40007000

08002bd0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002bd4:	4b04      	ldr	r3, [pc, #16]	; (8002be8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40007000 	.word	0x40007000

08002bec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bfa:	d130      	bne.n	8002c5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bfc:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c08:	d038      	beq.n	8002c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c0a:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c12:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	; (8002c90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2232      	movs	r2, #50	; 0x32
 8002c20:	fb02 f303 	mul.w	r3, r2, r3
 8002c24:	4a1b      	ldr	r2, [pc, #108]	; (8002c94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0c9b      	lsrs	r3, r3, #18
 8002c2c:	3301      	adds	r3, #1
 8002c2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c30:	e002      	b.n	8002c38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	3b01      	subs	r3, #1
 8002c36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002c38:	4b14      	ldr	r3, [pc, #80]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c44:	d102      	bne.n	8002c4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1f2      	bne.n	8002c32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c58:	d110      	bne.n	8002c7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e00f      	b.n	8002c7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c5e:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c6a:	d007      	beq.n	8002c7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002c6c:	4b07      	ldr	r3, [pc, #28]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002c74:	4a05      	ldr	r2, [pc, #20]	; (8002c8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002c76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40007000 	.word	0x40007000
 8002c90:	20000004 	.word	0x20000004
 8002c94:	431bde83 	.word	0x431bde83

08002c98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d102      	bne.n	8002cac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	f000 bc02 	b.w	80034b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002cac:	4b96      	ldr	r3, [pc, #600]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002cb6:	4b94      	ldr	r3, [pc, #592]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	f003 0303 	and.w	r3, r3, #3
 8002cbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0310 	and.w	r3, r3, #16
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80e4 	beq.w	8002e96 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002cce:	69bb      	ldr	r3, [r7, #24]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d007      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x4c>
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	f040 808b 	bne.w	8002df2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	f040 8087 	bne.w	8002df2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002ce4:	4b88      	ldr	r3, [pc, #544]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d005      	beq.n	8002cfc <HAL_RCC_OscConfig+0x64>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e3d9      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1a      	ldr	r2, [r3, #32]
 8002d00:	4b81      	ldr	r3, [pc, #516]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <HAL_RCC_OscConfig+0x7e>
 8002d0c:	4b7e      	ldr	r3, [pc, #504]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d14:	e005      	b.n	8002d22 <HAL_RCC_OscConfig+0x8a>
 8002d16:	4b7c      	ldr	r3, [pc, #496]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d1c:	091b      	lsrs	r3, r3, #4
 8002d1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d223      	bcs.n	8002d6e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fdbe 	bl	80038ac <RCC_SetFlashLatencyFromMSIRange>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d001      	beq.n	8002d3a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e3ba      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d3a:	4b73      	ldr	r3, [pc, #460]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a72      	ldr	r2, [pc, #456]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d40:	f043 0308 	orr.w	r3, r3, #8
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	4b70      	ldr	r3, [pc, #448]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	496d      	ldr	r1, [pc, #436]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d54:	4313      	orrs	r3, r2
 8002d56:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d58:	4b6b      	ldr	r3, [pc, #428]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	021b      	lsls	r3, r3, #8
 8002d66:	4968      	ldr	r1, [pc, #416]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	604b      	str	r3, [r1, #4]
 8002d6c:	e025      	b.n	8002dba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d6e:	4b66      	ldr	r3, [pc, #408]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a65      	ldr	r2, [pc, #404]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d74:	f043 0308 	orr.w	r3, r3, #8
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b63      	ldr	r3, [pc, #396]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4960      	ldr	r1, [pc, #384]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d8c:	4b5e      	ldr	r3, [pc, #376]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	495b      	ldr	r1, [pc, #364]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002da0:	69bb      	ldr	r3, [r7, #24]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d109      	bne.n	8002dba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fd7e 	bl	80038ac <RCC_SetFlashLatencyFromMSIRange>
 8002db0:	4603      	mov	r3, r0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e37a      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002dba:	f000 fc81 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	4b51      	ldr	r3, [pc, #324]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	4950      	ldr	r1, [pc, #320]	; (8002f0c <HAL_RCC_OscConfig+0x274>)
 8002dcc:	5ccb      	ldrb	r3, [r1, r3]
 8002dce:	f003 031f 	and.w	r3, r3, #31
 8002dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002dd6:	4a4e      	ldr	r2, [pc, #312]	; (8002f10 <HAL_RCC_OscConfig+0x278>)
 8002dd8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002dda:	4b4e      	ldr	r3, [pc, #312]	; (8002f14 <HAL_RCC_OscConfig+0x27c>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7fd ff6e 	bl	8000cc0 <HAL_InitTick>
 8002de4:	4603      	mov	r3, r0
 8002de6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d052      	beq.n	8002e94 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	e35e      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	699b      	ldr	r3, [r3, #24]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d032      	beq.n	8002e60 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002dfa:	4b43      	ldr	r3, [pc, #268]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4a42      	ldr	r2, [pc, #264]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e06:	f7fe f96f 	bl	80010e8 <HAL_GetTick>
 8002e0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e0c:	e008      	b.n	8002e20 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e0e:	f7fe f96b 	bl	80010e8 <HAL_GetTick>
 8002e12:	4602      	mov	r2, r0
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d901      	bls.n	8002e20 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e347      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e20:	4b39      	ldr	r3, [pc, #228]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0302 	and.w	r3, r3, #2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d0f0      	beq.n	8002e0e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002e2c:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a35      	ldr	r2, [pc, #212]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e32:	f043 0308 	orr.w	r3, r3, #8
 8002e36:	6013      	str	r3, [r2, #0]
 8002e38:	4b33      	ldr	r3, [pc, #204]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4930      	ldr	r1, [pc, #192]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e46:	4313      	orrs	r3, r2
 8002e48:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002e4a:	4b2f      	ldr	r3, [pc, #188]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
 8002e56:	021b      	lsls	r3, r3, #8
 8002e58:	492b      	ldr	r1, [pc, #172]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	604b      	str	r3, [r1, #4]
 8002e5e:	e01a      	b.n	8002e96 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002e60:	4b29      	ldr	r3, [pc, #164]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a28      	ldr	r2, [pc, #160]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e66:	f023 0301 	bic.w	r3, r3, #1
 8002e6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002e6c:	f7fe f93c 	bl	80010e8 <HAL_GetTick>
 8002e70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e72:	e008      	b.n	8002e86 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002e74:	f7fe f938 	bl	80010e8 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d901      	bls.n	8002e86 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e314      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002e86:	4b20      	ldr	r3, [pc, #128]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f0      	bne.n	8002e74 <HAL_RCC_OscConfig+0x1dc>
 8002e92:	e000      	b.n	8002e96 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002e94:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d073      	beq.n	8002f8a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d005      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x21c>
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b0c      	cmp	r3, #12
 8002eac:	d10e      	bne.n	8002ecc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d10b      	bne.n	8002ecc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb4:	4b14      	ldr	r3, [pc, #80]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d063      	beq.n	8002f88 <HAL_RCC_OscConfig+0x2f0>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d15f      	bne.n	8002f88 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e2f1      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x24c>
 8002ed6:	4b0c      	ldr	r3, [pc, #48]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a0b      	ldr	r2, [pc, #44]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	e025      	b.n	8002f30 <HAL_RCC_OscConfig+0x298>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eec:	d114      	bne.n	8002f18 <HAL_RCC_OscConfig+0x280>
 8002eee:	4b06      	ldr	r3, [pc, #24]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a05      	ldr	r2, [pc, #20]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002ef4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a02      	ldr	r2, [pc, #8]	; (8002f08 <HAL_RCC_OscConfig+0x270>)
 8002f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e013      	b.n	8002f30 <HAL_RCC_OscConfig+0x298>
 8002f08:	40021000 	.word	0x40021000
 8002f0c:	0800933c 	.word	0x0800933c
 8002f10:	20000004 	.word	0x20000004
 8002f14:	20000008 	.word	0x20000008
 8002f18:	4ba0      	ldr	r3, [pc, #640]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a9f      	ldr	r2, [pc, #636]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8002f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	4b9d      	ldr	r3, [pc, #628]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a9c      	ldr	r2, [pc, #624]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8002f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f38:	f7fe f8d6 	bl	80010e8 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f40:	f7fe f8d2 	bl	80010e8 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b64      	cmp	r3, #100	; 0x64
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e2ae      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f52:	4b92      	ldr	r3, [pc, #584]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x2a8>
 8002f5e:	e014      	b.n	8002f8a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe f8c2 	bl	80010e8 <HAL_GetTick>
 8002f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f66:	e008      	b.n	8002f7a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f68:	f7fe f8be 	bl	80010e8 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	2b64      	cmp	r3, #100	; 0x64
 8002f74:	d901      	bls.n	8002f7a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002f76:	2303      	movs	r3, #3
 8002f78:	e29a      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f7a:	4b88      	ldr	r3, [pc, #544]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d1f0      	bne.n	8002f68 <HAL_RCC_OscConfig+0x2d0>
 8002f86:	e000      	b.n	8002f8a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d060      	beq.n	8003058 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	2b04      	cmp	r3, #4
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x310>
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	2b0c      	cmp	r3, #12
 8002fa0:	d119      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d116      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fa8:	4b7c      	ldr	r3, [pc, #496]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d005      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x328>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e277      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b76      	ldr	r3, [pc, #472]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	061b      	lsls	r3, r3, #24
 8002fce:	4973      	ldr	r1, [pc, #460]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd4:	e040      	b.n	8003058 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d023      	beq.n	8003026 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fde:	4b6f      	ldr	r3, [pc, #444]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a6e      	ldr	r2, [pc, #440]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8002fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fea:	f7fe f87d 	bl	80010e8 <HAL_GetTick>
 8002fee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff0:	e008      	b.n	8003004 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ff2:	f7fe f879 	bl	80010e8 <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d901      	bls.n	8003004 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e255      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003004:	4b65      	ldr	r3, [pc, #404]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800300c:	2b00      	cmp	r3, #0
 800300e:	d0f0      	beq.n	8002ff2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003010:	4b62      	ldr	r3, [pc, #392]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	061b      	lsls	r3, r3, #24
 800301e:	495f      	ldr	r1, [pc, #380]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
 8003024:	e018      	b.n	8003058 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003026:	4b5d      	ldr	r3, [pc, #372]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a5c      	ldr	r2, [pc, #368]	; (800319c <HAL_RCC_OscConfig+0x504>)
 800302c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003030:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003032:	f7fe f859 	bl	80010e8 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800303a:	f7fe f855 	bl	80010e8 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e231      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800304c:	4b53      	ldr	r3, [pc, #332]	; (800319c <HAL_RCC_OscConfig+0x504>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1f0      	bne.n	800303a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0308 	and.w	r3, r3, #8
 8003060:	2b00      	cmp	r3, #0
 8003062:	d03c      	beq.n	80030de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	695b      	ldr	r3, [r3, #20]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01c      	beq.n	80030a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306c:	4b4b      	ldr	r3, [pc, #300]	; (800319c <HAL_RCC_OscConfig+0x504>)
 800306e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003072:	4a4a      	ldr	r2, [pc, #296]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8003074:	f043 0301 	orr.w	r3, r3, #1
 8003078:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe f834 	bl	80010e8 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003084:	f7fe f830 	bl	80010e8 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e20c      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003096:	4b41      	ldr	r3, [pc, #260]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8003098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0ef      	beq.n	8003084 <HAL_RCC_OscConfig+0x3ec>
 80030a4:	e01b      	b.n	80030de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030a6:	4b3d      	ldr	r3, [pc, #244]	; (800319c <HAL_RCC_OscConfig+0x504>)
 80030a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030ac:	4a3b      	ldr	r2, [pc, #236]	; (800319c <HAL_RCC_OscConfig+0x504>)
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b6:	f7fe f817 	bl	80010e8 <HAL_GetTick>
 80030ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030bc:	e008      	b.n	80030d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030be:	f7fe f813 	bl	80010e8 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d901      	bls.n	80030d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e1ef      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80030d0:	4b32      	ldr	r3, [pc, #200]	; (800319c <HAL_RCC_OscConfig+0x504>)
 80030d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ef      	bne.n	80030be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0304 	and.w	r3, r3, #4
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	f000 80a6 	beq.w	8003238 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ec:	2300      	movs	r3, #0
 80030ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80030f0:	4b2a      	ldr	r3, [pc, #168]	; (800319c <HAL_RCC_OscConfig+0x504>)
 80030f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10d      	bne.n	8003118 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030fc:	4b27      	ldr	r3, [pc, #156]	; (800319c <HAL_RCC_OscConfig+0x504>)
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	4a26      	ldr	r2, [pc, #152]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8003102:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003106:	6593      	str	r3, [r2, #88]	; 0x58
 8003108:	4b24      	ldr	r3, [pc, #144]	; (800319c <HAL_RCC_OscConfig+0x504>)
 800310a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	60bb      	str	r3, [r7, #8]
 8003112:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003114:	2301      	movs	r3, #1
 8003116:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003118:	4b21      	ldr	r3, [pc, #132]	; (80031a0 <HAL_RCC_OscConfig+0x508>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d118      	bne.n	8003156 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003124:	4b1e      	ldr	r3, [pc, #120]	; (80031a0 <HAL_RCC_OscConfig+0x508>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a1d      	ldr	r2, [pc, #116]	; (80031a0 <HAL_RCC_OscConfig+0x508>)
 800312a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003130:	f7fd ffda 	bl	80010e8 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003138:	f7fd ffd6 	bl	80010e8 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1b2      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800314a:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <HAL_RCC_OscConfig+0x508>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d0f0      	beq.n	8003138 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d108      	bne.n	8003170 <HAL_RCC_OscConfig+0x4d8>
 800315e:	4b0f      	ldr	r3, [pc, #60]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8003160:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003164:	4a0d      	ldr	r2, [pc, #52]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8003166:	f043 0301 	orr.w	r3, r3, #1
 800316a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800316e:	e029      	b.n	80031c4 <HAL_RCC_OscConfig+0x52c>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	2b05      	cmp	r3, #5
 8003176:	d115      	bne.n	80031a4 <HAL_RCC_OscConfig+0x50c>
 8003178:	4b08      	ldr	r3, [pc, #32]	; (800319c <HAL_RCC_OscConfig+0x504>)
 800317a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800317e:	4a07      	ldr	r2, [pc, #28]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8003180:	f043 0304 	orr.w	r3, r3, #4
 8003184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003188:	4b04      	ldr	r3, [pc, #16]	; (800319c <HAL_RCC_OscConfig+0x504>)
 800318a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800318e:	4a03      	ldr	r2, [pc, #12]	; (800319c <HAL_RCC_OscConfig+0x504>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003198:	e014      	b.n	80031c4 <HAL_RCC_OscConfig+0x52c>
 800319a:	bf00      	nop
 800319c:	40021000 	.word	0x40021000
 80031a0:	40007000 	.word	0x40007000
 80031a4:	4b9a      	ldr	r3, [pc, #616]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 80031a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031aa:	4a99      	ldr	r2, [pc, #612]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 80031ac:	f023 0301 	bic.w	r3, r3, #1
 80031b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80031b4:	4b96      	ldr	r3, [pc, #600]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ba:	4a95      	ldr	r2, [pc, #596]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 80031bc:	f023 0304 	bic.w	r3, r3, #4
 80031c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d016      	beq.n	80031fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fd ff8c 	bl	80010e8 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031d2:	e00a      	b.n	80031ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031d4:	f7fd ff88 	bl	80010e8 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	f241 3288 	movw	r2, #5000	; 0x1388
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d901      	bls.n	80031ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e162      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031ea:	4b89      	ldr	r3, [pc, #548]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 80031ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d0ed      	beq.n	80031d4 <HAL_RCC_OscConfig+0x53c>
 80031f8:	e015      	b.n	8003226 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fa:	f7fd ff75 	bl	80010e8 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003202:	f7fd ff71 	bl	80010e8 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003210:	4293      	cmp	r3, r2
 8003212:	d901      	bls.n	8003218 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003214:	2303      	movs	r3, #3
 8003216:	e14b      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003218:	4b7d      	ldr	r3, [pc, #500]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 800321a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1ed      	bne.n	8003202 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003226:	7ffb      	ldrb	r3, [r7, #31]
 8003228:	2b01      	cmp	r3, #1
 800322a:	d105      	bne.n	8003238 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800322c:	4b78      	ldr	r3, [pc, #480]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 800322e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003230:	4a77      	ldr	r2, [pc, #476]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 8003232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003236:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d03c      	beq.n	80032be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	2b00      	cmp	r3, #0
 800324a:	d01c      	beq.n	8003286 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800324c:	4b70      	ldr	r3, [pc, #448]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 800324e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003252:	4a6f      	ldr	r2, [pc, #444]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 8003254:	f043 0301 	orr.w	r3, r3, #1
 8003258:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800325c:	f7fd ff44 	bl	80010e8 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003264:	f7fd ff40 	bl	80010e8 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e11c      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003276:	4b66      	ldr	r3, [pc, #408]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 8003278:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d0ef      	beq.n	8003264 <HAL_RCC_OscConfig+0x5cc>
 8003284:	e01b      	b.n	80032be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003286:	4b62      	ldr	r3, [pc, #392]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 8003288:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800328c:	4a60      	ldr	r2, [pc, #384]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 800328e:	f023 0301 	bic.w	r3, r3, #1
 8003292:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003296:	f7fd ff27 	bl	80010e8 <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800329c:	e008      	b.n	80032b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800329e:	f7fd ff23 	bl	80010e8 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d901      	bls.n	80032b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	e0ff      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80032b0:	4b57      	ldr	r3, [pc, #348]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 80032b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d1ef      	bne.n	800329e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80f3 	beq.w	80034ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	f040 80c9 	bne.w	8003464 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80032d2:	4b4f      	ldr	r3, [pc, #316]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	f003 0203 	and.w	r2, r3, #3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d12c      	bne.n	8003340 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	3b01      	subs	r3, #1
 80032f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d123      	bne.n	8003340 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003302:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003304:	429a      	cmp	r2, r3
 8003306:	d11b      	bne.n	8003340 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003312:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003314:	429a      	cmp	r2, r3
 8003316:	d113      	bne.n	8003340 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003322:	085b      	lsrs	r3, r3, #1
 8003324:	3b01      	subs	r3, #1
 8003326:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003328:	429a      	cmp	r2, r3
 800332a:	d109      	bne.n	8003340 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	085b      	lsrs	r3, r3, #1
 8003338:	3b01      	subs	r3, #1
 800333a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d06b      	beq.n	8003418 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003340:	69bb      	ldr	r3, [r7, #24]
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d062      	beq.n	800340c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003346:	4b32      	ldr	r3, [pc, #200]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e0ac      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003356:	4b2e      	ldr	r3, [pc, #184]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a2d      	ldr	r2, [pc, #180]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 800335c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003360:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003362:	f7fd fec1 	bl	80010e8 <HAL_GetTick>
 8003366:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003368:	e008      	b.n	800337c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800336a:	f7fd febd 	bl	80010e8 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	2b02      	cmp	r3, #2
 8003376:	d901      	bls.n	800337c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003378:	2303      	movs	r3, #3
 800337a:	e099      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800337c:	4b24      	ldr	r3, [pc, #144]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1f0      	bne.n	800336a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003388:	4b21      	ldr	r3, [pc, #132]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	4b21      	ldr	r3, [pc, #132]	; (8003414 <HAL_RCC_OscConfig+0x77c>)
 800338e:	4013      	ands	r3, r2
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003398:	3a01      	subs	r2, #1
 800339a:	0112      	lsls	r2, r2, #4
 800339c:	4311      	orrs	r1, r2
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033a2:	0212      	lsls	r2, r2, #8
 80033a4:	4311      	orrs	r1, r2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80033aa:	0852      	lsrs	r2, r2, #1
 80033ac:	3a01      	subs	r2, #1
 80033ae:	0552      	lsls	r2, r2, #21
 80033b0:	4311      	orrs	r1, r2
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80033b6:	0852      	lsrs	r2, r2, #1
 80033b8:	3a01      	subs	r2, #1
 80033ba:	0652      	lsls	r2, r2, #25
 80033bc:	4311      	orrs	r1, r2
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80033c2:	06d2      	lsls	r2, r2, #27
 80033c4:	430a      	orrs	r2, r1
 80033c6:	4912      	ldr	r1, [pc, #72]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 80033c8:	4313      	orrs	r3, r2
 80033ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80033cc:	4b10      	ldr	r3, [pc, #64]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 80033d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80033d8:	4b0d      	ldr	r3, [pc, #52]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	4a0c      	ldr	r2, [pc, #48]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 80033de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80033e4:	f7fd fe80 	bl	80010e8 <HAL_GetTick>
 80033e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033ea:	e008      	b.n	80033fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033ec:	f7fd fe7c 	bl	80010e8 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	2b02      	cmp	r3, #2
 80033f8:	d901      	bls.n	80033fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e058      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80033fe:	4b04      	ldr	r3, [pc, #16]	; (8003410 <HAL_RCC_OscConfig+0x778>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0f0      	beq.n	80033ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800340a:	e050      	b.n	80034ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e04f      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
 8003410:	40021000 	.word	0x40021000
 8003414:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003418:	4b27      	ldr	r3, [pc, #156]	; (80034b8 <HAL_RCC_OscConfig+0x820>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d144      	bne.n	80034ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003424:	4b24      	ldr	r3, [pc, #144]	; (80034b8 <HAL_RCC_OscConfig+0x820>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a23      	ldr	r2, [pc, #140]	; (80034b8 <HAL_RCC_OscConfig+0x820>)
 800342a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003430:	4b21      	ldr	r3, [pc, #132]	; (80034b8 <HAL_RCC_OscConfig+0x820>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	4a20      	ldr	r2, [pc, #128]	; (80034b8 <HAL_RCC_OscConfig+0x820>)
 8003436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800343a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800343c:	f7fd fe54 	bl	80010e8 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003444:	f7fd fe50 	bl	80010e8 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e02c      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003456:	4b18      	ldr	r3, [pc, #96]	; (80034b8 <HAL_RCC_OscConfig+0x820>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x7ac>
 8003462:	e024      	b.n	80034ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003464:	69bb      	ldr	r3, [r7, #24]
 8003466:	2b0c      	cmp	r3, #12
 8003468:	d01f      	beq.n	80034aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346a:	4b13      	ldr	r3, [pc, #76]	; (80034b8 <HAL_RCC_OscConfig+0x820>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a12      	ldr	r2, [pc, #72]	; (80034b8 <HAL_RCC_OscConfig+0x820>)
 8003470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003476:	f7fd fe37 	bl	80010e8 <HAL_GetTick>
 800347a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800347c:	e008      	b.n	8003490 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800347e:	f7fd fe33 	bl	80010e8 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d901      	bls.n	8003490 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e00f      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003490:	4b09      	ldr	r3, [pc, #36]	; (80034b8 <HAL_RCC_OscConfig+0x820>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1f0      	bne.n	800347e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800349c:	4b06      	ldr	r3, [pc, #24]	; (80034b8 <HAL_RCC_OscConfig+0x820>)
 800349e:	68da      	ldr	r2, [r3, #12]
 80034a0:	4905      	ldr	r1, [pc, #20]	; (80034b8 <HAL_RCC_OscConfig+0x820>)
 80034a2:	4b06      	ldr	r3, [pc, #24]	; (80034bc <HAL_RCC_OscConfig+0x824>)
 80034a4:	4013      	ands	r3, r2
 80034a6:	60cb      	str	r3, [r1, #12]
 80034a8:	e001      	b.n	80034ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3720      	adds	r7, #32
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40021000 	.word	0x40021000
 80034bc:	feeefffc 	.word	0xfeeefffc

080034c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0e7      	b.n	80036a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034d4:	4b75      	ldr	r3, [pc, #468]	; (80036ac <HAL_RCC_ClockConfig+0x1ec>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	683a      	ldr	r2, [r7, #0]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d910      	bls.n	8003504 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034e2:	4b72      	ldr	r3, [pc, #456]	; (80036ac <HAL_RCC_ClockConfig+0x1ec>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 0207 	bic.w	r2, r3, #7
 80034ea:	4970      	ldr	r1, [pc, #448]	; (80036ac <HAL_RCC_ClockConfig+0x1ec>)
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	4313      	orrs	r3, r2
 80034f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034f2:	4b6e      	ldr	r3, [pc, #440]	; (80036ac <HAL_RCC_ClockConfig+0x1ec>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	683a      	ldr	r2, [r7, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d001      	beq.n	8003504 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	e0cf      	b.n	80036a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0302 	and.w	r3, r3, #2
 800350c:	2b00      	cmp	r3, #0
 800350e:	d010      	beq.n	8003532 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	4b66      	ldr	r3, [pc, #408]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003516:	689b      	ldr	r3, [r3, #8]
 8003518:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800351c:	429a      	cmp	r2, r3
 800351e:	d908      	bls.n	8003532 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003520:	4b63      	ldr	r3, [pc, #396]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	4960      	ldr	r1, [pc, #384]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 800352e:	4313      	orrs	r3, r2
 8003530:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b00      	cmp	r3, #0
 800353c:	d04c      	beq.n	80035d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	2b03      	cmp	r3, #3
 8003544:	d107      	bne.n	8003556 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003546:	4b5a      	ldr	r3, [pc, #360]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d121      	bne.n	8003596 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e0a6      	b.n	80036a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	685b      	ldr	r3, [r3, #4]
 800355a:	2b02      	cmp	r3, #2
 800355c:	d107      	bne.n	800356e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800355e:	4b54      	ldr	r3, [pc, #336]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d115      	bne.n	8003596 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e09a      	b.n	80036a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003576:	4b4e      	ldr	r3, [pc, #312]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d109      	bne.n	8003596 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e08e      	b.n	80036a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003586:	4b4a      	ldr	r3, [pc, #296]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800358e:	2b00      	cmp	r3, #0
 8003590:	d101      	bne.n	8003596 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e086      	b.n	80036a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003596:	4b46      	ldr	r3, [pc, #280]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f023 0203 	bic.w	r2, r3, #3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	4943      	ldr	r1, [pc, #268]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a8:	f7fd fd9e 	bl	80010e8 <HAL_GetTick>
 80035ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ae:	e00a      	b.n	80035c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b0:	f7fd fd9a 	bl	80010e8 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80035be:	4293      	cmp	r3, r2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e06e      	b.n	80036a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	4b3a      	ldr	r3, [pc, #232]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 020c 	and.w	r2, r3, #12
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d1eb      	bne.n	80035b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0302 	and.w	r3, r3, #2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d010      	beq.n	8003606 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	689a      	ldr	r2, [r3, #8]
 80035e8:	4b31      	ldr	r3, [pc, #196]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035f0:	429a      	cmp	r2, r3
 80035f2:	d208      	bcs.n	8003606 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035f4:	4b2e      	ldr	r3, [pc, #184]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	492b      	ldr	r1, [pc, #172]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003602:	4313      	orrs	r3, r2
 8003604:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003606:	4b29      	ldr	r3, [pc, #164]	; (80036ac <HAL_RCC_ClockConfig+0x1ec>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d210      	bcs.n	8003636 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003614:	4b25      	ldr	r3, [pc, #148]	; (80036ac <HAL_RCC_ClockConfig+0x1ec>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f023 0207 	bic.w	r2, r3, #7
 800361c:	4923      	ldr	r1, [pc, #140]	; (80036ac <HAL_RCC_ClockConfig+0x1ec>)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	4313      	orrs	r3, r2
 8003622:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003624:	4b21      	ldr	r3, [pc, #132]	; (80036ac <HAL_RCC_ClockConfig+0x1ec>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d001      	beq.n	8003636 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e036      	b.n	80036a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0304 	and.w	r3, r3, #4
 800363e:	2b00      	cmp	r3, #0
 8003640:	d008      	beq.n	8003654 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003642:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	4918      	ldr	r1, [pc, #96]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003650:	4313      	orrs	r3, r2
 8003652:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0308 	and.w	r3, r3, #8
 800365c:	2b00      	cmp	r3, #0
 800365e:	d009      	beq.n	8003674 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003660:	4b13      	ldr	r3, [pc, #76]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	00db      	lsls	r3, r3, #3
 800366e:	4910      	ldr	r1, [pc, #64]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 8003670:	4313      	orrs	r3, r2
 8003672:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003674:	f000 f824 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 8003678:	4602      	mov	r2, r0
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <HAL_RCC_ClockConfig+0x1f0>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	091b      	lsrs	r3, r3, #4
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	490b      	ldr	r1, [pc, #44]	; (80036b4 <HAL_RCC_ClockConfig+0x1f4>)
 8003686:	5ccb      	ldrb	r3, [r1, r3]
 8003688:	f003 031f 	and.w	r3, r3, #31
 800368c:	fa22 f303 	lsr.w	r3, r2, r3
 8003690:	4a09      	ldr	r2, [pc, #36]	; (80036b8 <HAL_RCC_ClockConfig+0x1f8>)
 8003692:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003694:	4b09      	ldr	r3, [pc, #36]	; (80036bc <HAL_RCC_ClockConfig+0x1fc>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4618      	mov	r0, r3
 800369a:	f7fd fb11 	bl	8000cc0 <HAL_InitTick>
 800369e:	4603      	mov	r3, r0
 80036a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80036a2:	7afb      	ldrb	r3, [r7, #11]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40022000 	.word	0x40022000
 80036b0:	40021000 	.word	0x40021000
 80036b4:	0800933c 	.word	0x0800933c
 80036b8:	20000004 	.word	0x20000004
 80036bc:	20000008 	.word	0x20000008

080036c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	; 0x24
 80036c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]
 80036ca:	2300      	movs	r3, #0
 80036cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036ce:	4b3e      	ldr	r3, [pc, #248]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f003 030c 	and.w	r3, r3, #12
 80036d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036d8:	4b3b      	ldr	r3, [pc, #236]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0303 	and.w	r3, r3, #3
 80036e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d005      	beq.n	80036f4 <HAL_RCC_GetSysClockFreq+0x34>
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	2b0c      	cmp	r3, #12
 80036ec:	d121      	bne.n	8003732 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d11e      	bne.n	8003732 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036f4:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003700:	4b31      	ldr	r3, [pc, #196]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003702:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003706:	0a1b      	lsrs	r3, r3, #8
 8003708:	f003 030f 	and.w	r3, r3, #15
 800370c:	61fb      	str	r3, [r7, #28]
 800370e:	e005      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003710:	4b2d      	ldr	r3, [pc, #180]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	091b      	lsrs	r3, r3, #4
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800371c:	4a2b      	ldr	r2, [pc, #172]	; (80037cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003724:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d10d      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	2b04      	cmp	r3, #4
 8003736:	d102      	bne.n	800373e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003738:	4b25      	ldr	r3, [pc, #148]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	e004      	b.n	8003748 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b08      	cmp	r3, #8
 8003742:	d101      	bne.n	8003748 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003744:	4b23      	ldr	r3, [pc, #140]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003746:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	2b0c      	cmp	r3, #12
 800374c:	d134      	bne.n	80037b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800374e:	4b1e      	ldr	r3, [pc, #120]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d003      	beq.n	8003766 <HAL_RCC_GetSysClockFreq+0xa6>
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	2b03      	cmp	r3, #3
 8003762:	d003      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0xac>
 8003764:	e005      	b.n	8003772 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003766:	4b1a      	ldr	r3, [pc, #104]	; (80037d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003768:	617b      	str	r3, [r7, #20]
      break;
 800376a:	e005      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800376c:	4b19      	ldr	r3, [pc, #100]	; (80037d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800376e:	617b      	str	r3, [r7, #20]
      break;
 8003770:	e002      	b.n	8003778 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	617b      	str	r3, [r7, #20]
      break;
 8003776:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	091b      	lsrs	r3, r3, #4
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	3301      	adds	r3, #1
 8003784:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003786:	4b10      	ldr	r3, [pc, #64]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	0a1b      	lsrs	r3, r3, #8
 800378c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	fb03 f202 	mul.w	r2, r3, r2
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	fbb2 f3f3 	udiv	r3, r2, r3
 800379c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	0e5b      	lsrs	r3, r3, #25
 80037a4:	f003 0303 	and.w	r3, r3, #3
 80037a8:	3301      	adds	r3, #1
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80037b8:	69bb      	ldr	r3, [r7, #24]
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	3724      	adds	r7, #36	; 0x24
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40021000 	.word	0x40021000
 80037cc:	08009354 	.word	0x08009354
 80037d0:	00f42400 	.word	0x00f42400
 80037d4:	007a1200 	.word	0x007a1200

080037d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037dc:	4b03      	ldr	r3, [pc, #12]	; (80037ec <HAL_RCC_GetHCLKFreq+0x14>)
 80037de:	681b      	ldr	r3, [r3, #0]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	20000004 	.word	0x20000004

080037f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80037f4:	f7ff fff0 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 80037f8:	4602      	mov	r2, r0
 80037fa:	4b06      	ldr	r3, [pc, #24]	; (8003814 <HAL_RCC_GetPCLK1Freq+0x24>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	0a1b      	lsrs	r3, r3, #8
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	4904      	ldr	r1, [pc, #16]	; (8003818 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003806:	5ccb      	ldrb	r3, [r1, r3]
 8003808:	f003 031f 	and.w	r3, r3, #31
 800380c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003810:	4618      	mov	r0, r3
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40021000 	.word	0x40021000
 8003818:	0800934c 	.word	0x0800934c

0800381c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003820:	f7ff ffda 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 8003824:	4602      	mov	r2, r0
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	0adb      	lsrs	r3, r3, #11
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	4904      	ldr	r1, [pc, #16]	; (8003844 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003832:	5ccb      	ldrb	r3, [r1, r3]
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000
 8003844:	0800934c 	.word	0x0800934c

08003848 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	220f      	movs	r2, #15
 8003856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003858:	4b12      	ldr	r3, [pc, #72]	; (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0203 	and.w	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003864:	4b0f      	ldr	r3, [pc, #60]	; (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003870:	4b0c      	ldr	r3, [pc, #48]	; (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800387c:	4b09      	ldr	r3, [pc, #36]	; (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800388a:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <HAL_RCC_GetClockConfig+0x60>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0207 	and.w	r2, r3, #7
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40021000 	.word	0x40021000
 80038a8:	40022000 	.word	0x40022000

080038ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80038b4:	2300      	movs	r3, #0
 80038b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80038b8:	4b2a      	ldr	r3, [pc, #168]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80038c4:	f7ff f984 	bl	8002bd0 <HAL_PWREx_GetVoltageRange>
 80038c8:	6178      	str	r0, [r7, #20]
 80038ca:	e014      	b.n	80038f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80038cc:	4b25      	ldr	r3, [pc, #148]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038d0:	4a24      	ldr	r2, [pc, #144]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d6:	6593      	str	r3, [r2, #88]	; 0x58
 80038d8:	4b22      	ldr	r3, [pc, #136]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80038e4:	f7ff f974 	bl	8002bd0 <HAL_PWREx_GetVoltageRange>
 80038e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80038ea:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ee:	4a1d      	ldr	r2, [pc, #116]	; (8003964 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80038f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038fc:	d10b      	bne.n	8003916 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b80      	cmp	r3, #128	; 0x80
 8003902:	d919      	bls.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2ba0      	cmp	r3, #160	; 0xa0
 8003908:	d902      	bls.n	8003910 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800390a:	2302      	movs	r3, #2
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	e013      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003910:	2301      	movs	r3, #1
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	e010      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b80      	cmp	r3, #128	; 0x80
 800391a:	d902      	bls.n	8003922 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800391c:	2303      	movs	r3, #3
 800391e:	613b      	str	r3, [r7, #16]
 8003920:	e00a      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2b80      	cmp	r3, #128	; 0x80
 8003926:	d102      	bne.n	800392e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003928:	2302      	movs	r3, #2
 800392a:	613b      	str	r3, [r7, #16]
 800392c:	e004      	b.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b70      	cmp	r3, #112	; 0x70
 8003932:	d101      	bne.n	8003938 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003934:	2301      	movs	r3, #1
 8003936:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f023 0207 	bic.w	r2, r3, #7
 8003940:	4909      	ldr	r1, [pc, #36]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003948:	4b07      	ldr	r3, [pc, #28]	; (8003968 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	429a      	cmp	r2, r3
 8003954:	d001      	beq.n	800395a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	e000      	b.n	800395c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	40021000 	.word	0x40021000
 8003968:	40022000 	.word	0x40022000

0800396c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003974:	2300      	movs	r3, #0
 8003976:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003978:	2300      	movs	r3, #0
 800397a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003984:	2b00      	cmp	r3, #0
 8003986:	d031      	beq.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003990:	d01a      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003992:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003996:	d814      	bhi.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d009      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800399c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80039a0:	d10f      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80039a2:	4b5d      	ldr	r3, [pc, #372]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	4a5c      	ldr	r2, [pc, #368]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039ae:	e00c      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	3304      	adds	r3, #4
 80039b4:	2100      	movs	r1, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 f9de 	bl	8003d78 <RCCEx_PLLSAI1_Config>
 80039bc:	4603      	mov	r3, r0
 80039be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80039c0:	e003      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	74fb      	strb	r3, [r7, #19]
      break;
 80039c6:	e000      	b.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80039c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039ca:	7cfb      	ldrb	r3, [r7, #19]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d10b      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039d0:	4b51      	ldr	r3, [pc, #324]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	494e      	ldr	r1, [pc, #312]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80039e6:	e001      	b.n	80039ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039e8:	7cfb      	ldrb	r3, [r7, #19]
 80039ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 809e 	beq.w	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80039fe:	4b46      	ldr	r3, [pc, #280]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e000      	b.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003a0e:	2300      	movs	r3, #0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00d      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a14:	4b40      	ldr	r3, [pc, #256]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a18:	4a3f      	ldr	r2, [pc, #252]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003a20:	4b3d      	ldr	r3, [pc, #244]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a28:	60bb      	str	r3, [r7, #8]
 8003a2a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003a30:	4b3a      	ldr	r3, [pc, #232]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a39      	ldr	r2, [pc, #228]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a3a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003a3c:	f7fd fb54 	bl	80010e8 <HAL_GetTick>
 8003a40:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a42:	e009      	b.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a44:	f7fd fb50 	bl	80010e8 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d902      	bls.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	74fb      	strb	r3, [r7, #19]
        break;
 8003a56:	e005      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003a58:	4b30      	ldr	r3, [pc, #192]	; (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ef      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003a64:	7cfb      	ldrb	r3, [r7, #19]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d15a      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003a6a:	4b2b      	ldr	r3, [pc, #172]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a74:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d01e      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a80:	697a      	ldr	r2, [r7, #20]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d019      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a86:	4b24      	ldr	r3, [pc, #144]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a90:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a92:	4b21      	ldr	r3, [pc, #132]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a98:	4a1f      	ldr	r2, [pc, #124]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa8:	4a1b      	ldr	r2, [pc, #108]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003aaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003ab2:	4a19      	ldr	r2, [pc, #100]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d016      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ac4:	f7fd fb10 	bl	80010e8 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003aca:	e00b      	b.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003acc:	f7fd fb0c 	bl	80010e8 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d902      	bls.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	74fb      	strb	r3, [r7, #19]
            break;
 8003ae2:	e006      	b.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ae4:	4b0c      	ldr	r3, [pc, #48]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d0ec      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003af2:	7cfb      	ldrb	r3, [r7, #19]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003af8:	4b07      	ldr	r3, [pc, #28]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b06:	4904      	ldr	r1, [pc, #16]	; (8003b18 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b0e:	e009      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b10:	7cfb      	ldrb	r3, [r7, #19]
 8003b12:	74bb      	strb	r3, [r7, #18]
 8003b14:	e006      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003b16:	bf00      	nop
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	7cfb      	ldrb	r3, [r7, #19]
 8003b22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b24:	7c7b      	ldrb	r3, [r7, #17]
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d105      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b2a:	4b8a      	ldr	r3, [pc, #552]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2e:	4a89      	ldr	r2, [pc, #548]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b34:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b42:	4b84      	ldr	r3, [pc, #528]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b48:	f023 0203 	bic.w	r2, r3, #3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	4980      	ldr	r1, [pc, #512]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b64:	4b7b      	ldr	r3, [pc, #492]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b6a:	f023 020c 	bic.w	r2, r3, #12
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b72:	4978      	ldr	r1, [pc, #480]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0320 	and.w	r3, r3, #32
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b86:	4b73      	ldr	r3, [pc, #460]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b94:	496f      	ldr	r1, [pc, #444]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003b96:	4313      	orrs	r3, r2
 8003b98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ba8:	4b6a      	ldr	r3, [pc, #424]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bb6:	4967      	ldr	r1, [pc, #412]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bca:	4b62      	ldr	r3, [pc, #392]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd8:	495e      	ldr	r1, [pc, #376]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d00a      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bec:	4b59      	ldr	r3, [pc, #356]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfa:	4956      	ldr	r1, [pc, #344]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d00a      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c0e:	4b51      	ldr	r3, [pc, #324]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1c:	494d      	ldr	r1, [pc, #308]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d028      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c30:	4b48      	ldr	r3, [pc, #288]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3e:	4945      	ldr	r1, [pc, #276]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c4e:	d106      	bne.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c50:	4b40      	ldr	r3, [pc, #256]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4a3f      	ldr	r2, [pc, #252]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c5a:	60d3      	str	r3, [r2, #12]
 8003c5c:	e011      	b.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c66:	d10c      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	3304      	adds	r3, #4
 8003c6c:	2101      	movs	r1, #1
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f000 f882 	bl	8003d78 <RCCEx_PLLSAI1_Config>
 8003c74:	4603      	mov	r3, r0
 8003c76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c78:	7cfb      	ldrb	r3, [r7, #19]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d001      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003c7e:	7cfb      	ldrb	r3, [r7, #19]
 8003c80:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d028      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c8e:	4b31      	ldr	r3, [pc, #196]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	492d      	ldr	r1, [pc, #180]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cac:	d106      	bne.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cae:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	4a28      	ldr	r2, [pc, #160]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cb8:	60d3      	str	r3, [r2, #12]
 8003cba:	e011      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	2101      	movs	r1, #1
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 f853 	bl	8003d78 <RCCEx_PLLSAI1_Config>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cd6:	7cfb      	ldrb	r3, [r7, #19]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d01c      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003cec:	4b19      	ldr	r3, [pc, #100]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cfa:	4916      	ldr	r1, [pc, #88]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d0a:	d10c      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	2102      	movs	r1, #2
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f830 	bl	8003d78 <RCCEx_PLLSAI1_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d1c:	7cfb      	ldrb	r3, [r7, #19]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003d22:	7cfb      	ldrb	r3, [r7, #19]
 8003d24:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d32:	4b08      	ldr	r3, [pc, #32]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d38:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d40:	4904      	ldr	r1, [pc, #16]	; (8003d54 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003d48:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3718      	adds	r7, #24
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
 8003d52:	bf00      	nop
 8003d54:	40021000 	.word	0x40021000

08003d58 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a04      	ldr	r2, [pc, #16]	; (8003d74 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003d62:	f043 0304 	orr.w	r3, r3, #4
 8003d66:	6013      	str	r3, [r2, #0]
}
 8003d68:	bf00      	nop
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40021000 	.word	0x40021000

08003d78 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003d86:	4b74      	ldr	r3, [pc, #464]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0303 	and.w	r3, r3, #3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d018      	beq.n	8003dc4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003d92:	4b71      	ldr	r3, [pc, #452]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	f003 0203 	and.w	r2, r3, #3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d10d      	bne.n	8003dbe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
       ||
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d009      	beq.n	8003dbe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003daa:	4b6b      	ldr	r3, [pc, #428]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
       ||
 8003dba:	429a      	cmp	r2, r3
 8003dbc:	d047      	beq.n	8003e4e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
 8003dc2:	e044      	b.n	8003e4e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d018      	beq.n	8003dfe <RCCEx_PLLSAI1_Config+0x86>
 8003dcc:	2b03      	cmp	r3, #3
 8003dce:	d825      	bhi.n	8003e1c <RCCEx_PLLSAI1_Config+0xa4>
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d002      	beq.n	8003dda <RCCEx_PLLSAI1_Config+0x62>
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d009      	beq.n	8003dec <RCCEx_PLLSAI1_Config+0x74>
 8003dd8:	e020      	b.n	8003e1c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003dda:	4b5f      	ldr	r3, [pc, #380]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d11d      	bne.n	8003e22 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dea:	e01a      	b.n	8003e22 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003dec:	4b5a      	ldr	r3, [pc, #360]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d116      	bne.n	8003e26 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dfc:	e013      	b.n	8003e26 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003dfe:	4b56      	ldr	r3, [pc, #344]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10f      	bne.n	8003e2a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003e0a:	4b53      	ldr	r3, [pc, #332]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d109      	bne.n	8003e2a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003e1a:	e006      	b.n	8003e2a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e20:	e004      	b.n	8003e2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e22:	bf00      	nop
 8003e24:	e002      	b.n	8003e2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e26:	bf00      	nop
 8003e28:	e000      	b.n	8003e2c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003e2a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003e2c:	7bfb      	ldrb	r3, [r7, #15]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10d      	bne.n	8003e4e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003e32:	4b49      	ldr	r3, [pc, #292]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6819      	ldr	r1, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	3b01      	subs	r3, #1
 8003e44:	011b      	lsls	r3, r3, #4
 8003e46:	430b      	orrs	r3, r1
 8003e48:	4943      	ldr	r1, [pc, #268]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003e4e:	7bfb      	ldrb	r3, [r7, #15]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d17c      	bne.n	8003f4e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003e54:	4b40      	ldr	r3, [pc, #256]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a3f      	ldr	r2, [pc, #252]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e60:	f7fd f942 	bl	80010e8 <HAL_GetTick>
 8003e64:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e66:	e009      	b.n	8003e7c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003e68:	f7fd f93e 	bl	80010e8 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d902      	bls.n	8003e7c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	73fb      	strb	r3, [r7, #15]
        break;
 8003e7a:	e005      	b.n	8003e88 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003e7c:	4b36      	ldr	r3, [pc, #216]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1ef      	bne.n	8003e68 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003e88:	7bfb      	ldrb	r3, [r7, #15]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d15f      	bne.n	8003f4e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d110      	bne.n	8003eb6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003e94:	4b30      	ldr	r3, [pc, #192]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003e9c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6892      	ldr	r2, [r2, #8]
 8003ea4:	0211      	lsls	r1, r2, #8
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68d2      	ldr	r2, [r2, #12]
 8003eaa:	06d2      	lsls	r2, r2, #27
 8003eac:	430a      	orrs	r2, r1
 8003eae:	492a      	ldr	r1, [pc, #168]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	610b      	str	r3, [r1, #16]
 8003eb4:	e027      	b.n	8003f06 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d112      	bne.n	8003ee2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ebc:	4b26      	ldr	r3, [pc, #152]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ebe:	691b      	ldr	r3, [r3, #16]
 8003ec0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003ec4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6892      	ldr	r2, [r2, #8]
 8003ecc:	0211      	lsls	r1, r2, #8
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	6912      	ldr	r2, [r2, #16]
 8003ed2:	0852      	lsrs	r2, r2, #1
 8003ed4:	3a01      	subs	r2, #1
 8003ed6:	0552      	lsls	r2, r2, #21
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	491f      	ldr	r1, [pc, #124]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003edc:	4313      	orrs	r3, r2
 8003ede:	610b      	str	r3, [r1, #16]
 8003ee0:	e011      	b.n	8003f06 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ee2:	4b1d      	ldr	r3, [pc, #116]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003eea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6892      	ldr	r2, [r2, #8]
 8003ef2:	0211      	lsls	r1, r2, #8
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	6952      	ldr	r2, [r2, #20]
 8003ef8:	0852      	lsrs	r2, r2, #1
 8003efa:	3a01      	subs	r2, #1
 8003efc:	0652      	lsls	r2, r2, #25
 8003efe:	430a      	orrs	r2, r1
 8003f00:	4915      	ldr	r1, [pc, #84]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003f06:	4b14      	ldr	r3, [pc, #80]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a13      	ldr	r2, [pc, #76]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f10:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f12:	f7fd f8e9 	bl	80010e8 <HAL_GetTick>
 8003f16:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f18:	e009      	b.n	8003f2e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003f1a:	f7fd f8e5 	bl	80010e8 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d902      	bls.n	8003f2e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	73fb      	strb	r3, [r7, #15]
          break;
 8003f2c:	e005      	b.n	8003f3a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003f2e:	4b0a      	ldr	r3, [pc, #40]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0ef      	beq.n	8003f1a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d106      	bne.n	8003f4e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003f40:	4b05      	ldr	r3, [pc, #20]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	4903      	ldr	r1, [pc, #12]	; (8003f58 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3710      	adds	r7, #16
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	40021000 	.word	0x40021000

08003f5c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d101      	bne.n	8003f6e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e095      	b.n	800409a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d108      	bne.n	8003f88 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f7e:	d009      	beq.n	8003f94 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	61da      	str	r2, [r3, #28]
 8003f86:	e005      	b.n	8003f94 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d106      	bne.n	8003fb4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f7fc fe12 	bl	8000bd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003fd4:	d902      	bls.n	8003fdc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	60fb      	str	r3, [r7, #12]
 8003fda:	e002      	b.n	8003fe2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fe0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	68db      	ldr	r3, [r3, #12]
 8003fe6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003fea:	d007      	beq.n	8003ffc <HAL_SPI_Init+0xa0>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003ff4:	d002      	beq.n	8003ffc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800400c:	431a      	orrs	r2, r3
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	691b      	ldr	r3, [r3, #16]
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	695b      	ldr	r3, [r3, #20]
 800401c:	f003 0301 	and.w	r3, r3, #1
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800402a:	431a      	orrs	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	69db      	ldr	r3, [r3, #28]
 8004030:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6a1b      	ldr	r3, [r3, #32]
 800403a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403e:	ea42 0103 	orr.w	r1, r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004046:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	0c1b      	lsrs	r3, r3, #16
 8004058:	f003 0204 	and.w	r2, r3, #4
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	f003 0310 	and.w	r3, r3, #16
 8004064:	431a      	orrs	r2, r3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004078:	ea42 0103 	orr.w	r1, r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	4613      	mov	r3, r2
 80040b0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_SPI_Transmit_IT+0x20>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e072      	b.n	80041aa <HAL_SPI_Transmit_IT+0x106>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80040cc:	68bb      	ldr	r3, [r7, #8]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d002      	beq.n	80040d8 <HAL_SPI_Transmit_IT+0x34>
 80040d2:	88fb      	ldrh	r3, [r7, #6]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d102      	bne.n	80040de <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040dc:	e060      	b.n	80041a0 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d002      	beq.n	80040f0 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80040ea:	2302      	movs	r3, #2
 80040ec:	75fb      	strb	r3, [r7, #23]
    goto error;
 80040ee:	e057      	b.n	80041a0 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	2203      	movs	r2, #3
 80040f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	68ba      	ldr	r2, [r7, #8]
 8004102:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	88fa      	ldrh	r2, [r7, #6]
 8004108:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	88fa      	ldrh	r2, [r7, #6]
 800410e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2200      	movs	r2, #0
 800412a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004134:	d903      	bls.n	800413e <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	4a1f      	ldr	r2, [pc, #124]	; (80041b8 <HAL_SPI_Transmit_IT+0x114>)
 800413a:	651a      	str	r2, [r3, #80]	; 0x50
 800413c:	e002      	b.n	8004144 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <HAL_SPI_Transmit_IT+0x118>)
 8004142:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800414c:	d10f      	bne.n	800416e <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800415c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800416c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800417c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004188:	2b40      	cmp	r3, #64	; 0x40
 800418a:	d008      	beq.n	800419e <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e000      	b.n	80041a0 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 800419e:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	08004475 	.word	0x08004475
 80041bc:	0800442f 	.word	0x0800442f

080041c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b088      	sub	sp, #32
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	099b      	lsrs	r3, r3, #6
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10f      	bne.n	8004204 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	099b      	lsrs	r3, r3, #6
 80041f2:	f003 0301 	and.w	r3, r3, #1
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d004      	beq.n	8004204 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
    return;
 8004202:	e0d7      	b.n	80043b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	085b      	lsrs	r3, r3, #1
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <HAL_SPI_IRQHandler+0x66>
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	09db      	lsrs	r3, r3, #7
 8004214:	f003 0301 	and.w	r3, r3, #1
 8004218:	2b00      	cmp	r3, #0
 800421a:	d004      	beq.n	8004226 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	4798      	blx	r3
    return;
 8004224:	e0c6      	b.n	80043b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	095b      	lsrs	r3, r3, #5
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d10c      	bne.n	800424c <HAL_SPI_IRQHandler+0x8c>
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	099b      	lsrs	r3, r3, #6
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	f000 80b4 	beq.w	80043b4 <HAL_SPI_IRQHandler+0x1f4>
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 80ad 	beq.w	80043b4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	099b      	lsrs	r3, r3, #6
 800425e:	f003 0301 	and.w	r3, r3, #1
 8004262:	2b00      	cmp	r3, #0
 8004264:	d023      	beq.n	80042ae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b03      	cmp	r3, #3
 8004270:	d011      	beq.n	8004296 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004276:	f043 0204 	orr.w	r2, r3, #4
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	e00b      	b.n	80042ae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004296:	2300      	movs	r3, #0
 8004298:	613b      	str	r3, [r7, #16]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	613b      	str	r3, [r7, #16]
 80042aa:	693b      	ldr	r3, [r7, #16]
        return;
 80042ac:	e082      	b.n	80043b4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	095b      	lsrs	r3, r3, #5
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d014      	beq.n	80042e4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042be:	f043 0201 	orr.w	r2, r3, #1
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80042c6:	2300      	movs	r3, #0
 80042c8:	60fb      	str	r3, [r7, #12]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042e0:	601a      	str	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	f003 0301 	and.w	r3, r3, #1
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00c      	beq.n	800430a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042f4:	f043 0208 	orr.w	r2, r3, #8
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80042fc:	2300      	movs	r3, #0
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800430e:	2b00      	cmp	r3, #0
 8004310:	d04f      	beq.n	80043b2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004320:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	f003 0302 	and.w	r3, r3, #2
 8004330:	2b00      	cmp	r3, #0
 8004332:	d104      	bne.n	800433e <HAL_SPI_IRQHandler+0x17e>
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d034      	beq.n	80043a8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685a      	ldr	r2, [r3, #4]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f022 0203 	bic.w	r2, r2, #3
 800434c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004352:	2b00      	cmp	r3, #0
 8004354:	d011      	beq.n	800437a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800435a:	4a18      	ldr	r2, [pc, #96]	; (80043bc <HAL_SPI_IRQHandler+0x1fc>)
 800435c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004362:	4618      	mov	r0, r3
 8004364:	f7fc ffae 	bl	80012c4 <HAL_DMA_Abort_IT>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004372:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	4a0d      	ldr	r2, [pc, #52]	; (80043bc <HAL_SPI_IRQHandler+0x1fc>)
 8004388:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438e:	4618      	mov	r0, r3
 8004390:	f7fc ff98 	bl	80012c4 <HAL_DMA_Abort_IT>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00a      	beq.n	80043b0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800439e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 80043a6:	e003      	b.n	80043b0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f000 f813 	bl	80043d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80043ae:	e000      	b.n	80043b2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80043b0:	bf00      	nop
    return;
 80043b2:	bf00      	nop
  }
}
 80043b4:	3720      	adds	r7, #32
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	08004405 	.word	0x08004405

080043c0 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80043f6:	b2db      	uxtb	r3, r3
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004410:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f7ff ffd7 	bl	80043d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004426:	bf00      	nop
 8004428:	3710      	adds	r7, #16
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	330c      	adds	r3, #12
 8004440:	7812      	ldrb	r2, [r2, #0]
 8004442:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d102      	bne.n	800446c <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f000 f98a 	bl	8004780 <SPI_CloseTx_ISR>
  }
}
 800446c:	bf00      	nop
 800446e:	3708      	adds	r7, #8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b082      	sub	sp, #8
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004480:	881a      	ldrh	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448c:	1c9a      	adds	r2, r3, #2
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004496:	b29b      	uxth	r3, r3
 8004498:	3b01      	subs	r3, #1
 800449a:	b29a      	uxth	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d102      	bne.n	80044b0 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 f968 	bl	8004780 <SPI_CloseTx_ISR>
  }
}
 80044b0:	bf00      	nop
 80044b2:	3708      	adds	r7, #8
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044c8:	f7fc fe0e 	bl	80010e8 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	4413      	add	r3, r2
 80044d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044d8:	f7fc fe06 	bl	80010e8 <HAL_GetTick>
 80044dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044de:	4b39      	ldr	r3, [pc, #228]	; (80045c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	015b      	lsls	r3, r3, #5
 80044e4:	0d1b      	lsrs	r3, r3, #20
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ee:	e054      	b.n	800459a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f6:	d050      	beq.n	800459a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044f8:	f7fc fdf6 	bl	80010e8 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	429a      	cmp	r2, r3
 8004506:	d902      	bls.n	800450e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d13d      	bne.n	800458a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800451c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004526:	d111      	bne.n	800454c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004530:	d004      	beq.n	800453c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800453a:	d107      	bne.n	800454c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800454a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004554:	d10f      	bne.n	8004576 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e017      	b.n	80045ba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	3b01      	subs	r3, #1
 8004598:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	4013      	ands	r3, r2
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	bf0c      	ite	eq
 80045aa:	2301      	moveq	r3, #1
 80045ac:	2300      	movne	r3, #0
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	461a      	mov	r2, r3
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	429a      	cmp	r2, r3
 80045b6:	d19b      	bne.n	80044f0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3720      	adds	r7, #32
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000004 	.word	0x20000004

080045c8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
 80045d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80045da:	f7fc fd85 	bl	80010e8 <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e2:	1a9b      	subs	r3, r3, r2
 80045e4:	683a      	ldr	r2, [r7, #0]
 80045e6:	4413      	add	r3, r2
 80045e8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80045ea:	f7fc fd7d 	bl	80010e8 <HAL_GetTick>
 80045ee:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	330c      	adds	r3, #12
 80045f6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80045f8:	4b3d      	ldr	r3, [pc, #244]	; (80046f0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	4613      	mov	r3, r2
 80045fe:	009b      	lsls	r3, r3, #2
 8004600:	4413      	add	r3, r2
 8004602:	00da      	lsls	r2, r3, #3
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	0d1b      	lsrs	r3, r3, #20
 8004608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004610:	e060      	b.n	80046d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004618:	d107      	bne.n	800462a <SPI_WaitFifoStateUntilTimeout+0x62>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d104      	bne.n	800462a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	b2db      	uxtb	r3, r3
 8004626:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004628:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004630:	d050      	beq.n	80046d4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004632:	f7fc fd59 	bl	80010e8 <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	6a3b      	ldr	r3, [r7, #32]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800463e:	429a      	cmp	r2, r3
 8004640:	d902      	bls.n	8004648 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	2b00      	cmp	r3, #0
 8004646:	d13d      	bne.n	80046c4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685a      	ldr	r2, [r3, #4]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004656:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004660:	d111      	bne.n	8004686 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800466a:	d004      	beq.n	8004676 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004674:	d107      	bne.n	8004686 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004684:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800468a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800468e:	d10f      	bne.n	80046b0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681a      	ldr	r2, [r3, #0]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046ae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e010      	b.n	80046e6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	3b01      	subs	r3, #1
 80046d2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	4013      	ands	r3, r2
 80046de:	687a      	ldr	r2, [r7, #4]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d196      	bne.n	8004612 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3728      	adds	r7, #40	; 0x28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000004 	.word	0x20000004

080046f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b086      	sub	sp, #24
 80046f8:	af02      	add	r7, sp, #8
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	2200      	movs	r2, #0
 8004708:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f7ff ff5b 	bl	80045c8 <SPI_WaitFifoStateUntilTimeout>
 8004712:	4603      	mov	r3, r0
 8004714:	2b00      	cmp	r3, #0
 8004716:	d007      	beq.n	8004728 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800471c:	f043 0220 	orr.w	r2, r3, #32
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004724:	2303      	movs	r3, #3
 8004726:	e027      	b.n	8004778 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2200      	movs	r2, #0
 8004730:	2180      	movs	r1, #128	; 0x80
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f7ff fec0 	bl	80044b8 <SPI_WaitFlagStateUntilTimeout>
 8004738:	4603      	mov	r3, r0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d007      	beq.n	800474e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004742:	f043 0220 	orr.w	r2, r3, #32
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800474a:	2303      	movs	r3, #3
 800474c:	e014      	b.n	8004778 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2200      	movs	r2, #0
 8004756:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff ff34 	bl	80045c8 <SPI_WaitFifoStateUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476a:	f043 0220 	orr.w	r2, r3, #32
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e000      	b.n	8004778 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004776:	2300      	movs	r3, #0
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}

08004780 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004788:	f7fc fcae 	bl	80010e8 <HAL_GetTick>
 800478c:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	685a      	ldr	r2, [r3, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800479c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	2164      	movs	r1, #100	; 0x64
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff ffa6 	bl	80046f4 <SPI_EndRxTxTransaction>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047b2:	f043 0220 	orr.w	r2, r3, #32
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10a      	bne.n	80047d8 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	60bb      	str	r3, [r7, #8]
 80047d6:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f7ff fdf3 	bl	80043d4 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80047ee:	e002      	b.n	80047f6 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff fde5 	bl	80043c0 <HAL_SPI_TxCpltCallback>
}
 80047f6:	bf00      	nop
 80047f8:	3710      	adds	r7, #16
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b082      	sub	sp, #8
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e049      	b.n	80048a4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d106      	bne.n	800482a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f7fc fb49 	bl	8000ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3304      	adds	r3, #4
 800483a:	4619      	mov	r1, r3
 800483c:	4610      	mov	r0, r2
 800483e:	f000 f9d1 	bl	8004be4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2201      	movs	r2, #1
 8004846:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d001      	beq.n	80048c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048c0:	2301      	movs	r3, #1
 80048c2:	e03b      	b.n	800493c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68da      	ldr	r2, [r3, #12]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a19      	ldr	r2, [pc, #100]	; (8004948 <HAL_TIM_Base_Start_IT+0x9c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_TIM_Base_Start_IT+0x4e>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ee:	d004      	beq.n	80048fa <HAL_TIM_Base_Start_IT+0x4e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a15      	ldr	r2, [pc, #84]	; (800494c <HAL_TIM_Base_Start_IT+0xa0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d115      	bne.n	8004926 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	689a      	ldr	r2, [r3, #8]
 8004900:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_TIM_Base_Start_IT+0xa4>)
 8004902:	4013      	ands	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b06      	cmp	r3, #6
 800490a:	d015      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x8c>
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004912:	d011      	beq.n	8004938 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004924:	e008      	b.n	8004938 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f042 0201 	orr.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]
 8004936:	e000      	b.n	800493a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004938:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3714      	adds	r7, #20
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	40012c00 	.word	0x40012c00
 800494c:	40014000 	.word	0x40014000
 8004950:	00010007 	.word	0x00010007

08004954 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f003 0302 	and.w	r3, r3, #2
 8004966:	2b02      	cmp	r3, #2
 8004968:	d122      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b02      	cmp	r3, #2
 8004976:	d11b      	bne.n	80049b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f06f 0202 	mvn.w	r2, #2
 8004980:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	f003 0303 	and.w	r3, r3, #3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 f905 	bl	8004ba6 <HAL_TIM_IC_CaptureCallback>
 800499c:	e005      	b.n	80049aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f8f7 	bl	8004b92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f000 f908 	bl	8004bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	f003 0304 	and.w	r3, r3, #4
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d122      	bne.n	8004a04 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b04      	cmp	r3, #4
 80049ca:	d11b      	bne.n	8004a04 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0204 	mvn.w	r2, #4
 80049d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2202      	movs	r2, #2
 80049da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	699b      	ldr	r3, [r3, #24]
 80049e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d003      	beq.n	80049f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f8db 	bl	8004ba6 <HAL_TIM_IC_CaptureCallback>
 80049f0:	e005      	b.n	80049fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f8cd 	bl	8004b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f8de 	bl	8004bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	f003 0308 	and.w	r3, r3, #8
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d122      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b08      	cmp	r3, #8
 8004a1e:	d11b      	bne.n	8004a58 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0208 	mvn.w	r2, #8
 8004a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2204      	movs	r2, #4
 8004a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	69db      	ldr	r3, [r3, #28]
 8004a36:	f003 0303 	and.w	r3, r3, #3
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f8b1 	bl	8004ba6 <HAL_TIM_IC_CaptureCallback>
 8004a44:	e005      	b.n	8004a52 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f8a3 	bl	8004b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f000 f8b4 	bl	8004bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	f003 0310 	and.w	r3, r3, #16
 8004a62:	2b10      	cmp	r3, #16
 8004a64:	d122      	bne.n	8004aac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	f003 0310 	and.w	r3, r3, #16
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d11b      	bne.n	8004aac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0210 	mvn.w	r2, #16
 8004a7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2208      	movs	r2, #8
 8004a82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	69db      	ldr	r3, [r3, #28]
 8004a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 f887 	bl	8004ba6 <HAL_TIM_IC_CaptureCallback>
 8004a98:	e005      	b.n	8004aa6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 f879 	bl	8004b92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 f88a 	bl	8004bba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b01      	cmp	r3, #1
 8004ab8:	d10e      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0301 	and.w	r3, r3, #1
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d107      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f06f 0201 	mvn.w	r2, #1
 8004ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f7fc f820 	bl	8000b18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b80      	cmp	r3, #128	; 0x80
 8004ae4:	d10e      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af0:	2b80      	cmp	r3, #128	; 0x80
 8004af2:	d107      	bne.n	8004b04 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004afc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 f944 	bl	8004d8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b12:	d10e      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b1e:	2b80      	cmp	r3, #128	; 0x80
 8004b20:	d107      	bne.n	8004b32 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004b2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f937 	bl	8004da0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b3c:	2b40      	cmp	r3, #64	; 0x40
 8004b3e:	d10e      	bne.n	8004b5e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b4a:	2b40      	cmp	r3, #64	; 0x40
 8004b4c:	d107      	bne.n	8004b5e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f838 	bl	8004bce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	f003 0320 	and.w	r3, r3, #32
 8004b68:	2b20      	cmp	r3, #32
 8004b6a:	d10e      	bne.n	8004b8a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f003 0320 	and.w	r3, r3, #32
 8004b76:	2b20      	cmp	r3, #32
 8004b78:	d107      	bne.n	8004b8a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f06f 0220 	mvn.w	r2, #32
 8004b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f8f7 	bl	8004d78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b8a:	bf00      	nop
 8004b8c:	3708      	adds	r7, #8
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b083      	sub	sp, #12
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b9a:	bf00      	nop
 8004b9c:	370c      	adds	r7, #12
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba4:	4770      	bx	lr

08004ba6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b083      	sub	sp, #12
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr

08004bba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004bc2:	bf00      	nop
 8004bc4:	370c      	adds	r7, #12
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr

08004bce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004bce:	b480      	push	{r7}
 8004bd0:	b083      	sub	sp, #12
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004bd6:	bf00      	nop
 8004bd8:	370c      	adds	r7, #12
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr
	...

08004be4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a2a      	ldr	r2, [pc, #168]	; (8004ca0 <TIM_Base_SetConfig+0xbc>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d003      	beq.n	8004c04 <TIM_Base_SetConfig+0x20>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c02:	d108      	bne.n	8004c16 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a21      	ldr	r2, [pc, #132]	; (8004ca0 <TIM_Base_SetConfig+0xbc>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d00b      	beq.n	8004c36 <TIM_Base_SetConfig+0x52>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c24:	d007      	beq.n	8004c36 <TIM_Base_SetConfig+0x52>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a1e      	ldr	r2, [pc, #120]	; (8004ca4 <TIM_Base_SetConfig+0xc0>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d003      	beq.n	8004c36 <TIM_Base_SetConfig+0x52>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4a1d      	ldr	r2, [pc, #116]	; (8004ca8 <TIM_Base_SetConfig+0xc4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d108      	bne.n	8004c48 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	68fa      	ldr	r2, [r7, #12]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	695b      	ldr	r3, [r3, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c64:	683b      	ldr	r3, [r7, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ca0 <TIM_Base_SetConfig+0xbc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d007      	beq.n	8004c84 <TIM_Base_SetConfig+0xa0>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	4a0b      	ldr	r2, [pc, #44]	; (8004ca4 <TIM_Base_SetConfig+0xc0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d003      	beq.n	8004c84 <TIM_Base_SetConfig+0xa0>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <TIM_Base_SetConfig+0xc4>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d103      	bne.n	8004c8c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	615a      	str	r2, [r3, #20]
}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	40012c00 	.word	0x40012c00
 8004ca4:	40014000 	.word	0x40014000
 8004ca8:	40014400 	.word	0x40014400

08004cac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e04f      	b.n	8004d64 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a21      	ldr	r2, [pc, #132]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d108      	bne.n	8004d00 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cf4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68fa      	ldr	r2, [r7, #12]
 8004d18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a14      	ldr	r2, [pc, #80]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d009      	beq.n	8004d38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2c:	d004      	beq.n	8004d38 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a10      	ldr	r2, [pc, #64]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d10c      	bne.n	8004d52 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d3e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68ba      	ldr	r2, [r7, #8]
 8004d50:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr
 8004d70:	40012c00 	.word	0x40012c00
 8004d74:	40014000 	.word	0x40014000

08004d78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e040      	b.n	8004e48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d106      	bne.n	8004ddc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc f8c6 	bl	8000f68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2224      	movs	r2, #36	; 0x24
 8004de0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f022 0201 	bic.w	r2, r2, #1
 8004df0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f82c 	bl	8004e50 <UART_SetConfig>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d101      	bne.n	8004e02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e022      	b.n	8004e48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 fa4c 	bl	80052a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f042 0201 	orr.w	r2, r2, #1
 8004e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 fad3 	bl	80053ec <UART_CheckIdleState>
 8004e46:	4603      	mov	r3, r0
}
 8004e48:	4618      	mov	r0, r3
 8004e4a:	3708      	adds	r7, #8
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e54:	b08a      	sub	sp, #40	; 0x28
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	69db      	ldr	r3, [r3, #28]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	4bb4      	ldr	r3, [pc, #720]	; (8005150 <UART_SetConfig+0x300>)
 8004e80:	4013      	ands	r3, r2
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e88:	430b      	orrs	r3, r1
 8004e8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	68da      	ldr	r2, [r3, #12]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	430a      	orrs	r2, r1
 8004ea0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	699b      	ldr	r3, [r3, #24]
 8004ea6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4aa9      	ldr	r2, [pc, #676]	; (8005154 <UART_SetConfig+0x304>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d004      	beq.n	8004ebc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ecc:	430a      	orrs	r2, r1
 8004ece:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4aa0      	ldr	r2, [pc, #640]	; (8005158 <UART_SetConfig+0x308>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d126      	bne.n	8004f28 <UART_SetConfig+0xd8>
 8004eda:	4ba0      	ldr	r3, [pc, #640]	; (800515c <UART_SetConfig+0x30c>)
 8004edc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee0:	f003 0303 	and.w	r3, r3, #3
 8004ee4:	2b03      	cmp	r3, #3
 8004ee6:	d81b      	bhi.n	8004f20 <UART_SetConfig+0xd0>
 8004ee8:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <UART_SetConfig+0xa0>)
 8004eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eee:	bf00      	nop
 8004ef0:	08004f01 	.word	0x08004f01
 8004ef4:	08004f11 	.word	0x08004f11
 8004ef8:	08004f09 	.word	0x08004f09
 8004efc:	08004f19 	.word	0x08004f19
 8004f00:	2301      	movs	r3, #1
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f06:	e080      	b.n	800500a <UART_SetConfig+0x1ba>
 8004f08:	2302      	movs	r3, #2
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f0e:	e07c      	b.n	800500a <UART_SetConfig+0x1ba>
 8004f10:	2304      	movs	r3, #4
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f16:	e078      	b.n	800500a <UART_SetConfig+0x1ba>
 8004f18:	2308      	movs	r3, #8
 8004f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f1e:	e074      	b.n	800500a <UART_SetConfig+0x1ba>
 8004f20:	2310      	movs	r3, #16
 8004f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f26:	e070      	b.n	800500a <UART_SetConfig+0x1ba>
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a8c      	ldr	r2, [pc, #560]	; (8005160 <UART_SetConfig+0x310>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d138      	bne.n	8004fa4 <UART_SetConfig+0x154>
 8004f32:	4b8a      	ldr	r3, [pc, #552]	; (800515c <UART_SetConfig+0x30c>)
 8004f34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f38:	f003 030c 	and.w	r3, r3, #12
 8004f3c:	2b0c      	cmp	r3, #12
 8004f3e:	d82d      	bhi.n	8004f9c <UART_SetConfig+0x14c>
 8004f40:	a201      	add	r2, pc, #4	; (adr r2, 8004f48 <UART_SetConfig+0xf8>)
 8004f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f46:	bf00      	nop
 8004f48:	08004f7d 	.word	0x08004f7d
 8004f4c:	08004f9d 	.word	0x08004f9d
 8004f50:	08004f9d 	.word	0x08004f9d
 8004f54:	08004f9d 	.word	0x08004f9d
 8004f58:	08004f8d 	.word	0x08004f8d
 8004f5c:	08004f9d 	.word	0x08004f9d
 8004f60:	08004f9d 	.word	0x08004f9d
 8004f64:	08004f9d 	.word	0x08004f9d
 8004f68:	08004f85 	.word	0x08004f85
 8004f6c:	08004f9d 	.word	0x08004f9d
 8004f70:	08004f9d 	.word	0x08004f9d
 8004f74:	08004f9d 	.word	0x08004f9d
 8004f78:	08004f95 	.word	0x08004f95
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f82:	e042      	b.n	800500a <UART_SetConfig+0x1ba>
 8004f84:	2302      	movs	r3, #2
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f8a:	e03e      	b.n	800500a <UART_SetConfig+0x1ba>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f92:	e03a      	b.n	800500a <UART_SetConfig+0x1ba>
 8004f94:	2308      	movs	r3, #8
 8004f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004f9a:	e036      	b.n	800500a <UART_SetConfig+0x1ba>
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fa2:	e032      	b.n	800500a <UART_SetConfig+0x1ba>
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a6a      	ldr	r2, [pc, #424]	; (8005154 <UART_SetConfig+0x304>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d12a      	bne.n	8005004 <UART_SetConfig+0x1b4>
 8004fae:	4b6b      	ldr	r3, [pc, #428]	; (800515c <UART_SetConfig+0x30c>)
 8004fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004fb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fbc:	d01a      	beq.n	8004ff4 <UART_SetConfig+0x1a4>
 8004fbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004fc2:	d81b      	bhi.n	8004ffc <UART_SetConfig+0x1ac>
 8004fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc8:	d00c      	beq.n	8004fe4 <UART_SetConfig+0x194>
 8004fca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fce:	d815      	bhi.n	8004ffc <UART_SetConfig+0x1ac>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <UART_SetConfig+0x18c>
 8004fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fd8:	d008      	beq.n	8004fec <UART_SetConfig+0x19c>
 8004fda:	e00f      	b.n	8004ffc <UART_SetConfig+0x1ac>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fe2:	e012      	b.n	800500a <UART_SetConfig+0x1ba>
 8004fe4:	2302      	movs	r3, #2
 8004fe6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004fea:	e00e      	b.n	800500a <UART_SetConfig+0x1ba>
 8004fec:	2304      	movs	r3, #4
 8004fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ff2:	e00a      	b.n	800500a <UART_SetConfig+0x1ba>
 8004ff4:	2308      	movs	r3, #8
 8004ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004ffa:	e006      	b.n	800500a <UART_SetConfig+0x1ba>
 8004ffc:	2310      	movs	r3, #16
 8004ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005002:	e002      	b.n	800500a <UART_SetConfig+0x1ba>
 8005004:	2310      	movs	r3, #16
 8005006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a51      	ldr	r2, [pc, #324]	; (8005154 <UART_SetConfig+0x304>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d17a      	bne.n	800510a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005014:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005018:	2b08      	cmp	r3, #8
 800501a:	d824      	bhi.n	8005066 <UART_SetConfig+0x216>
 800501c:	a201      	add	r2, pc, #4	; (adr r2, 8005024 <UART_SetConfig+0x1d4>)
 800501e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005022:	bf00      	nop
 8005024:	08005049 	.word	0x08005049
 8005028:	08005067 	.word	0x08005067
 800502c:	08005051 	.word	0x08005051
 8005030:	08005067 	.word	0x08005067
 8005034:	08005057 	.word	0x08005057
 8005038:	08005067 	.word	0x08005067
 800503c:	08005067 	.word	0x08005067
 8005040:	08005067 	.word	0x08005067
 8005044:	0800505f 	.word	0x0800505f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005048:	f7fe fbd2 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 800504c:	61f8      	str	r0, [r7, #28]
        break;
 800504e:	e010      	b.n	8005072 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005050:	4b44      	ldr	r3, [pc, #272]	; (8005164 <UART_SetConfig+0x314>)
 8005052:	61fb      	str	r3, [r7, #28]
        break;
 8005054:	e00d      	b.n	8005072 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005056:	f7fe fb33 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 800505a:	61f8      	str	r0, [r7, #28]
        break;
 800505c:	e009      	b.n	8005072 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800505e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005062:	61fb      	str	r3, [r7, #28]
        break;
 8005064:	e005      	b.n	8005072 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800506a:	2301      	movs	r3, #1
 800506c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 8107 	beq.w	8005288 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	685a      	ldr	r2, [r3, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	4413      	add	r3, r2
 8005084:	69fa      	ldr	r2, [r7, #28]
 8005086:	429a      	cmp	r2, r3
 8005088:	d305      	bcc.n	8005096 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	429a      	cmp	r2, r3
 8005094:	d903      	bls.n	800509e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800509c:	e0f4      	b.n	8005288 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	2200      	movs	r2, #0
 80050a2:	461c      	mov	r4, r3
 80050a4:	4615      	mov	r5, r2
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	f04f 0300 	mov.w	r3, #0
 80050ae:	022b      	lsls	r3, r5, #8
 80050b0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80050b4:	0222      	lsls	r2, r4, #8
 80050b6:	68f9      	ldr	r1, [r7, #12]
 80050b8:	6849      	ldr	r1, [r1, #4]
 80050ba:	0849      	lsrs	r1, r1, #1
 80050bc:	2000      	movs	r0, #0
 80050be:	4688      	mov	r8, r1
 80050c0:	4681      	mov	r9, r0
 80050c2:	eb12 0a08 	adds.w	sl, r2, r8
 80050c6:	eb43 0b09 	adc.w	fp, r3, r9
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	603b      	str	r3, [r7, #0]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050d8:	4650      	mov	r0, sl
 80050da:	4659      	mov	r1, fp
 80050dc:	f7fb f878 	bl	80001d0 <__aeabi_uldivmod>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4613      	mov	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80050ee:	d308      	bcc.n	8005102 <UART_SetConfig+0x2b2>
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050f6:	d204      	bcs.n	8005102 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	60da      	str	r2, [r3, #12]
 8005100:	e0c2      	b.n	8005288 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005108:	e0be      	b.n	8005288 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	69db      	ldr	r3, [r3, #28]
 800510e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005112:	d16a      	bne.n	80051ea <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8005114:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005118:	2b08      	cmp	r3, #8
 800511a:	d834      	bhi.n	8005186 <UART_SetConfig+0x336>
 800511c:	a201      	add	r2, pc, #4	; (adr r2, 8005124 <UART_SetConfig+0x2d4>)
 800511e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005122:	bf00      	nop
 8005124:	08005149 	.word	0x08005149
 8005128:	08005169 	.word	0x08005169
 800512c:	08005171 	.word	0x08005171
 8005130:	08005187 	.word	0x08005187
 8005134:	08005177 	.word	0x08005177
 8005138:	08005187 	.word	0x08005187
 800513c:	08005187 	.word	0x08005187
 8005140:	08005187 	.word	0x08005187
 8005144:	0800517f 	.word	0x0800517f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005148:	f7fe fb52 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 800514c:	61f8      	str	r0, [r7, #28]
        break;
 800514e:	e020      	b.n	8005192 <UART_SetConfig+0x342>
 8005150:	efff69f3 	.word	0xefff69f3
 8005154:	40008000 	.word	0x40008000
 8005158:	40013800 	.word	0x40013800
 800515c:	40021000 	.word	0x40021000
 8005160:	40004400 	.word	0x40004400
 8005164:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005168:	f7fe fb58 	bl	800381c <HAL_RCC_GetPCLK2Freq>
 800516c:	61f8      	str	r0, [r7, #28]
        break;
 800516e:	e010      	b.n	8005192 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005170:	4b4c      	ldr	r3, [pc, #304]	; (80052a4 <UART_SetConfig+0x454>)
 8005172:	61fb      	str	r3, [r7, #28]
        break;
 8005174:	e00d      	b.n	8005192 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005176:	f7fe faa3 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 800517a:	61f8      	str	r0, [r7, #28]
        break;
 800517c:	e009      	b.n	8005192 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800517e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005182:	61fb      	str	r3, [r7, #28]
        break;
 8005184:	e005      	b.n	8005192 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005190:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d077      	beq.n	8005288 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	005a      	lsls	r2, r3, #1
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	085b      	lsrs	r3, r3, #1
 80051a2:	441a      	add	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b0f      	cmp	r3, #15
 80051b2:	d916      	bls.n	80051e2 <UART_SetConfig+0x392>
 80051b4:	69bb      	ldr	r3, [r7, #24]
 80051b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051ba:	d212      	bcs.n	80051e2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f023 030f 	bic.w	r3, r3, #15
 80051c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	085b      	lsrs	r3, r3, #1
 80051ca:	b29b      	uxth	r3, r3
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	8afb      	ldrh	r3, [r7, #22]
 80051d4:	4313      	orrs	r3, r2
 80051d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	8afa      	ldrh	r2, [r7, #22]
 80051de:	60da      	str	r2, [r3, #12]
 80051e0:	e052      	b.n	8005288 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80051e8:	e04e      	b.n	8005288 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80051ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d827      	bhi.n	8005242 <UART_SetConfig+0x3f2>
 80051f2:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <UART_SetConfig+0x3a8>)
 80051f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f8:	0800521d 	.word	0x0800521d
 80051fc:	08005225 	.word	0x08005225
 8005200:	0800522d 	.word	0x0800522d
 8005204:	08005243 	.word	0x08005243
 8005208:	08005233 	.word	0x08005233
 800520c:	08005243 	.word	0x08005243
 8005210:	08005243 	.word	0x08005243
 8005214:	08005243 	.word	0x08005243
 8005218:	0800523b 	.word	0x0800523b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800521c:	f7fe fae8 	bl	80037f0 <HAL_RCC_GetPCLK1Freq>
 8005220:	61f8      	str	r0, [r7, #28]
        break;
 8005222:	e014      	b.n	800524e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005224:	f7fe fafa 	bl	800381c <HAL_RCC_GetPCLK2Freq>
 8005228:	61f8      	str	r0, [r7, #28]
        break;
 800522a:	e010      	b.n	800524e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800522c:	4b1d      	ldr	r3, [pc, #116]	; (80052a4 <UART_SetConfig+0x454>)
 800522e:	61fb      	str	r3, [r7, #28]
        break;
 8005230:	e00d      	b.n	800524e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005232:	f7fe fa45 	bl	80036c0 <HAL_RCC_GetSysClockFreq>
 8005236:	61f8      	str	r0, [r7, #28]
        break;
 8005238:	e009      	b.n	800524e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800523a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800523e:	61fb      	str	r3, [r7, #28]
        break;
 8005240:	e005      	b.n	800524e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800524c:	bf00      	nop
    }

    if (pclk != 0U)
 800524e:	69fb      	ldr	r3, [r7, #28]
 8005250:	2b00      	cmp	r3, #0
 8005252:	d019      	beq.n	8005288 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	085a      	lsrs	r2, r3, #1
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	441a      	add	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	fbb2 f3f3 	udiv	r3, r2, r3
 8005266:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b0f      	cmp	r3, #15
 800526c:	d909      	bls.n	8005282 <UART_SetConfig+0x432>
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005274:	d205      	bcs.n	8005282 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	b29a      	uxth	r2, r3
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	60da      	str	r2, [r3, #12]
 8005280:	e002      	b.n	8005288 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005294:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8005298:	4618      	mov	r0, r3
 800529a:	3728      	adds	r7, #40	; 0x28
 800529c:	46bd      	mov	sp, r7
 800529e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a2:	bf00      	nop
 80052a4:	00f42400 	.word	0x00f42400

080052a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b083      	sub	sp, #12
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b4:	f003 0301 	and.w	r3, r3, #1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00a      	beq.n	80052d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00a      	beq.n	80052f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	430a      	orrs	r2, r1
 80052f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d00a      	beq.n	8005316 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	430a      	orrs	r2, r1
 8005314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800531a:	f003 0308 	and.w	r3, r3, #8
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00a      	beq.n	8005338 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	430a      	orrs	r2, r1
 8005336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533c:	f003 0310 	and.w	r3, r3, #16
 8005340:	2b00      	cmp	r3, #0
 8005342:	d00a      	beq.n	800535a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	430a      	orrs	r2, r1
 8005358:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	f003 0320 	and.w	r3, r3, #32
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00a      	beq.n	800537c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	430a      	orrs	r2, r1
 800537a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005384:	2b00      	cmp	r3, #0
 8005386:	d01a      	beq.n	80053be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	430a      	orrs	r2, r1
 800539c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053a6:	d10a      	bne.n	80053be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	430a      	orrs	r2, r1
 80053bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00a      	beq.n	80053e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	430a      	orrs	r2, r1
 80053de:	605a      	str	r2, [r3, #4]
  }
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b086      	sub	sp, #24
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80053fc:	f7fb fe74 	bl	80010e8 <HAL_GetTick>
 8005400:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b08      	cmp	r3, #8
 800540e:	d10e      	bne.n	800542e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005410:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	2200      	movs	r2, #0
 800541a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f000 f82d 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d001      	beq.n	800542e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e023      	b.n	8005476 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0304 	and.w	r3, r3, #4
 8005438:	2b04      	cmp	r3, #4
 800543a:	d10e      	bne.n	800545a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800543c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f817 	bl	800547e <UART_WaitOnFlagUntilTimeout>
 8005450:	4603      	mov	r3, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	d001      	beq.n	800545a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e00d      	b.n	8005476 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}

0800547e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800547e:	b580      	push	{r7, lr}
 8005480:	b09c      	sub	sp, #112	; 0x70
 8005482:	af00      	add	r7, sp, #0
 8005484:	60f8      	str	r0, [r7, #12]
 8005486:	60b9      	str	r1, [r7, #8]
 8005488:	603b      	str	r3, [r7, #0]
 800548a:	4613      	mov	r3, r2
 800548c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800548e:	e0a5      	b.n	80055dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005490:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005496:	f000 80a1 	beq.w	80055dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549a:	f7fb fe25 	bl	80010e8 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80054aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d13e      	bne.n	800552e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b8:	e853 3f00 	ldrex	r3, [r3]
 80054bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80054be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054c4:	667b      	str	r3, [r7, #100]	; 0x64
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	461a      	mov	r2, r3
 80054cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80054d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80054d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80054d6:	e841 2300 	strex	r3, r2, [r1]
 80054da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80054dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1e6      	bne.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3308      	adds	r3, #8
 80054e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054ec:	e853 3f00 	ldrex	r3, [r3]
 80054f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80054f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f4:	f023 0301 	bic.w	r3, r3, #1
 80054f8:	663b      	str	r3, [r7, #96]	; 0x60
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	3308      	adds	r3, #8
 8005500:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005502:	64ba      	str	r2, [r7, #72]	; 0x48
 8005504:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005506:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005508:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800550a:	e841 2300 	strex	r3, r2, [r1]
 800550e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005512:	2b00      	cmp	r3, #0
 8005514:	d1e5      	bne.n	80054e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2220      	movs	r2, #32
 800551a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2220      	movs	r2, #32
 8005520:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800552a:	2303      	movs	r3, #3
 800552c:	e067      	b.n	80055fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0304 	and.w	r3, r3, #4
 8005538:	2b00      	cmp	r3, #0
 800553a:	d04f      	beq.n	80055dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	69db      	ldr	r3, [r3, #28]
 8005542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005546:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800554a:	d147      	bne.n	80055dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005554:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555e:	e853 3f00 	ldrex	r3, [r3]
 8005562:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005566:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800556a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005574:	637b      	str	r3, [r7, #52]	; 0x34
 8005576:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005578:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800557a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800557c:	e841 2300 	strex	r3, r2, [r1]
 8005580:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1e6      	bne.n	8005556 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	3308      	adds	r3, #8
 800558e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	e853 3f00 	ldrex	r3, [r3]
 8005596:	613b      	str	r3, [r7, #16]
   return(result);
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f023 0301 	bic.w	r3, r3, #1
 800559e:	66bb      	str	r3, [r7, #104]	; 0x68
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3308      	adds	r3, #8
 80055a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80055a8:	623a      	str	r2, [r7, #32]
 80055aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ac:	69f9      	ldr	r1, [r7, #28]
 80055ae:	6a3a      	ldr	r2, [r7, #32]
 80055b0:	e841 2300 	strex	r3, r2, [r1]
 80055b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d1e5      	bne.n	8005588 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2220      	movs	r2, #32
 80055c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2220      	movs	r2, #32
 80055cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e010      	b.n	80055fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4013      	ands	r3, r2
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	bf0c      	ite	eq
 80055ec:	2301      	moveq	r3, #1
 80055ee:	2300      	movne	r3, #0
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	461a      	mov	r2, r3
 80055f4:	79fb      	ldrb	r3, [r7, #7]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	f43f af4a 	beq.w	8005490 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80055fc:	2300      	movs	r3, #0
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3770      	adds	r7, #112	; 0x70
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
	...

08005608 <__NVIC_SetPriority>:
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	6039      	str	r1, [r7, #0]
 8005612:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005614:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005618:	2b00      	cmp	r3, #0
 800561a:	db0a      	blt.n	8005632 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	b2da      	uxtb	r2, r3
 8005620:	490c      	ldr	r1, [pc, #48]	; (8005654 <__NVIC_SetPriority+0x4c>)
 8005622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005626:	0112      	lsls	r2, r2, #4
 8005628:	b2d2      	uxtb	r2, r2
 800562a:	440b      	add	r3, r1
 800562c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005630:	e00a      	b.n	8005648 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	b2da      	uxtb	r2, r3
 8005636:	4908      	ldr	r1, [pc, #32]	; (8005658 <__NVIC_SetPriority+0x50>)
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	f003 030f 	and.w	r3, r3, #15
 800563e:	3b04      	subs	r3, #4
 8005640:	0112      	lsls	r2, r2, #4
 8005642:	b2d2      	uxtb	r2, r2
 8005644:	440b      	add	r3, r1
 8005646:	761a      	strb	r2, [r3, #24]
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	e000e100 	.word	0xe000e100
 8005658:	e000ed00 	.word	0xe000ed00

0800565c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800565c:	b580      	push	{r7, lr}
 800565e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005660:	4b05      	ldr	r3, [pc, #20]	; (8005678 <SysTick_Handler+0x1c>)
 8005662:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005664:	f002 f874 	bl	8007750 <xTaskGetSchedulerState>
 8005668:	4603      	mov	r3, r0
 800566a:	2b01      	cmp	r3, #1
 800566c:	d001      	beq.n	8005672 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800566e:	f002 fe5b 	bl	8008328 <xPortSysTickHandler>
  }
}
 8005672:	bf00      	nop
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	e000e010 	.word	0xe000e010

0800567c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800567c:	b580      	push	{r7, lr}
 800567e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005680:	2100      	movs	r1, #0
 8005682:	f06f 0004 	mvn.w	r0, #4
 8005686:	f7ff ffbf 	bl	8005608 <__NVIC_SetPriority>
#endif
}
 800568a:	bf00      	nop
 800568c:	bd80      	pop	{r7, pc}
	...

08005690 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005696:	f3ef 8305 	mrs	r3, IPSR
 800569a:	603b      	str	r3, [r7, #0]
  return(result);
 800569c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80056a2:	f06f 0305 	mvn.w	r3, #5
 80056a6:	607b      	str	r3, [r7, #4]
 80056a8:	e00c      	b.n	80056c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80056aa:	4b0a      	ldr	r3, [pc, #40]	; (80056d4 <osKernelInitialize+0x44>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d105      	bne.n	80056be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056b2:	4b08      	ldr	r3, [pc, #32]	; (80056d4 <osKernelInitialize+0x44>)
 80056b4:	2201      	movs	r2, #1
 80056b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80056b8:	2300      	movs	r3, #0
 80056ba:	607b      	str	r3, [r7, #4]
 80056bc:	e002      	b.n	80056c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80056be:	f04f 33ff 	mov.w	r3, #4294967295
 80056c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80056c4:	687b      	ldr	r3, [r7, #4]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	370c      	adds	r7, #12
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	20000288 	.word	0x20000288

080056d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056de:	f3ef 8305 	mrs	r3, IPSR
 80056e2:	603b      	str	r3, [r7, #0]
  return(result);
 80056e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80056ea:	f06f 0305 	mvn.w	r3, #5
 80056ee:	607b      	str	r3, [r7, #4]
 80056f0:	e010      	b.n	8005714 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80056f2:	4b0b      	ldr	r3, [pc, #44]	; (8005720 <osKernelStart+0x48>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d109      	bne.n	800570e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80056fa:	f7ff ffbf 	bl	800567c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80056fe:	4b08      	ldr	r3, [pc, #32]	; (8005720 <osKernelStart+0x48>)
 8005700:	2202      	movs	r2, #2
 8005702:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005704:	f001 fbc8 	bl	8006e98 <vTaskStartScheduler>
      stat = osOK;
 8005708:	2300      	movs	r3, #0
 800570a:	607b      	str	r3, [r7, #4]
 800570c:	e002      	b.n	8005714 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800570e:	f04f 33ff 	mov.w	r3, #4294967295
 8005712:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005714:	687b      	ldr	r3, [r7, #4]
}
 8005716:	4618      	mov	r0, r3
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000288 	.word	0x20000288

08005724 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005724:	b580      	push	{r7, lr}
 8005726:	b08e      	sub	sp, #56	; 0x38
 8005728:	af04      	add	r7, sp, #16
 800572a:	60f8      	str	r0, [r7, #12]
 800572c:	60b9      	str	r1, [r7, #8]
 800572e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005730:	2300      	movs	r3, #0
 8005732:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005734:	f3ef 8305 	mrs	r3, IPSR
 8005738:	617b      	str	r3, [r7, #20]
  return(result);
 800573a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800573c:	2b00      	cmp	r3, #0
 800573e:	d17e      	bne.n	800583e <osThreadNew+0x11a>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d07b      	beq.n	800583e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005746:	2380      	movs	r3, #128	; 0x80
 8005748:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800574a:	2318      	movs	r3, #24
 800574c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800574e:	2300      	movs	r3, #0
 8005750:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8005752:	f04f 33ff 	mov.w	r3, #4294967295
 8005756:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d045      	beq.n	80057ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <osThreadNew+0x48>
        name = attr->name;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d002      	beq.n	800577a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d008      	beq.n	8005792 <osThreadNew+0x6e>
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2b38      	cmp	r3, #56	; 0x38
 8005784:	d805      	bhi.n	8005792 <osThreadNew+0x6e>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d001      	beq.n	8005796 <osThreadNew+0x72>
        return (NULL);
 8005792:	2300      	movs	r3, #0
 8005794:	e054      	b.n	8005840 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	695b      	ldr	r3, [r3, #20]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d003      	beq.n	80057a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	089b      	lsrs	r3, r3, #2
 80057a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00e      	beq.n	80057cc <osThreadNew+0xa8>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	2bbb      	cmp	r3, #187	; 0xbb
 80057b4:	d90a      	bls.n	80057cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d006      	beq.n	80057cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d002      	beq.n	80057cc <osThreadNew+0xa8>
        mem = 1;
 80057c6:	2301      	movs	r3, #1
 80057c8:	61bb      	str	r3, [r7, #24]
 80057ca:	e010      	b.n	80057ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689b      	ldr	r3, [r3, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10c      	bne.n	80057ee <osThreadNew+0xca>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d108      	bne.n	80057ee <osThreadNew+0xca>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d104      	bne.n	80057ee <osThreadNew+0xca>
          mem = 0;
 80057e4:	2300      	movs	r3, #0
 80057e6:	61bb      	str	r3, [r7, #24]
 80057e8:	e001      	b.n	80057ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d110      	bne.n	8005816 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80057f8:	687a      	ldr	r2, [r7, #4]
 80057fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80057fc:	9202      	str	r2, [sp, #8]
 80057fe:	9301      	str	r3, [sp, #4]
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	6a3a      	ldr	r2, [r7, #32]
 8005808:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f001 f8c8 	bl	80069a0 <xTaskCreateStatic>
 8005810:	4603      	mov	r3, r0
 8005812:	613b      	str	r3, [r7, #16]
 8005814:	e013      	b.n	800583e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d110      	bne.n	800583e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	b29a      	uxth	r2, r3
 8005820:	f107 0310 	add.w	r3, r7, #16
 8005824:	9301      	str	r3, [sp, #4]
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800582e:	68f8      	ldr	r0, [r7, #12]
 8005830:	f001 f913 	bl	8006a5a <xTaskCreate>
 8005834:	4603      	mov	r3, r0
 8005836:	2b01      	cmp	r3, #1
 8005838:	d001      	beq.n	800583e <osThreadNew+0x11a>
            hTask = NULL;
 800583a:	2300      	movs	r3, #0
 800583c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800583e:	693b      	ldr	r3, [r7, #16]
}
 8005840:	4618      	mov	r0, r3
 8005842:	3728      	adds	r7, #40	; 0x28
 8005844:	46bd      	mov	sp, r7
 8005846:	bd80      	pop	{r7, pc}

08005848 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800584e:	f3ef 8305 	mrs	r3, IPSR
 8005852:	603b      	str	r3, [r7, #0]
  return(result);
 8005854:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <osThreadYield+0x1a>
    stat = osErrorISR;
 800585a:	f06f 0305 	mvn.w	r3, #5
 800585e:	607b      	str	r3, [r7, #4]
 8005860:	e009      	b.n	8005876 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8005862:	2300      	movs	r3, #0
 8005864:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8005866:	4b07      	ldr	r3, [pc, #28]	; (8005884 <osThreadYield+0x3c>)
 8005868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800586c:	601a      	str	r2, [r3, #0]
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8005876:	687b      	ldr	r3, [r7, #4]
}
 8005878:	4618      	mov	r0, r3
 800587a:	370c      	adds	r7, #12
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr
 8005884:	e000ed04 	.word	0xe000ed04

08005888 <osThreadResume>:
  }

  return (stat);
}

osStatus_t osThreadResume (osThreadId_t thread_id) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b086      	sub	sp, #24
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005894:	f3ef 8305 	mrs	r3, IPSR
 8005898:	60fb      	str	r3, [r7, #12]
  return(result);
 800589a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <osThreadResume+0x20>
    stat = osErrorISR;
 80058a0:	f06f 0305 	mvn.w	r3, #5
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	e00b      	b.n	80058c0 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d103      	bne.n	80058b6 <osThreadResume+0x2e>
    stat = osErrorParameter;
 80058ae:	f06f 0303 	mvn.w	r3, #3
 80058b2:	617b      	str	r3, [r7, #20]
 80058b4:	e004      	b.n	80058c0 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80058b6:	2300      	movs	r3, #0
 80058b8:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80058ba:	6938      	ldr	r0, [r7, #16]
 80058bc:	f001 fa8e 	bl	8006ddc <vTaskResume>
  }

  return (stat);
 80058c0:	697b      	ldr	r3, [r7, #20]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3718      	adds	r7, #24
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058d2:	f3ef 8305 	mrs	r3, IPSR
 80058d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80058d8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d003      	beq.n	80058e6 <osDelay+0x1c>
    stat = osErrorISR;
 80058de:	f06f 0305 	mvn.w	r3, #5
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	e007      	b.n	80058f6 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80058e6:	2300      	movs	r3, #0
 80058e8:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <osDelay+0x2c>
      vTaskDelay(ticks);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 fa0d 	bl	8006d10 <vTaskDelay>
    }
  }

  return (stat);
 80058f6:	68fb      	ldr	r3, [r7, #12]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8005908:	2300      	movs	r3, #0
 800590a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800590c:	f3ef 8305 	mrs	r3, IPSR
 8005910:	60fb      	str	r3, [r7, #12]
  return(result);
 8005912:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8005914:	2b00      	cmp	r3, #0
 8005916:	d12d      	bne.n	8005974 <osEventFlagsNew+0x74>
    mem = -1;
 8005918:	f04f 33ff 	mov.w	r3, #4294967295
 800591c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d015      	beq.n	8005950 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d006      	beq.n	800593a <osEventFlagsNew+0x3a>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2b1f      	cmp	r3, #31
 8005932:	d902      	bls.n	800593a <osEventFlagsNew+0x3a>
        mem = 1;
 8005934:	2301      	movs	r3, #1
 8005936:	613b      	str	r3, [r7, #16]
 8005938:	e00c      	b.n	8005954 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d108      	bne.n	8005954 <osEventFlagsNew+0x54>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d104      	bne.n	8005954 <osEventFlagsNew+0x54>
          mem = 0;
 800594a:	2300      	movs	r3, #0
 800594c:	613b      	str	r3, [r7, #16]
 800594e:	e001      	b.n	8005954 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8005950:	2300      	movs	r3, #0
 8005952:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	2b01      	cmp	r3, #1
 8005958:	d106      	bne.n	8005968 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	4618      	mov	r0, r3
 8005960:	f000 f972 	bl	8005c48 <xEventGroupCreateStatic>
 8005964:	6178      	str	r0, [r7, #20]
 8005966:	e005      	b.n	8005974 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d102      	bne.n	8005974 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800596e:	f000 f9a2 	bl	8005cb6 <xEventGroupCreate>
 8005972:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8005974:	697b      	ldr	r3, [r7, #20]
}
 8005976:	4618      	mov	r0, r3
 8005978:	3718      	adds	r7, #24
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800597e:	b580      	push	{r7, lr}
 8005980:	b08a      	sub	sp, #40	; 0x28
 8005982:	af02      	add	r7, sp, #8
 8005984:	60f8      	str	r0, [r7, #12]
 8005986:	60b9      	str	r1, [r7, #8]
 8005988:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800598a:	2300      	movs	r3, #0
 800598c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800598e:	f3ef 8305 	mrs	r3, IPSR
 8005992:	613b      	str	r3, [r7, #16]
  return(result);
 8005994:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005996:	2b00      	cmp	r3, #0
 8005998:	d15f      	bne.n	8005a5a <osMessageQueueNew+0xdc>
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d05c      	beq.n	8005a5a <osMessageQueueNew+0xdc>
 80059a0:	68bb      	ldr	r3, [r7, #8]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d059      	beq.n	8005a5a <osMessageQueueNew+0xdc>
    mem = -1;
 80059a6:	f04f 33ff 	mov.w	r3, #4294967295
 80059aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d029      	beq.n	8005a06 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d012      	beq.n	80059e0 <osMessageQueueNew+0x62>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	68db      	ldr	r3, [r3, #12]
 80059be:	2b4f      	cmp	r3, #79	; 0x4f
 80059c0:	d90e      	bls.n	80059e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695a      	ldr	r2, [r3, #20]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	68b9      	ldr	r1, [r7, #8]
 80059d2:	fb01 f303 	mul.w	r3, r1, r3
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d302      	bcc.n	80059e0 <osMessageQueueNew+0x62>
        mem = 1;
 80059da:	2301      	movs	r3, #1
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	e014      	b.n	8005a0a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d110      	bne.n	8005a0a <osMessageQueueNew+0x8c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10c      	bne.n	8005a0a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d108      	bne.n	8005a0a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d104      	bne.n	8005a0a <osMessageQueueNew+0x8c>
          mem = 0;
 8005a00:	2300      	movs	r3, #0
 8005a02:	61bb      	str	r3, [r7, #24]
 8005a04:	e001      	b.n	8005a0a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005a06:	2300      	movs	r3, #0
 8005a08:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d10b      	bne.n	8005a28 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	2100      	movs	r1, #0
 8005a1a:	9100      	str	r1, [sp, #0]
 8005a1c:	68b9      	ldr	r1, [r7, #8]
 8005a1e:	68f8      	ldr	r0, [r7, #12]
 8005a20:	f000 fa80 	bl	8005f24 <xQueueGenericCreateStatic>
 8005a24:	61f8      	str	r0, [r7, #28]
 8005a26:	e008      	b.n	8005a3a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005a28:	69bb      	ldr	r3, [r7, #24]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d105      	bne.n	8005a3a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005a2e:	2200      	movs	r2, #0
 8005a30:	68b9      	ldr	r1, [r7, #8]
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 faee 	bl	8006014 <xQueueGenericCreate>
 8005a38:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00c      	beq.n	8005a5a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	617b      	str	r3, [r7, #20]
 8005a4c:	e001      	b.n	8005a52 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005a52:	6979      	ldr	r1, [r7, #20]
 8005a54:	69f8      	ldr	r0, [r7, #28]
 8005a56:	f000 ff45 	bl	80068e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005a5a:	69fb      	ldr	r3, [r7, #28]
}
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	3720      	adds	r7, #32
 8005a60:	46bd      	mov	sp, r7
 8005a62:	bd80      	pop	{r7, pc}

08005a64 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	603b      	str	r3, [r7, #0]
 8005a70:	4613      	mov	r3, r2
 8005a72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a7c:	f3ef 8305 	mrs	r3, IPSR
 8005a80:	617b      	str	r3, [r7, #20]
  return(result);
 8005a82:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d028      	beq.n	8005ada <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d005      	beq.n	8005a9a <osMessageQueuePut+0x36>
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <osMessageQueuePut+0x36>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d003      	beq.n	8005aa2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005a9a:	f06f 0303 	mvn.w	r3, #3
 8005a9e:	61fb      	str	r3, [r7, #28]
 8005aa0:	e038      	b.n	8005b14 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8005aa6:	f107 0210 	add.w	r2, r7, #16
 8005aaa:	2300      	movs	r3, #0
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	69b8      	ldr	r0, [r7, #24]
 8005ab0:	f000 fc0c 	bl	80062cc <xQueueGenericSendFromISR>
 8005ab4:	4603      	mov	r3, r0
 8005ab6:	2b01      	cmp	r3, #1
 8005ab8:	d003      	beq.n	8005ac2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005aba:	f06f 0302 	mvn.w	r3, #2
 8005abe:	61fb      	str	r3, [r7, #28]
 8005ac0:	e028      	b.n	8005b14 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d025      	beq.n	8005b14 <osMessageQueuePut+0xb0>
 8005ac8:	4b15      	ldr	r3, [pc, #84]	; (8005b20 <osMessageQueuePut+0xbc>)
 8005aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f6f 	isb	sy
 8005ad8:	e01c      	b.n	8005b14 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <osMessageQueuePut+0x82>
 8005ae0:	68bb      	ldr	r3, [r7, #8]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d103      	bne.n	8005aee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8005ae6:	f06f 0303 	mvn.w	r3, #3
 8005aea:	61fb      	str	r3, [r7, #28]
 8005aec:	e012      	b.n	8005b14 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005aee:	2300      	movs	r3, #0
 8005af0:	683a      	ldr	r2, [r7, #0]
 8005af2:	68b9      	ldr	r1, [r7, #8]
 8005af4:	69b8      	ldr	r0, [r7, #24]
 8005af6:	f000 faeb 	bl	80060d0 <xQueueGenericSend>
 8005afa:	4603      	mov	r3, r0
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d009      	beq.n	8005b14 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8005b06:	f06f 0301 	mvn.w	r3, #1
 8005b0a:	61fb      	str	r3, [r7, #28]
 8005b0c:	e002      	b.n	8005b14 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005b0e:	f06f 0302 	mvn.w	r3, #2
 8005b12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005b14:	69fb      	ldr	r3, [r7, #28]
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3720      	adds	r7, #32
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	e000ed04 	.word	0xe000ed04

08005b24 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b088      	sub	sp, #32
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	60b9      	str	r1, [r7, #8]
 8005b2e:	607a      	str	r2, [r7, #4]
 8005b30:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b3a:	f3ef 8305 	mrs	r3, IPSR
 8005b3e:	617b      	str	r3, [r7, #20]
  return(result);
 8005b40:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d028      	beq.n	8005b98 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d005      	beq.n	8005b58 <osMessageQueueGet+0x34>
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d002      	beq.n	8005b58 <osMessageQueueGet+0x34>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d003      	beq.n	8005b60 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005b58:	f06f 0303 	mvn.w	r3, #3
 8005b5c:	61fb      	str	r3, [r7, #28]
 8005b5e:	e037      	b.n	8005bd0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005b64:	f107 0310 	add.w	r3, r7, #16
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68b9      	ldr	r1, [r7, #8]
 8005b6c:	69b8      	ldr	r0, [r7, #24]
 8005b6e:	f000 fd29 	bl	80065c4 <xQueueReceiveFromISR>
 8005b72:	4603      	mov	r3, r0
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d003      	beq.n	8005b80 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005b78:	f06f 0302 	mvn.w	r3, #2
 8005b7c:	61fb      	str	r3, [r7, #28]
 8005b7e:	e027      	b.n	8005bd0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d024      	beq.n	8005bd0 <osMessageQueueGet+0xac>
 8005b86:	4b15      	ldr	r3, [pc, #84]	; (8005bdc <osMessageQueueGet+0xb8>)
 8005b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b8c:	601a      	str	r2, [r3, #0]
 8005b8e:	f3bf 8f4f 	dsb	sy
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	e01b      	b.n	8005bd0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d002      	beq.n	8005ba4 <osMessageQueueGet+0x80>
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d103      	bne.n	8005bac <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005ba4:	f06f 0303 	mvn.w	r3, #3
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	e011      	b.n	8005bd0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005bac:	683a      	ldr	r2, [r7, #0]
 8005bae:	68b9      	ldr	r1, [r7, #8]
 8005bb0:	69b8      	ldr	r0, [r7, #24]
 8005bb2:	f000 fc27 	bl	8006404 <xQueueReceive>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d009      	beq.n	8005bd0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005bc2:	f06f 0301 	mvn.w	r3, #1
 8005bc6:	61fb      	str	r3, [r7, #28]
 8005bc8:	e002      	b.n	8005bd0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005bca:	f06f 0302 	mvn.w	r3, #2
 8005bce:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005bd0:	69fb      	ldr	r3, [r7, #28]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	e000ed04 	.word	0xe000ed04

08005be0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005be0:	b480      	push	{r7}
 8005be2:	b085      	sub	sp, #20
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	60f8      	str	r0, [r7, #12]
 8005be8:	60b9      	str	r1, [r7, #8]
 8005bea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4a07      	ldr	r2, [pc, #28]	; (8005c0c <vApplicationGetIdleTaskMemory+0x2c>)
 8005bf0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	4a06      	ldr	r2, [pc, #24]	; (8005c10 <vApplicationGetIdleTaskMemory+0x30>)
 8005bf6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2280      	movs	r2, #128	; 0x80
 8005bfc:	601a      	str	r2, [r3, #0]
}
 8005bfe:	bf00      	nop
 8005c00:	3714      	adds	r7, #20
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	2000028c 	.word	0x2000028c
 8005c10:	20000348 	.word	0x20000348

08005c14 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	60f8      	str	r0, [r7, #12]
 8005c1c:	60b9      	str	r1, [r7, #8]
 8005c1e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4a07      	ldr	r2, [pc, #28]	; (8005c40 <vApplicationGetTimerTaskMemory+0x2c>)
 8005c24:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	4a06      	ldr	r2, [pc, #24]	; (8005c44 <vApplicationGetTimerTaskMemory+0x30>)
 8005c2a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005c32:	601a      	str	r2, [r3, #0]
}
 8005c34:	bf00      	nop
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr
 8005c40:	20000548 	.word	0x20000548
 8005c44:	20000604 	.word	0x20000604

08005c48 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b086      	sub	sp, #24
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005c6c:	2320      	movs	r3, #32
 8005c6e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b20      	cmp	r3, #32
 8005c74:	d00a      	beq.n	8005c8c <xEventGroupCreateStatic+0x44>
	__asm volatile
 8005c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7a:	f383 8811 	msr	BASEPRI, r3
 8005c7e:	f3bf 8f6f 	isb	sy
 8005c82:	f3bf 8f4f 	dsb	sy
 8005c86:	60fb      	str	r3, [r7, #12]
}
 8005c88:	bf00      	nop
 8005c8a:	e7fe      	b.n	8005c8a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00a      	beq.n	8005cac <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f000 f822 	bl	8005cea <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005cac:	697b      	ldr	r3, [r7, #20]
	}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b082      	sub	sp, #8
 8005cba:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005cbc:	2020      	movs	r0, #32
 8005cbe:	f002 fbc3 	bl	8008448 <pvPortMalloc>
 8005cc2:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00a      	beq.n	8005ce0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 f808 	bl	8005cea <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005ce0:	687b      	ldr	r3, [r7, #4]
	}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005cea:	b480      	push	{r7}
 8005cec:	b083      	sub	sp, #12
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f103 0208 	add.w	r2, r3, #8
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005d02:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f103 0208 	add.w	r2, r3, #8
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f103 0208 	add.w	r2, r3, #8
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005d1e:	bf00      	nop
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr

08005d2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005d2a:	b480      	push	{r7}
 8005d2c:	b083      	sub	sp, #12
 8005d2e:	af00      	add	r7, sp, #0
 8005d30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	68fa      	ldr	r2, [r7, #12]
 8005d58:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689a      	ldr	r2, [r3, #8]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	683a      	ldr	r2, [r7, #0]
 8005d68:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	683a      	ldr	r2, [r7, #0]
 8005d6e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	1c5a      	adds	r2, r3, #1
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	601a      	str	r2, [r3, #0]
}
 8005d80:	bf00      	nop
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr

08005d8c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	d103      	bne.n	8005dac <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	e00c      	b.n	8005dc6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	3308      	adds	r3, #8
 8005db0:	60fb      	str	r3, [r7, #12]
 8005db2:	e002      	b.n	8005dba <vListInsert+0x2e>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d2f6      	bcs.n	8005db4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	683a      	ldr	r2, [r7, #0]
 8005dd4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	683a      	ldr	r2, [r7, #0]
 8005de0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	601a      	str	r2, [r3, #0]
}
 8005df2:	bf00      	nop
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	691b      	ldr	r3, [r3, #16]
 8005e0a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6892      	ldr	r2, [r2, #8]
 8005e14:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	6852      	ldr	r2, [r2, #4]
 8005e1e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d103      	bne.n	8005e32 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	689a      	ldr	r2, [r3, #8]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	1e5a      	subs	r2, r3, #1
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
	...

08005e54 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b084      	sub	sp, #16
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10a      	bne.n	8005e7e <xQueueGenericReset+0x2a>
	__asm volatile
 8005e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e6c:	f383 8811 	msr	BASEPRI, r3
 8005e70:	f3bf 8f6f 	isb	sy
 8005e74:	f3bf 8f4f 	dsb	sy
 8005e78:	60bb      	str	r3, [r7, #8]
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005e7e:	f002 f9c1 	bl	8008204 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e8a:	68f9      	ldr	r1, [r7, #12]
 8005e8c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005e8e:	fb01 f303 	mul.w	r3, r1, r3
 8005e92:	441a      	add	r2, r3
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	68f9      	ldr	r1, [r7, #12]
 8005eb2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005eb4:	fb01 f303 	mul.w	r3, r1, r3
 8005eb8:	441a      	add	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	22ff      	movs	r2, #255	; 0xff
 8005ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	22ff      	movs	r2, #255	; 0xff
 8005eca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d114      	bne.n	8005efe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d01a      	beq.n	8005f12 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3310      	adds	r3, #16
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f001 fa73 	bl	80073cc <xTaskRemoveFromEventList>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d012      	beq.n	8005f12 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005eec:	4b0c      	ldr	r3, [pc, #48]	; (8005f20 <xQueueGenericReset+0xcc>)
 8005eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	e009      	b.n	8005f12 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3310      	adds	r3, #16
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff fef1 	bl	8005cea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3324      	adds	r3, #36	; 0x24
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff feec 	bl	8005cea <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005f12:	f002 f9a7 	bl	8008264 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005f16:	2301      	movs	r3, #1
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3710      	adds	r7, #16
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	e000ed04 	.word	0xe000ed04

08005f24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08e      	sub	sp, #56	; 0x38
 8005f28:	af02      	add	r7, sp, #8
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d10a      	bne.n	8005f4e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f3c:	f383 8811 	msr	BASEPRI, r3
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	f3bf 8f4f 	dsb	sy
 8005f48:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005f4a:	bf00      	nop
 8005f4c:	e7fe      	b.n	8005f4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d10a      	bne.n	8005f6a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f58:	f383 8811 	msr	BASEPRI, r3
 8005f5c:	f3bf 8f6f 	isb	sy
 8005f60:	f3bf 8f4f 	dsb	sy
 8005f64:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005f66:	bf00      	nop
 8005f68:	e7fe      	b.n	8005f68 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <xQueueGenericCreateStatic+0x52>
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <xQueueGenericCreateStatic+0x56>
 8005f76:	2301      	movs	r3, #1
 8005f78:	e000      	b.n	8005f7c <xQueueGenericCreateStatic+0x58>
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f84:	f383 8811 	msr	BASEPRI, r3
 8005f88:	f3bf 8f6f 	isb	sy
 8005f8c:	f3bf 8f4f 	dsb	sy
 8005f90:	623b      	str	r3, [r7, #32]
}
 8005f92:	bf00      	nop
 8005f94:	e7fe      	b.n	8005f94 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d102      	bne.n	8005fa2 <xQueueGenericCreateStatic+0x7e>
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <xQueueGenericCreateStatic+0x82>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e000      	b.n	8005fa8 <xQueueGenericCreateStatic+0x84>
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d10a      	bne.n	8005fc2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb0:	f383 8811 	msr	BASEPRI, r3
 8005fb4:	f3bf 8f6f 	isb	sy
 8005fb8:	f3bf 8f4f 	dsb	sy
 8005fbc:	61fb      	str	r3, [r7, #28]
}
 8005fbe:	bf00      	nop
 8005fc0:	e7fe      	b.n	8005fc0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005fc2:	2350      	movs	r3, #80	; 0x50
 8005fc4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	2b50      	cmp	r3, #80	; 0x50
 8005fca:	d00a      	beq.n	8005fe2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fd0:	f383 8811 	msr	BASEPRI, r3
 8005fd4:	f3bf 8f6f 	isb	sy
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	61bb      	str	r3, [r7, #24]
}
 8005fde:	bf00      	nop
 8005fe0:	e7fe      	b.n	8005fe0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005fe2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d00d      	beq.n	800600a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ff6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffc:	9300      	str	r3, [sp, #0]
 8005ffe:	4613      	mov	r3, r2
 8006000:	687a      	ldr	r2, [r7, #4]
 8006002:	68b9      	ldr	r1, [r7, #8]
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f83f 	bl	8006088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800600a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800600c:	4618      	mov	r0, r3
 800600e:	3730      	adds	r7, #48	; 0x30
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <xQueueGenericCreate+0x2a>
	__asm volatile
 8006028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800602c:	f383 8811 	msr	BASEPRI, r3
 8006030:	f3bf 8f6f 	isb	sy
 8006034:	f3bf 8f4f 	dsb	sy
 8006038:	613b      	str	r3, [r7, #16]
}
 800603a:	bf00      	nop
 800603c:	e7fe      	b.n	800603c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	fb02 f303 	mul.w	r3, r2, r3
 8006046:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006048:	69fb      	ldr	r3, [r7, #28]
 800604a:	3350      	adds	r3, #80	; 0x50
 800604c:	4618      	mov	r0, r3
 800604e:	f002 f9fb 	bl	8008448 <pvPortMalloc>
 8006052:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d011      	beq.n	800607e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	3350      	adds	r3, #80	; 0x50
 8006062:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2200      	movs	r2, #0
 8006068:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800606c:	79fa      	ldrb	r2, [r7, #7]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	9300      	str	r3, [sp, #0]
 8006072:	4613      	mov	r3, r2
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	68b9      	ldr	r1, [r7, #8]
 8006078:	68f8      	ldr	r0, [r7, #12]
 800607a:	f000 f805 	bl	8006088 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800607e:	69bb      	ldr	r3, [r7, #24]
	}
 8006080:	4618      	mov	r0, r3
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d103      	bne.n	80060a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800609c:	69bb      	ldr	r3, [r7, #24]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e002      	b.n	80060aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80060b0:	69bb      	ldr	r3, [r7, #24]
 80060b2:	68ba      	ldr	r2, [r7, #8]
 80060b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80060b6:	2101      	movs	r1, #1
 80060b8:	69b8      	ldr	r0, [r7, #24]
 80060ba:	f7ff fecb 	bl	8005e54 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	78fa      	ldrb	r2, [r7, #3]
 80060c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80060c6:	bf00      	nop
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
	...

080060d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08e      	sub	sp, #56	; 0x38
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	60f8      	str	r0, [r7, #12]
 80060d8:	60b9      	str	r1, [r7, #8]
 80060da:	607a      	str	r2, [r7, #4]
 80060dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80060de:	2300      	movs	r3, #0
 80060e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10a      	bne.n	8006102 <xQueueGenericSend+0x32>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d103      	bne.n	8006110 <xQueueGenericSend+0x40>
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	2b00      	cmp	r3, #0
 800610e:	d101      	bne.n	8006114 <xQueueGenericSend+0x44>
 8006110:	2301      	movs	r3, #1
 8006112:	e000      	b.n	8006116 <xQueueGenericSend+0x46>
 8006114:	2300      	movs	r3, #0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10a      	bne.n	8006130 <xQueueGenericSend+0x60>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800612c:	bf00      	nop
 800612e:	e7fe      	b.n	800612e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	2b02      	cmp	r3, #2
 8006134:	d103      	bne.n	800613e <xQueueGenericSend+0x6e>
 8006136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613a:	2b01      	cmp	r3, #1
 800613c:	d101      	bne.n	8006142 <xQueueGenericSend+0x72>
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <xQueueGenericSend+0x74>
 8006142:	2300      	movs	r3, #0
 8006144:	2b00      	cmp	r3, #0
 8006146:	d10a      	bne.n	800615e <xQueueGenericSend+0x8e>
	__asm volatile
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	623b      	str	r3, [r7, #32]
}
 800615a:	bf00      	nop
 800615c:	e7fe      	b.n	800615c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800615e:	f001 faf7 	bl	8007750 <xTaskGetSchedulerState>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d102      	bne.n	800616e <xQueueGenericSend+0x9e>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d101      	bne.n	8006172 <xQueueGenericSend+0xa2>
 800616e:	2301      	movs	r3, #1
 8006170:	e000      	b.n	8006174 <xQueueGenericSend+0xa4>
 8006172:	2300      	movs	r3, #0
 8006174:	2b00      	cmp	r3, #0
 8006176:	d10a      	bne.n	800618e <xQueueGenericSend+0xbe>
	__asm volatile
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	61fb      	str	r3, [r7, #28]
}
 800618a:	bf00      	nop
 800618c:	e7fe      	b.n	800618c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800618e:	f002 f839 	bl	8008204 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006194:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619a:	429a      	cmp	r2, r3
 800619c:	d302      	bcc.n	80061a4 <xQueueGenericSend+0xd4>
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b02      	cmp	r3, #2
 80061a2:	d129      	bne.n	80061f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	68b9      	ldr	r1, [r7, #8]
 80061a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80061aa:	f000 fa8b 	bl	80066c4 <prvCopyDataToQueue>
 80061ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d010      	beq.n	80061da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ba:	3324      	adds	r3, #36	; 0x24
 80061bc:	4618      	mov	r0, r3
 80061be:	f001 f905 	bl	80073cc <xTaskRemoveFromEventList>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d013      	beq.n	80061f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80061c8:	4b3f      	ldr	r3, [pc, #252]	; (80062c8 <xQueueGenericSend+0x1f8>)
 80061ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ce:	601a      	str	r2, [r3, #0]
 80061d0:	f3bf 8f4f 	dsb	sy
 80061d4:	f3bf 8f6f 	isb	sy
 80061d8:	e00a      	b.n	80061f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80061da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d007      	beq.n	80061f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80061e0:	4b39      	ldr	r3, [pc, #228]	; (80062c8 <xQueueGenericSend+0x1f8>)
 80061e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e6:	601a      	str	r2, [r3, #0]
 80061e8:	f3bf 8f4f 	dsb	sy
 80061ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80061f0:	f002 f838 	bl	8008264 <vPortExitCritical>
				return pdPASS;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e063      	b.n	80062c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80061fe:	f002 f831 	bl	8008264 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006202:	2300      	movs	r3, #0
 8006204:	e05c      	b.n	80062c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006208:	2b00      	cmp	r3, #0
 800620a:	d106      	bne.n	800621a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800620c:	f107 0314 	add.w	r3, r7, #20
 8006210:	4618      	mov	r0, r3
 8006212:	f001 f93f 	bl	8007494 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006216:	2301      	movs	r3, #1
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800621a:	f002 f823 	bl	8008264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800621e:	f000 feab 	bl	8006f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006222:	f001 ffef 	bl	8008204 <vPortEnterCritical>
 8006226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006228:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800622c:	b25b      	sxtb	r3, r3
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d103      	bne.n	800623c <xQueueGenericSend+0x16c>
 8006234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006236:	2200      	movs	r2, #0
 8006238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800623c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800623e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006242:	b25b      	sxtb	r3, r3
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d103      	bne.n	8006252 <xQueueGenericSend+0x182>
 800624a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800624c:	2200      	movs	r2, #0
 800624e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006252:	f002 f807 	bl	8008264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006256:	1d3a      	adds	r2, r7, #4
 8006258:	f107 0314 	add.w	r3, r7, #20
 800625c:	4611      	mov	r1, r2
 800625e:	4618      	mov	r0, r3
 8006260:	f001 f92e 	bl	80074c0 <xTaskCheckForTimeOut>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d124      	bne.n	80062b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800626a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800626c:	f000 fb22 	bl	80068b4 <prvIsQueueFull>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d018      	beq.n	80062a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	3310      	adds	r3, #16
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	4611      	mov	r1, r2
 800627e:	4618      	mov	r0, r3
 8006280:	f001 f854 	bl	800732c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006284:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006286:	f000 faad 	bl	80067e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800628a:	f000 fe83 	bl	8006f94 <xTaskResumeAll>
 800628e:	4603      	mov	r3, r0
 8006290:	2b00      	cmp	r3, #0
 8006292:	f47f af7c 	bne.w	800618e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006296:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <xQueueGenericSend+0x1f8>)
 8006298:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800629c:	601a      	str	r2, [r3, #0]
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	f3bf 8f6f 	isb	sy
 80062a6:	e772      	b.n	800618e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80062a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062aa:	f000 fa9b 	bl	80067e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80062ae:	f000 fe71 	bl	8006f94 <xTaskResumeAll>
 80062b2:	e76c      	b.n	800618e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80062b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80062b6:	f000 fa95 	bl	80067e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80062ba:	f000 fe6b 	bl	8006f94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80062be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3738      	adds	r7, #56	; 0x38
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	e000ed04 	.word	0xe000ed04

080062cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b090      	sub	sp, #64	; 0x40
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80062de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80062e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062e8:	f383 8811 	msr	BASEPRI, r3
 80062ec:	f3bf 8f6f 	isb	sy
 80062f0:	f3bf 8f4f 	dsb	sy
 80062f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80062f6:	bf00      	nop
 80062f8:	e7fe      	b.n	80062f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <xQueueGenericSendFromISR+0x3c>
 8006300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <xQueueGenericSendFromISR+0x40>
 8006308:	2301      	movs	r3, #1
 800630a:	e000      	b.n	800630e <xQueueGenericSendFromISR+0x42>
 800630c:	2300      	movs	r3, #0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d10a      	bne.n	8006328 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006324:	bf00      	nop
 8006326:	e7fe      	b.n	8006326 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	2b02      	cmp	r3, #2
 800632c:	d103      	bne.n	8006336 <xQueueGenericSendFromISR+0x6a>
 800632e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006332:	2b01      	cmp	r3, #1
 8006334:	d101      	bne.n	800633a <xQueueGenericSendFromISR+0x6e>
 8006336:	2301      	movs	r3, #1
 8006338:	e000      	b.n	800633c <xQueueGenericSendFromISR+0x70>
 800633a:	2300      	movs	r3, #0
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10a      	bne.n	8006356 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006340:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006344:	f383 8811 	msr	BASEPRI, r3
 8006348:	f3bf 8f6f 	isb	sy
 800634c:	f3bf 8f4f 	dsb	sy
 8006350:	623b      	str	r3, [r7, #32]
}
 8006352:	bf00      	nop
 8006354:	e7fe      	b.n	8006354 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006356:	f002 f837 	bl	80083c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800635a:	f3ef 8211 	mrs	r2, BASEPRI
 800635e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006362:	f383 8811 	msr	BASEPRI, r3
 8006366:	f3bf 8f6f 	isb	sy
 800636a:	f3bf 8f4f 	dsb	sy
 800636e:	61fa      	str	r2, [r7, #28]
 8006370:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006372:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006374:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006378:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800637a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637e:	429a      	cmp	r2, r3
 8006380:	d302      	bcc.n	8006388 <xQueueGenericSendFromISR+0xbc>
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d12f      	bne.n	80063e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800638a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800638e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006392:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006396:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006398:	683a      	ldr	r2, [r7, #0]
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800639e:	f000 f991 	bl	80066c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80063a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80063a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063aa:	d112      	bne.n	80063d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80063ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d016      	beq.n	80063e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	3324      	adds	r3, #36	; 0x24
 80063b8:	4618      	mov	r0, r3
 80063ba:	f001 f807 	bl	80073cc <xTaskRemoveFromEventList>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d00e      	beq.n	80063e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00b      	beq.n	80063e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	e007      	b.n	80063e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80063d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063d6:	3301      	adds	r3, #1
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	b25a      	sxtb	r2, r3
 80063dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80063e2:	2301      	movs	r3, #1
 80063e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80063e6:	e001      	b.n	80063ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80063e8:	2300      	movs	r3, #0
 80063ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80063ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80063f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3740      	adds	r7, #64	; 0x40
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}
	...

08006404 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b08c      	sub	sp, #48	; 0x30
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006410:	2300      	movs	r3, #0
 8006412:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10a      	bne.n	8006434 <xQueueReceive+0x30>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	623b      	str	r3, [r7, #32]
}
 8006430:	bf00      	nop
 8006432:	e7fe      	b.n	8006432 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <xQueueReceive+0x3e>
 800643a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643e:	2b00      	cmp	r3, #0
 8006440:	d101      	bne.n	8006446 <xQueueReceive+0x42>
 8006442:	2301      	movs	r3, #1
 8006444:	e000      	b.n	8006448 <xQueueReceive+0x44>
 8006446:	2300      	movs	r3, #0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d10a      	bne.n	8006462 <xQueueReceive+0x5e>
	__asm volatile
 800644c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006450:	f383 8811 	msr	BASEPRI, r3
 8006454:	f3bf 8f6f 	isb	sy
 8006458:	f3bf 8f4f 	dsb	sy
 800645c:	61fb      	str	r3, [r7, #28]
}
 800645e:	bf00      	nop
 8006460:	e7fe      	b.n	8006460 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006462:	f001 f975 	bl	8007750 <xTaskGetSchedulerState>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d102      	bne.n	8006472 <xQueueReceive+0x6e>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <xQueueReceive+0x72>
 8006472:	2301      	movs	r3, #1
 8006474:	e000      	b.n	8006478 <xQueueReceive+0x74>
 8006476:	2300      	movs	r3, #0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d10a      	bne.n	8006492 <xQueueReceive+0x8e>
	__asm volatile
 800647c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006480:	f383 8811 	msr	BASEPRI, r3
 8006484:	f3bf 8f6f 	isb	sy
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	61bb      	str	r3, [r7, #24]
}
 800648e:	bf00      	nop
 8006490:	e7fe      	b.n	8006490 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006492:	f001 feb7 	bl	8008204 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800649a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800649c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d01f      	beq.n	80064e2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80064a2:	68b9      	ldr	r1, [r7, #8]
 80064a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064a6:	f000 f977 	bl	8006798 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80064aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ac:	1e5a      	subs	r2, r3, #1
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00f      	beq.n	80064da <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064bc:	3310      	adds	r3, #16
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 ff84 	bl	80073cc <xTaskRemoveFromEventList>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d007      	beq.n	80064da <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80064ca:	4b3d      	ldr	r3, [pc, #244]	; (80065c0 <xQueueReceive+0x1bc>)
 80064cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064d0:	601a      	str	r2, [r3, #0]
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80064da:	f001 fec3 	bl	8008264 <vPortExitCritical>
				return pdPASS;
 80064de:	2301      	movs	r3, #1
 80064e0:	e069      	b.n	80065b6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d103      	bne.n	80064f0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064e8:	f001 febc 	bl	8008264 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80064ec:	2300      	movs	r3, #0
 80064ee:	e062      	b.n	80065b6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d106      	bne.n	8006504 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064f6:	f107 0310 	add.w	r3, r7, #16
 80064fa:	4618      	mov	r0, r3
 80064fc:	f000 ffca 	bl	8007494 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006500:	2301      	movs	r3, #1
 8006502:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006504:	f001 feae 	bl	8008264 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006508:	f000 fd36 	bl	8006f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800650c:	f001 fe7a 	bl	8008204 <vPortEnterCritical>
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006516:	b25b      	sxtb	r3, r3
 8006518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651c:	d103      	bne.n	8006526 <xQueueReceive+0x122>
 800651e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006520:	2200      	movs	r2, #0
 8006522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800652c:	b25b      	sxtb	r3, r3
 800652e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006532:	d103      	bne.n	800653c <xQueueReceive+0x138>
 8006534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800653c:	f001 fe92 	bl	8008264 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006540:	1d3a      	adds	r2, r7, #4
 8006542:	f107 0310 	add.w	r3, r7, #16
 8006546:	4611      	mov	r1, r2
 8006548:	4618      	mov	r0, r3
 800654a:	f000 ffb9 	bl	80074c0 <xTaskCheckForTimeOut>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d123      	bne.n	800659c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006554:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006556:	f000 f997 	bl	8006888 <prvIsQueueEmpty>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d017      	beq.n	8006590 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	3324      	adds	r3, #36	; 0x24
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	4611      	mov	r1, r2
 8006568:	4618      	mov	r0, r3
 800656a:	f000 fedf 	bl	800732c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800656e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006570:	f000 f938 	bl	80067e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006574:	f000 fd0e 	bl	8006f94 <xTaskResumeAll>
 8006578:	4603      	mov	r3, r0
 800657a:	2b00      	cmp	r3, #0
 800657c:	d189      	bne.n	8006492 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800657e:	4b10      	ldr	r3, [pc, #64]	; (80065c0 <xQueueReceive+0x1bc>)
 8006580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	e780      	b.n	8006492 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006592:	f000 f927 	bl	80067e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006596:	f000 fcfd 	bl	8006f94 <xTaskResumeAll>
 800659a:	e77a      	b.n	8006492 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800659c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800659e:	f000 f921 	bl	80067e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065a2:	f000 fcf7 	bl	8006f94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80065a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065a8:	f000 f96e 	bl	8006888 <prvIsQueueEmpty>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f43f af6f 	beq.w	8006492 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80065b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3730      	adds	r7, #48	; 0x30
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}
 80065be:	bf00      	nop
 80065c0:	e000ed04 	.word	0xe000ed04

080065c4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08e      	sub	sp, #56	; 0x38
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d10a      	bne.n	80065f0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	623b      	str	r3, [r7, #32]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d103      	bne.n	80065fe <xQueueReceiveFromISR+0x3a>
 80065f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d101      	bne.n	8006602 <xQueueReceiveFromISR+0x3e>
 80065fe:	2301      	movs	r3, #1
 8006600:	e000      	b.n	8006604 <xQueueReceiveFromISR+0x40>
 8006602:	2300      	movs	r3, #0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8006608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800660c:	f383 8811 	msr	BASEPRI, r3
 8006610:	f3bf 8f6f 	isb	sy
 8006614:	f3bf 8f4f 	dsb	sy
 8006618:	61fb      	str	r3, [r7, #28]
}
 800661a:	bf00      	nop
 800661c:	e7fe      	b.n	800661c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800661e:	f001 fed3 	bl	80083c8 <vPortValidateInterruptPriority>
	__asm volatile
 8006622:	f3ef 8211 	mrs	r2, BASEPRI
 8006626:	f04f 0350 	mov.w	r3, #80	; 0x50
 800662a:	f383 8811 	msr	BASEPRI, r3
 800662e:	f3bf 8f6f 	isb	sy
 8006632:	f3bf 8f4f 	dsb	sy
 8006636:	61ba      	str	r2, [r7, #24]
 8006638:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800663a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800663c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006642:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	2b00      	cmp	r3, #0
 8006648:	d02f      	beq.n	80066aa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800664a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006658:	f000 f89e 	bl	8006798 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800665c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665e:	1e5a      	subs	r2, r3, #1
 8006660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006662:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006664:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666c:	d112      	bne.n	8006694 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	691b      	ldr	r3, [r3, #16]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d016      	beq.n	80066a4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	3310      	adds	r3, #16
 800667a:	4618      	mov	r0, r3
 800667c:	f000 fea6 	bl	80073cc <xTaskRemoveFromEventList>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00e      	beq.n	80066a4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2201      	movs	r2, #1
 8006690:	601a      	str	r2, [r3, #0]
 8006692:	e007      	b.n	80066a4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006698:	3301      	adds	r3, #1
 800669a:	b2db      	uxtb	r3, r3
 800669c:	b25a      	sxtb	r2, r3
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80066a4:	2301      	movs	r3, #1
 80066a6:	637b      	str	r3, [r7, #52]	; 0x34
 80066a8:	e001      	b.n	80066ae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
 80066ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	f383 8811 	msr	BASEPRI, r3
}
 80066b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3738      	adds	r7, #56	; 0x38
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80066d0:	2300      	movs	r3, #0
 80066d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10d      	bne.n	80066fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d14d      	bne.n	8006786 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f001 f84c 	bl	800778c <xTaskPriorityDisinherit>
 80066f4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	609a      	str	r2, [r3, #8]
 80066fc:	e043      	b.n	8006786 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d119      	bne.n	8006738 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6858      	ldr	r0, [r3, #4]
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670c:	461a      	mov	r2, r3
 800670e:	68b9      	ldr	r1, [r7, #8]
 8006710:	f002 f8aa 	bl	8008868 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671c:	441a      	add	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	685a      	ldr	r2, [r3, #4]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	429a      	cmp	r2, r3
 800672c:	d32b      	bcc.n	8006786 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	605a      	str	r2, [r3, #4]
 8006736:	e026      	b.n	8006786 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	68d8      	ldr	r0, [r3, #12]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006740:	461a      	mov	r2, r3
 8006742:	68b9      	ldr	r1, [r7, #8]
 8006744:	f002 f890 	bl	8008868 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	68da      	ldr	r2, [r3, #12]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	425b      	negs	r3, r3
 8006752:	441a      	add	r2, r3
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	68da      	ldr	r2, [r3, #12]
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d207      	bcs.n	8006774 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800676c:	425b      	negs	r3, r3
 800676e:	441a      	add	r2, r3
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d105      	bne.n	8006786 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d002      	beq.n	8006786 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	3b01      	subs	r3, #1
 8006784:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	1c5a      	adds	r2, r3, #1
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800678e:	697b      	ldr	r3, [r7, #20]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b082      	sub	sp, #8
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d018      	beq.n	80067dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	68da      	ldr	r2, [r3, #12]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b2:	441a      	add	r2, r3
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d303      	bcc.n	80067cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	68d9      	ldr	r1, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067d4:	461a      	mov	r2, r3
 80067d6:	6838      	ldr	r0, [r7, #0]
 80067d8:	f002 f846 	bl	8008868 <memcpy>
	}
}
 80067dc:	bf00      	nop
 80067de:	3708      	adds	r7, #8
 80067e0:	46bd      	mov	sp, r7
 80067e2:	bd80      	pop	{r7, pc}

080067e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b084      	sub	sp, #16
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80067ec:	f001 fd0a 	bl	8008204 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80067f8:	e011      	b.n	800681e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d012      	beq.n	8006828 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	3324      	adds	r3, #36	; 0x24
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fde0 	bl	80073cc <xTaskRemoveFromEventList>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006812:	f000 feb7 	bl	8007584 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006816:	7bfb      	ldrb	r3, [r7, #15]
 8006818:	3b01      	subs	r3, #1
 800681a:	b2db      	uxtb	r3, r3
 800681c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800681e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006822:	2b00      	cmp	r3, #0
 8006824:	dce9      	bgt.n	80067fa <prvUnlockQueue+0x16>
 8006826:	e000      	b.n	800682a <prvUnlockQueue+0x46>
					break;
 8006828:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	22ff      	movs	r2, #255	; 0xff
 800682e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006832:	f001 fd17 	bl	8008264 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006836:	f001 fce5 	bl	8008204 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006840:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006842:	e011      	b.n	8006868 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d012      	beq.n	8006872 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3310      	adds	r3, #16
 8006850:	4618      	mov	r0, r3
 8006852:	f000 fdbb 	bl	80073cc <xTaskRemoveFromEventList>
 8006856:	4603      	mov	r3, r0
 8006858:	2b00      	cmp	r3, #0
 800685a:	d001      	beq.n	8006860 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800685c:	f000 fe92 	bl	8007584 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	3b01      	subs	r3, #1
 8006864:	b2db      	uxtb	r3, r3
 8006866:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006868:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800686c:	2b00      	cmp	r3, #0
 800686e:	dce9      	bgt.n	8006844 <prvUnlockQueue+0x60>
 8006870:	e000      	b.n	8006874 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006872:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	22ff      	movs	r2, #255	; 0xff
 8006878:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800687c:	f001 fcf2 	bl	8008264 <vPortExitCritical>
}
 8006880:	bf00      	nop
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006890:	f001 fcb8 	bl	8008204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006898:	2b00      	cmp	r3, #0
 800689a:	d102      	bne.n	80068a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800689c:	2301      	movs	r3, #1
 800689e:	60fb      	str	r3, [r7, #12]
 80068a0:	e001      	b.n	80068a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80068a2:	2300      	movs	r3, #0
 80068a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068a6:	f001 fcdd 	bl	8008264 <vPortExitCritical>

	return xReturn;
 80068aa:	68fb      	ldr	r3, [r7, #12]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80068bc:	f001 fca2 	bl	8008204 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d102      	bne.n	80068d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80068cc:	2301      	movs	r3, #1
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	e001      	b.n	80068d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80068d6:	f001 fcc5 	bl	8008264 <vPortExitCritical>

	return xReturn;
 80068da:	68fb      	ldr	r3, [r7, #12]
}
 80068dc:	4618      	mov	r0, r3
 80068de:	3710      	adds	r7, #16
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80068e4:	b480      	push	{r7}
 80068e6:	b085      	sub	sp, #20
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80068ee:	2300      	movs	r3, #0
 80068f0:	60fb      	str	r3, [r7, #12]
 80068f2:	e014      	b.n	800691e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80068f4:	4a0f      	ldr	r2, [pc, #60]	; (8006934 <vQueueAddToRegistry+0x50>)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10b      	bne.n	8006918 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006900:	490c      	ldr	r1, [pc, #48]	; (8006934 <vQueueAddToRegistry+0x50>)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800690a:	4a0a      	ldr	r2, [pc, #40]	; (8006934 <vQueueAddToRegistry+0x50>)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	4413      	add	r3, r2
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006916:	e006      	b.n	8006926 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	3301      	adds	r3, #1
 800691c:	60fb      	str	r3, [r7, #12]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b07      	cmp	r3, #7
 8006922:	d9e7      	bls.n	80068f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006924:	bf00      	nop
 8006926:	bf00      	nop
 8006928:	3714      	adds	r7, #20
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr
 8006932:	bf00      	nop
 8006934:	20000a04 	.word	0x20000a04

08006938 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006948:	f001 fc5c 	bl	8008204 <vPortEnterCritical>
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006952:	b25b      	sxtb	r3, r3
 8006954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006958:	d103      	bne.n	8006962 <vQueueWaitForMessageRestricted+0x2a>
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2200      	movs	r2, #0
 800695e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006968:	b25b      	sxtb	r3, r3
 800696a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800696e:	d103      	bne.n	8006978 <vQueueWaitForMessageRestricted+0x40>
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006978:	f001 fc74 	bl	8008264 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006980:	2b00      	cmp	r3, #0
 8006982:	d106      	bne.n	8006992 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	3324      	adds	r3, #36	; 0x24
 8006988:	687a      	ldr	r2, [r7, #4]
 800698a:	68b9      	ldr	r1, [r7, #8]
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fcf1 	bl	8007374 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006992:	6978      	ldr	r0, [r7, #20]
 8006994:	f7ff ff26 	bl	80067e4 <prvUnlockQueue>
	}
 8006998:	bf00      	nop
 800699a:	3718      	adds	r7, #24
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08e      	sub	sp, #56	; 0x38
 80069a4:	af04      	add	r7, sp, #16
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80069ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d10a      	bne.n	80069ca <xTaskCreateStatic+0x2a>
	__asm volatile
 80069b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b8:	f383 8811 	msr	BASEPRI, r3
 80069bc:	f3bf 8f6f 	isb	sy
 80069c0:	f3bf 8f4f 	dsb	sy
 80069c4:	623b      	str	r3, [r7, #32]
}
 80069c6:	bf00      	nop
 80069c8:	e7fe      	b.n	80069c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <xTaskCreateStatic+0x46>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	61fb      	str	r3, [r7, #28]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069e6:	23bc      	movs	r3, #188	; 0xbc
 80069e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	2bbc      	cmp	r3, #188	; 0xbc
 80069ee:	d00a      	beq.n	8006a06 <xTaskCreateStatic+0x66>
	__asm volatile
 80069f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f4:	f383 8811 	msr	BASEPRI, r3
 80069f8:	f3bf 8f6f 	isb	sy
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	61bb      	str	r3, [r7, #24]
}
 8006a02:	bf00      	nop
 8006a04:	e7fe      	b.n	8006a04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006a06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d01e      	beq.n	8006a4c <xTaskCreateStatic+0xac>
 8006a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01b      	beq.n	8006a4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006a14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a20:	2202      	movs	r2, #2
 8006a22:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a26:	2300      	movs	r3, #0
 8006a28:	9303      	str	r3, [sp, #12]
 8006a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2c:	9302      	str	r3, [sp, #8]
 8006a2e:	f107 0314 	add.w	r3, r7, #20
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	68b9      	ldr	r1, [r7, #8]
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	f000 f850 	bl	8006ae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a46:	f000 f8f3 	bl	8006c30 <prvAddNewTaskToReadyList>
 8006a4a:	e001      	b.n	8006a50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a50:	697b      	ldr	r3, [r7, #20]
	}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3728      	adds	r7, #40	; 0x28
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b08c      	sub	sp, #48	; 0x30
 8006a5e:	af04      	add	r7, sp, #16
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	603b      	str	r3, [r7, #0]
 8006a66:	4613      	mov	r3, r2
 8006a68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a6a:	88fb      	ldrh	r3, [r7, #6]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f001 fcea 	bl	8008448 <pvPortMalloc>
 8006a74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d00e      	beq.n	8006a9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a7c:	20bc      	movs	r0, #188	; 0xbc
 8006a7e:	f001 fce3 	bl	8008448 <pvPortMalloc>
 8006a82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	631a      	str	r2, [r3, #48]	; 0x30
 8006a90:	e005      	b.n	8006a9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a92:	6978      	ldr	r0, [r7, #20]
 8006a94:	f001 fda4 	bl	80085e0 <vPortFree>
 8006a98:	e001      	b.n	8006a9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d017      	beq.n	8006ad4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006aac:	88fa      	ldrh	r2, [r7, #6]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9303      	str	r3, [sp, #12]
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	9302      	str	r3, [sp, #8]
 8006ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab8:	9301      	str	r3, [sp, #4]
 8006aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68b9      	ldr	r1, [r7, #8]
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 f80e 	bl	8006ae4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006ac8:	69f8      	ldr	r0, [r7, #28]
 8006aca:	f000 f8b1 	bl	8006c30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	61bb      	str	r3, [r7, #24]
 8006ad2:	e002      	b.n	8006ada <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006ad4:	f04f 33ff 	mov.w	r3, #4294967295
 8006ad8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ada:	69bb      	ldr	r3, [r7, #24]
	}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3720      	adds	r7, #32
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}

08006ae4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b088      	sub	sp, #32
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	461a      	mov	r2, r3
 8006afc:	21a5      	movs	r1, #165	; 0xa5
 8006afe:	f001 fec1 	bl	8008884 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	4413      	add	r3, r2
 8006b12:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	f023 0307 	bic.w	r3, r3, #7
 8006b1a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b1c:	69bb      	ldr	r3, [r7, #24]
 8006b1e:	f003 0307 	and.w	r3, r3, #7
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d00a      	beq.n	8006b3c <prvInitialiseNewTask+0x58>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	617b      	str	r3, [r7, #20]
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d01f      	beq.n	8006b82 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b42:	2300      	movs	r3, #0
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	e012      	b.n	8006b6e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	4413      	add	r3, r2
 8006b4e:	7819      	ldrb	r1, [r3, #0]
 8006b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	4413      	add	r3, r2
 8006b56:	3334      	adds	r3, #52	; 0x34
 8006b58:	460a      	mov	r2, r1
 8006b5a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	4413      	add	r3, r2
 8006b62:	781b      	ldrb	r3, [r3, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d006      	beq.n	8006b76 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	61fb      	str	r3, [r7, #28]
 8006b6e:	69fb      	ldr	r3, [r7, #28]
 8006b70:	2b0f      	cmp	r3, #15
 8006b72:	d9e9      	bls.n	8006b48 <prvInitialiseNewTask+0x64>
 8006b74:	e000      	b.n	8006b78 <prvInitialiseNewTask+0x94>
			{
				break;
 8006b76:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b80:	e003      	b.n	8006b8a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8c:	2b37      	cmp	r3, #55	; 0x37
 8006b8e:	d901      	bls.n	8006b94 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b90:	2337      	movs	r3, #55	; 0x37
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b98:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006b9e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba8:	3304      	adds	r3, #4
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff f8bd 	bl	8005d2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bb2:	3318      	adds	r3, #24
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff f8b8 	bl	8005d2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bbe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be2:	3354      	adds	r3, #84	; 0x54
 8006be4:	2260      	movs	r2, #96	; 0x60
 8006be6:	2100      	movs	r1, #0
 8006be8:	4618      	mov	r0, r3
 8006bea:	f001 fe4b 	bl	8008884 <memset>
 8006bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf0:	4a0c      	ldr	r2, [pc, #48]	; (8006c24 <prvInitialiseNewTask+0x140>)
 8006bf2:	659a      	str	r2, [r3, #88]	; 0x58
 8006bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf6:	4a0c      	ldr	r2, [pc, #48]	; (8006c28 <prvInitialiseNewTask+0x144>)
 8006bf8:	65da      	str	r2, [r3, #92]	; 0x5c
 8006bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bfc:	4a0b      	ldr	r2, [pc, #44]	; (8006c2c <prvInitialiseNewTask+0x148>)
 8006bfe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006c00:	683a      	ldr	r2, [r7, #0]
 8006c02:	68f9      	ldr	r1, [r7, #12]
 8006c04:	69b8      	ldr	r0, [r7, #24]
 8006c06:	f001 f9d1 	bl	8007fac <pxPortInitialiseStack>
 8006c0a:	4602      	mov	r2, r0
 8006c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c0e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d002      	beq.n	8006c1c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c1a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006c1c:	bf00      	nop
 8006c1e:	3720      	adds	r7, #32
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	080093a4 	.word	0x080093a4
 8006c28:	080093c4 	.word	0x080093c4
 8006c2c:	08009384 	.word	0x08009384

08006c30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006c38:	f001 fae4 	bl	8008204 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006c3c:	4b2d      	ldr	r3, [pc, #180]	; (8006cf4 <prvAddNewTaskToReadyList+0xc4>)
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3301      	adds	r3, #1
 8006c42:	4a2c      	ldr	r2, [pc, #176]	; (8006cf4 <prvAddNewTaskToReadyList+0xc4>)
 8006c44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c46:	4b2c      	ldr	r3, [pc, #176]	; (8006cf8 <prvAddNewTaskToReadyList+0xc8>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d109      	bne.n	8006c62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c4e:	4a2a      	ldr	r2, [pc, #168]	; (8006cf8 <prvAddNewTaskToReadyList+0xc8>)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c54:	4b27      	ldr	r3, [pc, #156]	; (8006cf4 <prvAddNewTaskToReadyList+0xc4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d110      	bne.n	8006c7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c5c:	f000 fcb6 	bl	80075cc <prvInitialiseTaskLists>
 8006c60:	e00d      	b.n	8006c7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c62:	4b26      	ldr	r3, [pc, #152]	; (8006cfc <prvAddNewTaskToReadyList+0xcc>)
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d109      	bne.n	8006c7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c6a:	4b23      	ldr	r3, [pc, #140]	; (8006cf8 <prvAddNewTaskToReadyList+0xc8>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d802      	bhi.n	8006c7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c78:	4a1f      	ldr	r2, [pc, #124]	; (8006cf8 <prvAddNewTaskToReadyList+0xc8>)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c7e:	4b20      	ldr	r3, [pc, #128]	; (8006d00 <prvAddNewTaskToReadyList+0xd0>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3301      	adds	r3, #1
 8006c84:	4a1e      	ldr	r2, [pc, #120]	; (8006d00 <prvAddNewTaskToReadyList+0xd0>)
 8006c86:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c88:	4b1d      	ldr	r3, [pc, #116]	; (8006d00 <prvAddNewTaskToReadyList+0xd0>)
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c94:	4b1b      	ldr	r3, [pc, #108]	; (8006d04 <prvAddNewTaskToReadyList+0xd4>)
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d903      	bls.n	8006ca4 <prvAddNewTaskToReadyList+0x74>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca0:	4a18      	ldr	r2, [pc, #96]	; (8006d04 <prvAddNewTaskToReadyList+0xd4>)
 8006ca2:	6013      	str	r3, [r2, #0]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ca8:	4613      	mov	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	4413      	add	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4a15      	ldr	r2, [pc, #84]	; (8006d08 <prvAddNewTaskToReadyList+0xd8>)
 8006cb2:	441a      	add	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f7ff f842 	bl	8005d44 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006cc0:	f001 fad0 	bl	8008264 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006cc4:	4b0d      	ldr	r3, [pc, #52]	; (8006cfc <prvAddNewTaskToReadyList+0xcc>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d00e      	beq.n	8006cea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006ccc:	4b0a      	ldr	r3, [pc, #40]	; (8006cf8 <prvAddNewTaskToReadyList+0xc8>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d207      	bcs.n	8006cea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006cda:	4b0c      	ldr	r3, [pc, #48]	; (8006d0c <prvAddNewTaskToReadyList+0xdc>)
 8006cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	f3bf 8f4f 	dsb	sy
 8006ce6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006cea:	bf00      	nop
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}
 8006cf2:	bf00      	nop
 8006cf4:	20000f18 	.word	0x20000f18
 8006cf8:	20000a44 	.word	0x20000a44
 8006cfc:	20000f24 	.word	0x20000f24
 8006d00:	20000f34 	.word	0x20000f34
 8006d04:	20000f20 	.word	0x20000f20
 8006d08:	20000a48 	.word	0x20000a48
 8006d0c:	e000ed04 	.word	0xe000ed04

08006d10 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b084      	sub	sp, #16
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d017      	beq.n	8006d52 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006d22:	4b13      	ldr	r3, [pc, #76]	; (8006d70 <vTaskDelay+0x60>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <vTaskDelay+0x30>
	__asm volatile
 8006d2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2e:	f383 8811 	msr	BASEPRI, r3
 8006d32:	f3bf 8f6f 	isb	sy
 8006d36:	f3bf 8f4f 	dsb	sy
 8006d3a:	60bb      	str	r3, [r7, #8]
}
 8006d3c:	bf00      	nop
 8006d3e:	e7fe      	b.n	8006d3e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006d40:	f000 f91a 	bl	8006f78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006d44:	2100      	movs	r1, #0
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fd8e 	bl	8007868 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006d4c:	f000 f922 	bl	8006f94 <xTaskResumeAll>
 8006d50:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d107      	bne.n	8006d68 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006d58:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <vTaskDelay+0x64>)
 8006d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d5e:	601a      	str	r2, [r3, #0]
 8006d60:	f3bf 8f4f 	dsb	sy
 8006d64:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d68:	bf00      	nop
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	20000f40 	.word	0x20000f40
 8006d74:	e000ed04 	.word	0xe000ed04

08006d78 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8006d78:	b480      	push	{r7}
 8006d7a:	b087      	sub	sp, #28
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8006d80:	2300      	movs	r3, #0
 8006d82:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10a      	bne.n	8006da4 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	60fb      	str	r3, [r7, #12]
}
 8006da0:	bf00      	nop
 8006da2:	e7fe      	b.n	8006da2 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	4a0a      	ldr	r2, [pc, #40]	; (8006dd4 <prvTaskIsTaskSuspended+0x5c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d10a      	bne.n	8006dc4 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006db2:	4a09      	ldr	r2, [pc, #36]	; (8006dd8 <prvTaskIsTaskSuspended+0x60>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d005      	beq.n	8006dc4 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006dc4:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	20000f04 	.word	0x20000f04
 8006dd8:	20000ed8 	.word	0x20000ed8

08006ddc <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10a      	bne.n	8006e04 <vTaskResume+0x28>
	__asm volatile
 8006dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df2:	f383 8811 	msr	BASEPRI, r3
 8006df6:	f3bf 8f6f 	isb	sy
 8006dfa:	f3bf 8f4f 	dsb	sy
 8006dfe:	60bb      	str	r3, [r7, #8]
}
 8006e00:	bf00      	nop
 8006e02:	e7fe      	b.n	8006e02 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8006e04:	4b20      	ldr	r3, [pc, #128]	; (8006e88 <vTaskResume+0xac>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d038      	beq.n	8006e80 <vTaskResume+0xa4>
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d035      	beq.n	8006e80 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8006e14:	f001 f9f6 	bl	8008204 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	f7ff ffad 	bl	8006d78 <prvTaskIsTaskSuspended>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d02b      	beq.n	8006e7c <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fe ffe8 	bl	8005dfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e32:	4b16      	ldr	r3, [pc, #88]	; (8006e8c <vTaskResume+0xb0>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	429a      	cmp	r2, r3
 8006e38:	d903      	bls.n	8006e42 <vTaskResume+0x66>
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3e:	4a13      	ldr	r2, [pc, #76]	; (8006e8c <vTaskResume+0xb0>)
 8006e40:	6013      	str	r3, [r2, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e46:	4613      	mov	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	4413      	add	r3, r2
 8006e4c:	009b      	lsls	r3, r3, #2
 8006e4e:	4a10      	ldr	r2, [pc, #64]	; (8006e90 <vTaskResume+0xb4>)
 8006e50:	441a      	add	r2, r3
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3304      	adds	r3, #4
 8006e56:	4619      	mov	r1, r3
 8006e58:	4610      	mov	r0, r2
 8006e5a:	f7fe ff73 	bl	8005d44 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e62:	4b09      	ldr	r3, [pc, #36]	; (8006e88 <vTaskResume+0xac>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e68:	429a      	cmp	r2, r3
 8006e6a:	d307      	bcc.n	8006e7c <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8006e6c:	4b09      	ldr	r3, [pc, #36]	; (8006e94 <vTaskResume+0xb8>)
 8006e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e72:	601a      	str	r2, [r3, #0]
 8006e74:	f3bf 8f4f 	dsb	sy
 8006e78:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8006e7c:	f001 f9f2 	bl	8008264 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e80:	bf00      	nop
 8006e82:	3710      	adds	r7, #16
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}
 8006e88:	20000a44 	.word	0x20000a44
 8006e8c:	20000f20 	.word	0x20000f20
 8006e90:	20000a48 	.word	0x20000a48
 8006e94:	e000ed04 	.word	0xe000ed04

08006e98 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08a      	sub	sp, #40	; 0x28
 8006e9c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ea6:	463a      	mov	r2, r7
 8006ea8:	1d39      	adds	r1, r7, #4
 8006eaa:	f107 0308 	add.w	r3, r7, #8
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fe96 	bl	8005be0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	9202      	str	r2, [sp, #8]
 8006ebc:	9301      	str	r3, [sp, #4]
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	460a      	mov	r2, r1
 8006ec6:	4924      	ldr	r1, [pc, #144]	; (8006f58 <vTaskStartScheduler+0xc0>)
 8006ec8:	4824      	ldr	r0, [pc, #144]	; (8006f5c <vTaskStartScheduler+0xc4>)
 8006eca:	f7ff fd69 	bl	80069a0 <xTaskCreateStatic>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	4a23      	ldr	r2, [pc, #140]	; (8006f60 <vTaskStartScheduler+0xc8>)
 8006ed2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006ed4:	4b22      	ldr	r3, [pc, #136]	; (8006f60 <vTaskStartScheduler+0xc8>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006edc:	2301      	movs	r3, #1
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	e001      	b.n	8006ee6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d102      	bne.n	8006ef2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006eec:	f000 fd10 	bl	8007910 <xTimerCreateTimerTask>
 8006ef0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d11b      	bne.n	8006f30 <vTaskStartScheduler+0x98>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	f383 8811 	msr	BASEPRI, r3
 8006f00:	f3bf 8f6f 	isb	sy
 8006f04:	f3bf 8f4f 	dsb	sy
 8006f08:	613b      	str	r3, [r7, #16]
}
 8006f0a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006f0c:	4b15      	ldr	r3, [pc, #84]	; (8006f64 <vTaskStartScheduler+0xcc>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	3354      	adds	r3, #84	; 0x54
 8006f12:	4a15      	ldr	r2, [pc, #84]	; (8006f68 <vTaskStartScheduler+0xd0>)
 8006f14:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f16:	4b15      	ldr	r3, [pc, #84]	; (8006f6c <vTaskStartScheduler+0xd4>)
 8006f18:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f1e:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <vTaskStartScheduler+0xd8>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006f24:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <vTaskStartScheduler+0xdc>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f2a:	f001 f8c9 	bl	80080c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f2e:	e00e      	b.n	8006f4e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f30:	697b      	ldr	r3, [r7, #20]
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	d10a      	bne.n	8006f4e <vTaskStartScheduler+0xb6>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	60fb      	str	r3, [r7, #12]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <vTaskStartScheduler+0xb4>
}
 8006f4e:	bf00      	nop
 8006f50:	3718      	adds	r7, #24
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}
 8006f56:	bf00      	nop
 8006f58:	08008a80 	.word	0x08008a80
 8006f5c:	0800759d 	.word	0x0800759d
 8006f60:	20000f3c 	.word	0x20000f3c
 8006f64:	20000a44 	.word	0x20000a44
 8006f68:	20000014 	.word	0x20000014
 8006f6c:	20000f38 	.word	0x20000f38
 8006f70:	20000f24 	.word	0x20000f24
 8006f74:	20000f1c 	.word	0x20000f1c

08006f78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006f7c:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <vTaskSuspendAll+0x18>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	4a03      	ldr	r2, [pc, #12]	; (8006f90 <vTaskSuspendAll+0x18>)
 8006f84:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006f86:	bf00      	nop
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	20000f40 	.word	0x20000f40

08006f94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fa2:	4b42      	ldr	r3, [pc, #264]	; (80070ac <xTaskResumeAll+0x118>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d10a      	bne.n	8006fc0 <xTaskResumeAll+0x2c>
	__asm volatile
 8006faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	603b      	str	r3, [r7, #0]
}
 8006fbc:	bf00      	nop
 8006fbe:	e7fe      	b.n	8006fbe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fc0:	f001 f920 	bl	8008204 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fc4:	4b39      	ldr	r3, [pc, #228]	; (80070ac <xTaskResumeAll+0x118>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	4a38      	ldr	r2, [pc, #224]	; (80070ac <xTaskResumeAll+0x118>)
 8006fcc:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fce:	4b37      	ldr	r3, [pc, #220]	; (80070ac <xTaskResumeAll+0x118>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d162      	bne.n	800709c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fd6:	4b36      	ldr	r3, [pc, #216]	; (80070b0 <xTaskResumeAll+0x11c>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d05e      	beq.n	800709c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fde:	e02f      	b.n	8007040 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe0:	4b34      	ldr	r3, [pc, #208]	; (80070b4 <xTaskResumeAll+0x120>)
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	3318      	adds	r3, #24
 8006fec:	4618      	mov	r0, r3
 8006fee:	f7fe ff06 	bl	8005dfe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	f7fe ff01 	bl	8005dfe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007000:	4b2d      	ldr	r3, [pc, #180]	; (80070b8 <xTaskResumeAll+0x124>)
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	429a      	cmp	r2, r3
 8007006:	d903      	bls.n	8007010 <xTaskResumeAll+0x7c>
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	4a2a      	ldr	r2, [pc, #168]	; (80070b8 <xTaskResumeAll+0x124>)
 800700e:	6013      	str	r3, [r2, #0]
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007014:	4613      	mov	r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4a27      	ldr	r2, [pc, #156]	; (80070bc <xTaskResumeAll+0x128>)
 800701e:	441a      	add	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	3304      	adds	r3, #4
 8007024:	4619      	mov	r1, r3
 8007026:	4610      	mov	r0, r2
 8007028:	f7fe fe8c 	bl	8005d44 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007030:	4b23      	ldr	r3, [pc, #140]	; (80070c0 <xTaskResumeAll+0x12c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007036:	429a      	cmp	r2, r3
 8007038:	d302      	bcc.n	8007040 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800703a:	4b22      	ldr	r3, [pc, #136]	; (80070c4 <xTaskResumeAll+0x130>)
 800703c:	2201      	movs	r2, #1
 800703e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007040:	4b1c      	ldr	r3, [pc, #112]	; (80070b4 <xTaskResumeAll+0x120>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1cb      	bne.n	8006fe0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800704e:	f000 fb5f 	bl	8007710 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007052:	4b1d      	ldr	r3, [pc, #116]	; (80070c8 <xTaskResumeAll+0x134>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d010      	beq.n	8007080 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800705e:	f000 f847 	bl	80070f0 <xTaskIncrementTick>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007068:	4b16      	ldr	r3, [pc, #88]	; (80070c4 <xTaskResumeAll+0x130>)
 800706a:	2201      	movs	r2, #1
 800706c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	3b01      	subs	r3, #1
 8007072:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1f1      	bne.n	800705e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800707a:	4b13      	ldr	r3, [pc, #76]	; (80070c8 <xTaskResumeAll+0x134>)
 800707c:	2200      	movs	r2, #0
 800707e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007080:	4b10      	ldr	r3, [pc, #64]	; (80070c4 <xTaskResumeAll+0x130>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d009      	beq.n	800709c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007088:	2301      	movs	r3, #1
 800708a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800708c:	4b0f      	ldr	r3, [pc, #60]	; (80070cc <xTaskResumeAll+0x138>)
 800708e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007092:	601a      	str	r2, [r3, #0]
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800709c:	f001 f8e2 	bl	8008264 <vPortExitCritical>

	return xAlreadyYielded;
 80070a0:	68bb      	ldr	r3, [r7, #8]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	20000f40 	.word	0x20000f40
 80070b0:	20000f18 	.word	0x20000f18
 80070b4:	20000ed8 	.word	0x20000ed8
 80070b8:	20000f20 	.word	0x20000f20
 80070bc:	20000a48 	.word	0x20000a48
 80070c0:	20000a44 	.word	0x20000a44
 80070c4:	20000f2c 	.word	0x20000f2c
 80070c8:	20000f28 	.word	0x20000f28
 80070cc:	e000ed04 	.word	0xe000ed04

080070d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070d0:	b480      	push	{r7}
 80070d2:	b083      	sub	sp, #12
 80070d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070d6:	4b05      	ldr	r3, [pc, #20]	; (80070ec <xTaskGetTickCount+0x1c>)
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070dc:	687b      	ldr	r3, [r7, #4]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	20000f1c 	.word	0x20000f1c

080070f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070f6:	2300      	movs	r3, #0
 80070f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070fa:	4b4f      	ldr	r3, [pc, #316]	; (8007238 <xTaskIncrementTick+0x148>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f040 808f 	bne.w	8007222 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007104:	4b4d      	ldr	r3, [pc, #308]	; (800723c <xTaskIncrementTick+0x14c>)
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3301      	adds	r3, #1
 800710a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800710c:	4a4b      	ldr	r2, [pc, #300]	; (800723c <xTaskIncrementTick+0x14c>)
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d120      	bne.n	800715a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007118:	4b49      	ldr	r3, [pc, #292]	; (8007240 <xTaskIncrementTick+0x150>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <xTaskIncrementTick+0x48>
	__asm volatile
 8007122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	603b      	str	r3, [r7, #0]
}
 8007134:	bf00      	nop
 8007136:	e7fe      	b.n	8007136 <xTaskIncrementTick+0x46>
 8007138:	4b41      	ldr	r3, [pc, #260]	; (8007240 <xTaskIncrementTick+0x150>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	60fb      	str	r3, [r7, #12]
 800713e:	4b41      	ldr	r3, [pc, #260]	; (8007244 <xTaskIncrementTick+0x154>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a3f      	ldr	r2, [pc, #252]	; (8007240 <xTaskIncrementTick+0x150>)
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	4a3f      	ldr	r2, [pc, #252]	; (8007244 <xTaskIncrementTick+0x154>)
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	4b3e      	ldr	r3, [pc, #248]	; (8007248 <xTaskIncrementTick+0x158>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	3301      	adds	r3, #1
 8007152:	4a3d      	ldr	r2, [pc, #244]	; (8007248 <xTaskIncrementTick+0x158>)
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	f000 fadb 	bl	8007710 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800715a:	4b3c      	ldr	r3, [pc, #240]	; (800724c <xTaskIncrementTick+0x15c>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	429a      	cmp	r2, r3
 8007162:	d349      	bcc.n	80071f8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007164:	4b36      	ldr	r3, [pc, #216]	; (8007240 <xTaskIncrementTick+0x150>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d104      	bne.n	8007178 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800716e:	4b37      	ldr	r3, [pc, #220]	; (800724c <xTaskIncrementTick+0x15c>)
 8007170:	f04f 32ff 	mov.w	r2, #4294967295
 8007174:	601a      	str	r2, [r3, #0]
					break;
 8007176:	e03f      	b.n	80071f8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007178:	4b31      	ldr	r3, [pc, #196]	; (8007240 <xTaskIncrementTick+0x150>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68db      	ldr	r3, [r3, #12]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	685b      	ldr	r3, [r3, #4]
 8007186:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007188:	693a      	ldr	r2, [r7, #16]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	429a      	cmp	r2, r3
 800718e:	d203      	bcs.n	8007198 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007190:	4a2e      	ldr	r2, [pc, #184]	; (800724c <xTaskIncrementTick+0x15c>)
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007196:	e02f      	b.n	80071f8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	3304      	adds	r3, #4
 800719c:	4618      	mov	r0, r3
 800719e:	f7fe fe2e 	bl	8005dfe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d004      	beq.n	80071b4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071aa:	68bb      	ldr	r3, [r7, #8]
 80071ac:	3318      	adds	r3, #24
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fe fe25 	bl	8005dfe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071b8:	4b25      	ldr	r3, [pc, #148]	; (8007250 <xTaskIncrementTick+0x160>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	429a      	cmp	r2, r3
 80071be:	d903      	bls.n	80071c8 <xTaskIncrementTick+0xd8>
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	4a22      	ldr	r2, [pc, #136]	; (8007250 <xTaskIncrementTick+0x160>)
 80071c6:	6013      	str	r3, [r2, #0]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4a1f      	ldr	r2, [pc, #124]	; (8007254 <xTaskIncrementTick+0x164>)
 80071d6:	441a      	add	r2, r3
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	3304      	adds	r3, #4
 80071dc:	4619      	mov	r1, r3
 80071de:	4610      	mov	r0, r2
 80071e0:	f7fe fdb0 	bl	8005d44 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e8:	4b1b      	ldr	r3, [pc, #108]	; (8007258 <xTaskIncrementTick+0x168>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071ee:	429a      	cmp	r2, r3
 80071f0:	d3b8      	bcc.n	8007164 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80071f2:	2301      	movs	r3, #1
 80071f4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071f6:	e7b5      	b.n	8007164 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071f8:	4b17      	ldr	r3, [pc, #92]	; (8007258 <xTaskIncrementTick+0x168>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071fe:	4915      	ldr	r1, [pc, #84]	; (8007254 <xTaskIncrementTick+0x164>)
 8007200:	4613      	mov	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2b01      	cmp	r3, #1
 800720e:	d901      	bls.n	8007214 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007210:	2301      	movs	r3, #1
 8007212:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007214:	4b11      	ldr	r3, [pc, #68]	; (800725c <xTaskIncrementTick+0x16c>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d007      	beq.n	800722c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800721c:	2301      	movs	r3, #1
 800721e:	617b      	str	r3, [r7, #20]
 8007220:	e004      	b.n	800722c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007222:	4b0f      	ldr	r3, [pc, #60]	; (8007260 <xTaskIncrementTick+0x170>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	3301      	adds	r3, #1
 8007228:	4a0d      	ldr	r2, [pc, #52]	; (8007260 <xTaskIncrementTick+0x170>)
 800722a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800722c:	697b      	ldr	r3, [r7, #20]
}
 800722e:	4618      	mov	r0, r3
 8007230:	3718      	adds	r7, #24
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	20000f40 	.word	0x20000f40
 800723c:	20000f1c 	.word	0x20000f1c
 8007240:	20000ed0 	.word	0x20000ed0
 8007244:	20000ed4 	.word	0x20000ed4
 8007248:	20000f30 	.word	0x20000f30
 800724c:	20000f38 	.word	0x20000f38
 8007250:	20000f20 	.word	0x20000f20
 8007254:	20000a48 	.word	0x20000a48
 8007258:	20000a44 	.word	0x20000a44
 800725c:	20000f2c 	.word	0x20000f2c
 8007260:	20000f28 	.word	0x20000f28

08007264 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007264:	b480      	push	{r7}
 8007266:	b085      	sub	sp, #20
 8007268:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800726a:	4b2a      	ldr	r3, [pc, #168]	; (8007314 <vTaskSwitchContext+0xb0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d003      	beq.n	800727a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007272:	4b29      	ldr	r3, [pc, #164]	; (8007318 <vTaskSwitchContext+0xb4>)
 8007274:	2201      	movs	r2, #1
 8007276:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007278:	e046      	b.n	8007308 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800727a:	4b27      	ldr	r3, [pc, #156]	; (8007318 <vTaskSwitchContext+0xb4>)
 800727c:	2200      	movs	r2, #0
 800727e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007280:	4b26      	ldr	r3, [pc, #152]	; (800731c <vTaskSwitchContext+0xb8>)
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	60fb      	str	r3, [r7, #12]
 8007286:	e010      	b.n	80072aa <vTaskSwitchContext+0x46>
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d10a      	bne.n	80072a4 <vTaskSwitchContext+0x40>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	607b      	str	r3, [r7, #4]
}
 80072a0:	bf00      	nop
 80072a2:	e7fe      	b.n	80072a2 <vTaskSwitchContext+0x3e>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	3b01      	subs	r3, #1
 80072a8:	60fb      	str	r3, [r7, #12]
 80072aa:	491d      	ldr	r1, [pc, #116]	; (8007320 <vTaskSwitchContext+0xbc>)
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	440b      	add	r3, r1
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d0e4      	beq.n	8007288 <vTaskSwitchContext+0x24>
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4613      	mov	r3, r2
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	4a15      	ldr	r2, [pc, #84]	; (8007320 <vTaskSwitchContext+0xbc>)
 80072ca:	4413      	add	r3, r2
 80072cc:	60bb      	str	r3, [r7, #8]
 80072ce:	68bb      	ldr	r3, [r7, #8]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	605a      	str	r2, [r3, #4]
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	685a      	ldr	r2, [r3, #4]
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	3308      	adds	r3, #8
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d104      	bne.n	80072ee <vTaskSwitchContext+0x8a>
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	685a      	ldr	r2, [r3, #4]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	605a      	str	r2, [r3, #4]
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	68db      	ldr	r3, [r3, #12]
 80072f4:	4a0b      	ldr	r2, [pc, #44]	; (8007324 <vTaskSwitchContext+0xc0>)
 80072f6:	6013      	str	r3, [r2, #0]
 80072f8:	4a08      	ldr	r2, [pc, #32]	; (800731c <vTaskSwitchContext+0xb8>)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80072fe:	4b09      	ldr	r3, [pc, #36]	; (8007324 <vTaskSwitchContext+0xc0>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	3354      	adds	r3, #84	; 0x54
 8007304:	4a08      	ldr	r2, [pc, #32]	; (8007328 <vTaskSwitchContext+0xc4>)
 8007306:	6013      	str	r3, [r2, #0]
}
 8007308:	bf00      	nop
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	20000f40 	.word	0x20000f40
 8007318:	20000f2c 	.word	0x20000f2c
 800731c:	20000f20 	.word	0x20000f20
 8007320:	20000a48 	.word	0x20000a48
 8007324:	20000a44 	.word	0x20000a44
 8007328:	20000014 	.word	0x20000014

0800732c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b084      	sub	sp, #16
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
 8007334:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d10a      	bne.n	8007352 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800733c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007340:	f383 8811 	msr	BASEPRI, r3
 8007344:	f3bf 8f6f 	isb	sy
 8007348:	f3bf 8f4f 	dsb	sy
 800734c:	60fb      	str	r3, [r7, #12]
}
 800734e:	bf00      	nop
 8007350:	e7fe      	b.n	8007350 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007352:	4b07      	ldr	r3, [pc, #28]	; (8007370 <vTaskPlaceOnEventList+0x44>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	3318      	adds	r3, #24
 8007358:	4619      	mov	r1, r3
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7fe fd16 	bl	8005d8c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007360:	2101      	movs	r1, #1
 8007362:	6838      	ldr	r0, [r7, #0]
 8007364:	f000 fa80 	bl	8007868 <prvAddCurrentTaskToDelayedList>
}
 8007368:	bf00      	nop
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	20000a44 	.word	0x20000a44

08007374 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	60f8      	str	r0, [r7, #12]
 800737c:	60b9      	str	r1, [r7, #8]
 800737e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10a      	bne.n	800739c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738a:	f383 8811 	msr	BASEPRI, r3
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f3bf 8f4f 	dsb	sy
 8007396:	617b      	str	r3, [r7, #20]
}
 8007398:	bf00      	nop
 800739a:	e7fe      	b.n	800739a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800739c:	4b0a      	ldr	r3, [pc, #40]	; (80073c8 <vTaskPlaceOnEventListRestricted+0x54>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	3318      	adds	r3, #24
 80073a2:	4619      	mov	r1, r3
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f7fe fccd 	bl	8005d44 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80073b0:	f04f 33ff 	mov.w	r3, #4294967295
 80073b4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073b6:	6879      	ldr	r1, [r7, #4]
 80073b8:	68b8      	ldr	r0, [r7, #8]
 80073ba:	f000 fa55 	bl	8007868 <prvAddCurrentTaskToDelayedList>
	}
 80073be:	bf00      	nop
 80073c0:	3718      	adds	r7, #24
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20000a44 	.word	0x20000a44

080073cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b086      	sub	sp, #24
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	68db      	ldr	r3, [r3, #12]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d10a      	bne.n	80073f8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80073e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	60fb      	str	r3, [r7, #12]
}
 80073f4:	bf00      	nop
 80073f6:	e7fe      	b.n	80073f6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	3318      	adds	r3, #24
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe fcfe 	bl	8005dfe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007402:	4b1e      	ldr	r3, [pc, #120]	; (800747c <xTaskRemoveFromEventList+0xb0>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d11d      	bne.n	8007446 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3304      	adds	r3, #4
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe fcf5 	bl	8005dfe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007418:	4b19      	ldr	r3, [pc, #100]	; (8007480 <xTaskRemoveFromEventList+0xb4>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	429a      	cmp	r2, r3
 800741e:	d903      	bls.n	8007428 <xTaskRemoveFromEventList+0x5c>
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007424:	4a16      	ldr	r2, [pc, #88]	; (8007480 <xTaskRemoveFromEventList+0xb4>)
 8007426:	6013      	str	r3, [r2, #0]
 8007428:	693b      	ldr	r3, [r7, #16]
 800742a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800742c:	4613      	mov	r3, r2
 800742e:	009b      	lsls	r3, r3, #2
 8007430:	4413      	add	r3, r2
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	4a13      	ldr	r2, [pc, #76]	; (8007484 <xTaskRemoveFromEventList+0xb8>)
 8007436:	441a      	add	r2, r3
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	3304      	adds	r3, #4
 800743c:	4619      	mov	r1, r3
 800743e:	4610      	mov	r0, r2
 8007440:	f7fe fc80 	bl	8005d44 <vListInsertEnd>
 8007444:	e005      	b.n	8007452 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	3318      	adds	r3, #24
 800744a:	4619      	mov	r1, r3
 800744c:	480e      	ldr	r0, [pc, #56]	; (8007488 <xTaskRemoveFromEventList+0xbc>)
 800744e:	f7fe fc79 	bl	8005d44 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007456:	4b0d      	ldr	r3, [pc, #52]	; (800748c <xTaskRemoveFromEventList+0xc0>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	429a      	cmp	r2, r3
 800745e:	d905      	bls.n	800746c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007460:	2301      	movs	r3, #1
 8007462:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007464:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <xTaskRemoveFromEventList+0xc4>)
 8007466:	2201      	movs	r2, #1
 8007468:	601a      	str	r2, [r3, #0]
 800746a:	e001      	b.n	8007470 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800746c:	2300      	movs	r3, #0
 800746e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007470:	697b      	ldr	r3, [r7, #20]
}
 8007472:	4618      	mov	r0, r3
 8007474:	3718      	adds	r7, #24
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	20000f40 	.word	0x20000f40
 8007480:	20000f20 	.word	0x20000f20
 8007484:	20000a48 	.word	0x20000a48
 8007488:	20000ed8 	.word	0x20000ed8
 800748c:	20000a44 	.word	0x20000a44
 8007490:	20000f2c 	.word	0x20000f2c

08007494 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <vTaskInternalSetTimeOutState+0x24>)
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80074a4:	4b05      	ldr	r3, [pc, #20]	; (80074bc <vTaskInternalSetTimeOutState+0x28>)
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	605a      	str	r2, [r3, #4]
}
 80074ac:	bf00      	nop
 80074ae:	370c      	adds	r7, #12
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr
 80074b8:	20000f30 	.word	0x20000f30
 80074bc:	20000f1c 	.word	0x20000f1c

080074c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b088      	sub	sp, #32
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
 80074c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10a      	bne.n	80074e6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80074d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d4:	f383 8811 	msr	BASEPRI, r3
 80074d8:	f3bf 8f6f 	isb	sy
 80074dc:	f3bf 8f4f 	dsb	sy
 80074e0:	613b      	str	r3, [r7, #16]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10a      	bne.n	8007502 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80074ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f0:	f383 8811 	msr	BASEPRI, r3
 80074f4:	f3bf 8f6f 	isb	sy
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	60fb      	str	r3, [r7, #12]
}
 80074fe:	bf00      	nop
 8007500:	e7fe      	b.n	8007500 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007502:	f000 fe7f 	bl	8008204 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007506:	4b1d      	ldr	r3, [pc, #116]	; (800757c <xTaskCheckForTimeOut+0xbc>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	1ad3      	subs	r3, r2, r3
 8007514:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751e:	d102      	bne.n	8007526 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007520:	2300      	movs	r3, #0
 8007522:	61fb      	str	r3, [r7, #28]
 8007524:	e023      	b.n	800756e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681a      	ldr	r2, [r3, #0]
 800752a:	4b15      	ldr	r3, [pc, #84]	; (8007580 <xTaskCheckForTimeOut+0xc0>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	429a      	cmp	r2, r3
 8007530:	d007      	beq.n	8007542 <xTaskCheckForTimeOut+0x82>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	429a      	cmp	r2, r3
 800753a:	d302      	bcc.n	8007542 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800753c:	2301      	movs	r3, #1
 800753e:	61fb      	str	r3, [r7, #28]
 8007540:	e015      	b.n	800756e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	697a      	ldr	r2, [r7, #20]
 8007548:	429a      	cmp	r2, r3
 800754a:	d20b      	bcs.n	8007564 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	1ad2      	subs	r2, r2, r3
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f7ff ff9b 	bl	8007494 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800755e:	2300      	movs	r3, #0
 8007560:	61fb      	str	r3, [r7, #28]
 8007562:	e004      	b.n	800756e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	2200      	movs	r2, #0
 8007568:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800756a:	2301      	movs	r3, #1
 800756c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800756e:	f000 fe79 	bl	8008264 <vPortExitCritical>

	return xReturn;
 8007572:	69fb      	ldr	r3, [r7, #28]
}
 8007574:	4618      	mov	r0, r3
 8007576:	3720      	adds	r7, #32
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}
 800757c:	20000f1c 	.word	0x20000f1c
 8007580:	20000f30 	.word	0x20000f30

08007584 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007588:	4b03      	ldr	r3, [pc, #12]	; (8007598 <vTaskMissedYield+0x14>)
 800758a:	2201      	movs	r2, #1
 800758c:	601a      	str	r2, [r3, #0]
}
 800758e:	bf00      	nop
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr
 8007598:	20000f2c 	.word	0x20000f2c

0800759c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b082      	sub	sp, #8
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80075a4:	f000 f852 	bl	800764c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80075a8:	4b06      	ldr	r3, [pc, #24]	; (80075c4 <prvIdleTask+0x28>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d9f9      	bls.n	80075a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80075b0:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <prvIdleTask+0x2c>)
 80075b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075b6:	601a      	str	r2, [r3, #0]
 80075b8:	f3bf 8f4f 	dsb	sy
 80075bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075c0:	e7f0      	b.n	80075a4 <prvIdleTask+0x8>
 80075c2:	bf00      	nop
 80075c4:	20000a48 	.word	0x20000a48
 80075c8:	e000ed04 	.word	0xe000ed04

080075cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075d2:	2300      	movs	r3, #0
 80075d4:	607b      	str	r3, [r7, #4]
 80075d6:	e00c      	b.n	80075f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	4613      	mov	r3, r2
 80075dc:	009b      	lsls	r3, r3, #2
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4a12      	ldr	r2, [pc, #72]	; (800762c <prvInitialiseTaskLists+0x60>)
 80075e4:	4413      	add	r3, r2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe fb7f 	bl	8005cea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	3301      	adds	r3, #1
 80075f0:	607b      	str	r3, [r7, #4]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2b37      	cmp	r3, #55	; 0x37
 80075f6:	d9ef      	bls.n	80075d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075f8:	480d      	ldr	r0, [pc, #52]	; (8007630 <prvInitialiseTaskLists+0x64>)
 80075fa:	f7fe fb76 	bl	8005cea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075fe:	480d      	ldr	r0, [pc, #52]	; (8007634 <prvInitialiseTaskLists+0x68>)
 8007600:	f7fe fb73 	bl	8005cea <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007604:	480c      	ldr	r0, [pc, #48]	; (8007638 <prvInitialiseTaskLists+0x6c>)
 8007606:	f7fe fb70 	bl	8005cea <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800760a:	480c      	ldr	r0, [pc, #48]	; (800763c <prvInitialiseTaskLists+0x70>)
 800760c:	f7fe fb6d 	bl	8005cea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007610:	480b      	ldr	r0, [pc, #44]	; (8007640 <prvInitialiseTaskLists+0x74>)
 8007612:	f7fe fb6a 	bl	8005cea <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007616:	4b0b      	ldr	r3, [pc, #44]	; (8007644 <prvInitialiseTaskLists+0x78>)
 8007618:	4a05      	ldr	r2, [pc, #20]	; (8007630 <prvInitialiseTaskLists+0x64>)
 800761a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800761c:	4b0a      	ldr	r3, [pc, #40]	; (8007648 <prvInitialiseTaskLists+0x7c>)
 800761e:	4a05      	ldr	r2, [pc, #20]	; (8007634 <prvInitialiseTaskLists+0x68>)
 8007620:	601a      	str	r2, [r3, #0]
}
 8007622:	bf00      	nop
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000a48 	.word	0x20000a48
 8007630:	20000ea8 	.word	0x20000ea8
 8007634:	20000ebc 	.word	0x20000ebc
 8007638:	20000ed8 	.word	0x20000ed8
 800763c:	20000eec 	.word	0x20000eec
 8007640:	20000f04 	.word	0x20000f04
 8007644:	20000ed0 	.word	0x20000ed0
 8007648:	20000ed4 	.word	0x20000ed4

0800764c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007652:	e019      	b.n	8007688 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007654:	f000 fdd6 	bl	8008204 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007658:	4b10      	ldr	r3, [pc, #64]	; (800769c <prvCheckTasksWaitingTermination+0x50>)
 800765a:	68db      	ldr	r3, [r3, #12]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3304      	adds	r3, #4
 8007664:	4618      	mov	r0, r3
 8007666:	f7fe fbca 	bl	8005dfe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800766a:	4b0d      	ldr	r3, [pc, #52]	; (80076a0 <prvCheckTasksWaitingTermination+0x54>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	3b01      	subs	r3, #1
 8007670:	4a0b      	ldr	r2, [pc, #44]	; (80076a0 <prvCheckTasksWaitingTermination+0x54>)
 8007672:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007674:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <prvCheckTasksWaitingTermination+0x58>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	3b01      	subs	r3, #1
 800767a:	4a0a      	ldr	r2, [pc, #40]	; (80076a4 <prvCheckTasksWaitingTermination+0x58>)
 800767c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800767e:	f000 fdf1 	bl	8008264 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 f810 	bl	80076a8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007688:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <prvCheckTasksWaitingTermination+0x58>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1e1      	bne.n	8007654 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007690:	bf00      	nop
 8007692:	bf00      	nop
 8007694:	3708      	adds	r7, #8
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
 800769a:	bf00      	nop
 800769c:	20000eec 	.word	0x20000eec
 80076a0:	20000f18 	.word	0x20000f18
 80076a4:	20000f00 	.word	0x20000f00

080076a8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b084      	sub	sp, #16
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	3354      	adds	r3, #84	; 0x54
 80076b4:	4618      	mov	r0, r3
 80076b6:	f001 f8fb 	bl	80088b0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d108      	bne.n	80076d6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 ff89 	bl	80085e0 <vPortFree>
				vPortFree( pxTCB );
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 ff86 	bl	80085e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076d4:	e018      	b.n	8007708 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d103      	bne.n	80076e8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 ff7d 	bl	80085e0 <vPortFree>
	}
 80076e6:	e00f      	b.n	8007708 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80076ee:	2b02      	cmp	r3, #2
 80076f0:	d00a      	beq.n	8007708 <prvDeleteTCB+0x60>
	__asm volatile
 80076f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076f6:	f383 8811 	msr	BASEPRI, r3
 80076fa:	f3bf 8f6f 	isb	sy
 80076fe:	f3bf 8f4f 	dsb	sy
 8007702:	60fb      	str	r3, [r7, #12]
}
 8007704:	bf00      	nop
 8007706:	e7fe      	b.n	8007706 <prvDeleteTCB+0x5e>
	}
 8007708:	bf00      	nop
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007716:	4b0c      	ldr	r3, [pc, #48]	; (8007748 <prvResetNextTaskUnblockTime+0x38>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d104      	bne.n	800772a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007720:	4b0a      	ldr	r3, [pc, #40]	; (800774c <prvResetNextTaskUnblockTime+0x3c>)
 8007722:	f04f 32ff 	mov.w	r2, #4294967295
 8007726:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007728:	e008      	b.n	800773c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800772a:	4b07      	ldr	r3, [pc, #28]	; (8007748 <prvResetNextTaskUnblockTime+0x38>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	68db      	ldr	r3, [r3, #12]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	4a04      	ldr	r2, [pc, #16]	; (800774c <prvResetNextTaskUnblockTime+0x3c>)
 800773a:	6013      	str	r3, [r2, #0]
}
 800773c:	bf00      	nop
 800773e:	370c      	adds	r7, #12
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	20000ed0 	.word	0x20000ed0
 800774c:	20000f38 	.word	0x20000f38

08007750 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007756:	4b0b      	ldr	r3, [pc, #44]	; (8007784 <xTaskGetSchedulerState+0x34>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d102      	bne.n	8007764 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800775e:	2301      	movs	r3, #1
 8007760:	607b      	str	r3, [r7, #4]
 8007762:	e008      	b.n	8007776 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007764:	4b08      	ldr	r3, [pc, #32]	; (8007788 <xTaskGetSchedulerState+0x38>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d102      	bne.n	8007772 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800776c:	2302      	movs	r3, #2
 800776e:	607b      	str	r3, [r7, #4]
 8007770:	e001      	b.n	8007776 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007772:	2300      	movs	r3, #0
 8007774:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007776:	687b      	ldr	r3, [r7, #4]
	}
 8007778:	4618      	mov	r0, r3
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	20000f24 	.word	0x20000f24
 8007788:	20000f40 	.word	0x20000f40

0800778c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007798:	2300      	movs	r3, #0
 800779a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d056      	beq.n	8007850 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80077a2:	4b2e      	ldr	r3, [pc, #184]	; (800785c <xTaskPriorityDisinherit+0xd0>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	429a      	cmp	r2, r3
 80077aa:	d00a      	beq.n	80077c2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	60fb      	str	r3, [r7, #12]
}
 80077be:	bf00      	nop
 80077c0:	e7fe      	b.n	80077c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10a      	bne.n	80077e0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80077ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077ce:	f383 8811 	msr	BASEPRI, r3
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	f3bf 8f4f 	dsb	sy
 80077da:	60bb      	str	r3, [r7, #8]
}
 80077dc:	bf00      	nop
 80077de:	e7fe      	b.n	80077de <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e4:	1e5a      	subs	r2, r3, #1
 80077e6:	693b      	ldr	r3, [r7, #16]
 80077e8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d02c      	beq.n	8007850 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d128      	bne.n	8007850 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3304      	adds	r3, #4
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fafb 	bl	8005dfe <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <xTaskPriorityDisinherit+0xd4>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	429a      	cmp	r2, r3
 8007826:	d903      	bls.n	8007830 <xTaskPriorityDisinherit+0xa4>
 8007828:	693b      	ldr	r3, [r7, #16]
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	4a0c      	ldr	r2, [pc, #48]	; (8007860 <xTaskPriorityDisinherit+0xd4>)
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007834:	4613      	mov	r3, r2
 8007836:	009b      	lsls	r3, r3, #2
 8007838:	4413      	add	r3, r2
 800783a:	009b      	lsls	r3, r3, #2
 800783c:	4a09      	ldr	r2, [pc, #36]	; (8007864 <xTaskPriorityDisinherit+0xd8>)
 800783e:	441a      	add	r2, r3
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	3304      	adds	r3, #4
 8007844:	4619      	mov	r1, r3
 8007846:	4610      	mov	r0, r2
 8007848:	f7fe fa7c 	bl	8005d44 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800784c:	2301      	movs	r3, #1
 800784e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007850:	697b      	ldr	r3, [r7, #20]
	}
 8007852:	4618      	mov	r0, r3
 8007854:	3718      	adds	r7, #24
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
 800785a:	bf00      	nop
 800785c:	20000a44 	.word	0x20000a44
 8007860:	20000f20 	.word	0x20000f20
 8007864:	20000a48 	.word	0x20000a48

08007868 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b084      	sub	sp, #16
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007872:	4b21      	ldr	r3, [pc, #132]	; (80078f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007878:	4b20      	ldr	r3, [pc, #128]	; (80078fc <prvAddCurrentTaskToDelayedList+0x94>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	3304      	adds	r3, #4
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe fabd 	bl	8005dfe <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800788a:	d10a      	bne.n	80078a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d007      	beq.n	80078a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007892:	4b1a      	ldr	r3, [pc, #104]	; (80078fc <prvAddCurrentTaskToDelayedList+0x94>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	3304      	adds	r3, #4
 8007898:	4619      	mov	r1, r3
 800789a:	4819      	ldr	r0, [pc, #100]	; (8007900 <prvAddCurrentTaskToDelayedList+0x98>)
 800789c:	f7fe fa52 	bl	8005d44 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80078a0:	e026      	b.n	80078f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	4413      	add	r3, r2
 80078a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80078aa:	4b14      	ldr	r3, [pc, #80]	; (80078fc <prvAddCurrentTaskToDelayedList+0x94>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80078b2:	68ba      	ldr	r2, [r7, #8]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	429a      	cmp	r2, r3
 80078b8:	d209      	bcs.n	80078ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ba:	4b12      	ldr	r3, [pc, #72]	; (8007904 <prvAddCurrentTaskToDelayedList+0x9c>)
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4b0f      	ldr	r3, [pc, #60]	; (80078fc <prvAddCurrentTaskToDelayedList+0x94>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	3304      	adds	r3, #4
 80078c4:	4619      	mov	r1, r3
 80078c6:	4610      	mov	r0, r2
 80078c8:	f7fe fa60 	bl	8005d8c <vListInsert>
}
 80078cc:	e010      	b.n	80078f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ce:	4b0e      	ldr	r3, [pc, #56]	; (8007908 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	4b0a      	ldr	r3, [pc, #40]	; (80078fc <prvAddCurrentTaskToDelayedList+0x94>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	3304      	adds	r3, #4
 80078d8:	4619      	mov	r1, r3
 80078da:	4610      	mov	r0, r2
 80078dc:	f7fe fa56 	bl	8005d8c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078e0:	4b0a      	ldr	r3, [pc, #40]	; (800790c <prvAddCurrentTaskToDelayedList+0xa4>)
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	68ba      	ldr	r2, [r7, #8]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d202      	bcs.n	80078f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078ea:	4a08      	ldr	r2, [pc, #32]	; (800790c <prvAddCurrentTaskToDelayedList+0xa4>)
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	6013      	str	r3, [r2, #0]
}
 80078f0:	bf00      	nop
 80078f2:	3710      	adds	r7, #16
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	20000f1c 	.word	0x20000f1c
 80078fc:	20000a44 	.word	0x20000a44
 8007900:	20000f04 	.word	0x20000f04
 8007904:	20000ed4 	.word	0x20000ed4
 8007908:	20000ed0 	.word	0x20000ed0
 800790c:	20000f38 	.word	0x20000f38

08007910 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08a      	sub	sp, #40	; 0x28
 8007914:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007916:	2300      	movs	r3, #0
 8007918:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800791a:	f000 fb07 	bl	8007f2c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800791e:	4b1c      	ldr	r3, [pc, #112]	; (8007990 <xTimerCreateTimerTask+0x80>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d021      	beq.n	800796a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800792a:	2300      	movs	r3, #0
 800792c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800792e:	1d3a      	adds	r2, r7, #4
 8007930:	f107 0108 	add.w	r1, r7, #8
 8007934:	f107 030c 	add.w	r3, r7, #12
 8007938:	4618      	mov	r0, r3
 800793a:	f7fe f96b 	bl	8005c14 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800793e:	6879      	ldr	r1, [r7, #4]
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	9202      	str	r2, [sp, #8]
 8007946:	9301      	str	r3, [sp, #4]
 8007948:	2302      	movs	r3, #2
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	2300      	movs	r3, #0
 800794e:	460a      	mov	r2, r1
 8007950:	4910      	ldr	r1, [pc, #64]	; (8007994 <xTimerCreateTimerTask+0x84>)
 8007952:	4811      	ldr	r0, [pc, #68]	; (8007998 <xTimerCreateTimerTask+0x88>)
 8007954:	f7ff f824 	bl	80069a0 <xTaskCreateStatic>
 8007958:	4603      	mov	r3, r0
 800795a:	4a10      	ldr	r2, [pc, #64]	; (800799c <xTimerCreateTimerTask+0x8c>)
 800795c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800795e:	4b0f      	ldr	r3, [pc, #60]	; (800799c <xTimerCreateTimerTask+0x8c>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d001      	beq.n	800796a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007966:	2301      	movs	r3, #1
 8007968:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007974:	f383 8811 	msr	BASEPRI, r3
 8007978:	f3bf 8f6f 	isb	sy
 800797c:	f3bf 8f4f 	dsb	sy
 8007980:	613b      	str	r3, [r7, #16]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007986:	697b      	ldr	r3, [r7, #20]
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	20000f74 	.word	0x20000f74
 8007994:	08008a88 	.word	0x08008a88
 8007998:	08007ad5 	.word	0x08007ad5
 800799c:	20000f78 	.word	0x20000f78

080079a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b08a      	sub	sp, #40	; 0x28
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
 80079ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <xTimerGenericCommand+0x2e>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	623b      	str	r3, [r7, #32]
}
 80079ca:	bf00      	nop
 80079cc:	e7fe      	b.n	80079cc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079ce:	4b1a      	ldr	r3, [pc, #104]	; (8007a38 <xTimerGenericCommand+0x98>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d02a      	beq.n	8007a2c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079e2:	68bb      	ldr	r3, [r7, #8]
 80079e4:	2b05      	cmp	r3, #5
 80079e6:	dc18      	bgt.n	8007a1a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079e8:	f7ff feb2 	bl	8007750 <xTaskGetSchedulerState>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d109      	bne.n	8007a06 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079f2:	4b11      	ldr	r3, [pc, #68]	; (8007a38 <xTimerGenericCommand+0x98>)
 80079f4:	6818      	ldr	r0, [r3, #0]
 80079f6:	f107 0110 	add.w	r1, r7, #16
 80079fa:	2300      	movs	r3, #0
 80079fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079fe:	f7fe fb67 	bl	80060d0 <xQueueGenericSend>
 8007a02:	6278      	str	r0, [r7, #36]	; 0x24
 8007a04:	e012      	b.n	8007a2c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a06:	4b0c      	ldr	r3, [pc, #48]	; (8007a38 <xTimerGenericCommand+0x98>)
 8007a08:	6818      	ldr	r0, [r3, #0]
 8007a0a:	f107 0110 	add.w	r1, r7, #16
 8007a0e:	2300      	movs	r3, #0
 8007a10:	2200      	movs	r2, #0
 8007a12:	f7fe fb5d 	bl	80060d0 <xQueueGenericSend>
 8007a16:	6278      	str	r0, [r7, #36]	; 0x24
 8007a18:	e008      	b.n	8007a2c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a1a:	4b07      	ldr	r3, [pc, #28]	; (8007a38 <xTimerGenericCommand+0x98>)
 8007a1c:	6818      	ldr	r0, [r3, #0]
 8007a1e:	f107 0110 	add.w	r1, r7, #16
 8007a22:	2300      	movs	r3, #0
 8007a24:	683a      	ldr	r2, [r7, #0]
 8007a26:	f7fe fc51 	bl	80062cc <xQueueGenericSendFromISR>
 8007a2a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3728      	adds	r7, #40	; 0x28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	20000f74 	.word	0x20000f74

08007a3c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b088      	sub	sp, #32
 8007a40:	af02      	add	r7, sp, #8
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a46:	4b22      	ldr	r3, [pc, #136]	; (8007ad0 <prvProcessExpiredTimer+0x94>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	68db      	ldr	r3, [r3, #12]
 8007a4e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	3304      	adds	r3, #4
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7fe f9d2 	bl	8005dfe <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d022      	beq.n	8007aae <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	699a      	ldr	r2, [r3, #24]
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	18d1      	adds	r1, r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	683a      	ldr	r2, [r7, #0]
 8007a74:	6978      	ldr	r0, [r7, #20]
 8007a76:	f000 f8d1 	bl	8007c1c <prvInsertTimerInActiveList>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d01f      	beq.n	8007ac0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a80:	2300      	movs	r3, #0
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	2300      	movs	r3, #0
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	2100      	movs	r1, #0
 8007a8a:	6978      	ldr	r0, [r7, #20]
 8007a8c:	f7ff ff88 	bl	80079a0 <xTimerGenericCommand>
 8007a90:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d113      	bne.n	8007ac0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a9c:	f383 8811 	msr	BASEPRI, r3
 8007aa0:	f3bf 8f6f 	isb	sy
 8007aa4:	f3bf 8f4f 	dsb	sy
 8007aa8:	60fb      	str	r3, [r7, #12]
}
 8007aaa:	bf00      	nop
 8007aac:	e7fe      	b.n	8007aac <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ab4:	f023 0301 	bic.w	r3, r3, #1
 8007ab8:	b2da      	uxtb	r2, r3
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	6978      	ldr	r0, [r7, #20]
 8007ac6:	4798      	blx	r3
}
 8007ac8:	bf00      	nop
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}
 8007ad0:	20000f6c 	.word	0x20000f6c

08007ad4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007adc:	f107 0308 	add.w	r3, r7, #8
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 f857 	bl	8007b94 <prvGetNextExpireTime>
 8007ae6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	4619      	mov	r1, r3
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f000 f803 	bl	8007af8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007af2:	f000 f8d5 	bl	8007ca0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007af6:	e7f1      	b.n	8007adc <prvTimerTask+0x8>

08007af8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b02:	f7ff fa39 	bl	8006f78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b06:	f107 0308 	add.w	r3, r7, #8
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f000 f866 	bl	8007bdc <prvSampleTimeNow>
 8007b10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b12:	68bb      	ldr	r3, [r7, #8]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d130      	bne.n	8007b7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <prvProcessTimerOrBlockTask+0x3c>
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d806      	bhi.n	8007b34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b26:	f7ff fa35 	bl	8006f94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b2a:	68f9      	ldr	r1, [r7, #12]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f7ff ff85 	bl	8007a3c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b32:	e024      	b.n	8007b7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d008      	beq.n	8007b4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b3a:	4b13      	ldr	r3, [pc, #76]	; (8007b88 <prvProcessTimerOrBlockTask+0x90>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <prvProcessTimerOrBlockTask+0x50>
 8007b44:	2301      	movs	r3, #1
 8007b46:	e000      	b.n	8007b4a <prvProcessTimerOrBlockTask+0x52>
 8007b48:	2300      	movs	r3, #0
 8007b4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b4c:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <prvProcessTimerOrBlockTask+0x94>)
 8007b4e:	6818      	ldr	r0, [r3, #0]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	4619      	mov	r1, r3
 8007b5a:	f7fe feed 	bl	8006938 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b5e:	f7ff fa19 	bl	8006f94 <xTaskResumeAll>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d10a      	bne.n	8007b7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b68:	4b09      	ldr	r3, [pc, #36]	; (8007b90 <prvProcessTimerOrBlockTask+0x98>)
 8007b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b6e:	601a      	str	r2, [r3, #0]
 8007b70:	f3bf 8f4f 	dsb	sy
 8007b74:	f3bf 8f6f 	isb	sy
}
 8007b78:	e001      	b.n	8007b7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b7a:	f7ff fa0b 	bl	8006f94 <xTaskResumeAll>
}
 8007b7e:	bf00      	nop
 8007b80:	3710      	adds	r7, #16
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20000f70 	.word	0x20000f70
 8007b8c:	20000f74 	.word	0x20000f74
 8007b90:	e000ed04 	.word	0xe000ed04

08007b94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b9c:	4b0e      	ldr	r3, [pc, #56]	; (8007bd8 <prvGetNextExpireTime+0x44>)
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <prvGetNextExpireTime+0x16>
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	e000      	b.n	8007bac <prvGetNextExpireTime+0x18>
 8007baa:	2200      	movs	r2, #0
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d105      	bne.n	8007bc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bb8:	4b07      	ldr	r3, [pc, #28]	; (8007bd8 <prvGetNextExpireTime+0x44>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	60fb      	str	r3, [r7, #12]
 8007bc2:	e001      	b.n	8007bc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
}
 8007bca:	4618      	mov	r0, r3
 8007bcc:	3714      	adds	r7, #20
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
 8007bd6:	bf00      	nop
 8007bd8:	20000f6c 	.word	0x20000f6c

08007bdc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007be4:	f7ff fa74 	bl	80070d0 <xTaskGetTickCount>
 8007be8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007bea:	4b0b      	ldr	r3, [pc, #44]	; (8007c18 <prvSampleTimeNow+0x3c>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d205      	bcs.n	8007c00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007bf4:	f000 f936 	bl	8007e64 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	e002      	b.n	8007c06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c06:	4a04      	ldr	r2, [pc, #16]	; (8007c18 <prvSampleTimeNow+0x3c>)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3710      	adds	r7, #16
 8007c12:	46bd      	mov	sp, r7
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	bf00      	nop
 8007c18:	20000f7c 	.word	0x20000f7c

08007c1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
 8007c28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	68fa      	ldr	r2, [r7, #12]
 8007c38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c3a:	68ba      	ldr	r2, [r7, #8]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	429a      	cmp	r2, r3
 8007c40:	d812      	bhi.n	8007c68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c42:	687a      	ldr	r2, [r7, #4]
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	1ad2      	subs	r2, r2, r3
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	699b      	ldr	r3, [r3, #24]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d302      	bcc.n	8007c56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c50:	2301      	movs	r3, #1
 8007c52:	617b      	str	r3, [r7, #20]
 8007c54:	e01b      	b.n	8007c8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c56:	4b10      	ldr	r3, [pc, #64]	; (8007c98 <prvInsertTimerInActiveList+0x7c>)
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	3304      	adds	r3, #4
 8007c5e:	4619      	mov	r1, r3
 8007c60:	4610      	mov	r0, r2
 8007c62:	f7fe f893 	bl	8005d8c <vListInsert>
 8007c66:	e012      	b.n	8007c8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d206      	bcs.n	8007c7e <prvInsertTimerInActiveList+0x62>
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d302      	bcc.n	8007c7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	617b      	str	r3, [r7, #20]
 8007c7c:	e007      	b.n	8007c8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c7e:	4b07      	ldr	r3, [pc, #28]	; (8007c9c <prvInsertTimerInActiveList+0x80>)
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	3304      	adds	r3, #4
 8007c86:	4619      	mov	r1, r3
 8007c88:	4610      	mov	r0, r2
 8007c8a:	f7fe f87f 	bl	8005d8c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c8e:	697b      	ldr	r3, [r7, #20]
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3718      	adds	r7, #24
 8007c94:	46bd      	mov	sp, r7
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	20000f70 	.word	0x20000f70
 8007c9c:	20000f6c 	.word	0x20000f6c

08007ca0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b08e      	sub	sp, #56	; 0x38
 8007ca4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007ca6:	e0ca      	b.n	8007e3e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	da18      	bge.n	8007ce0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cae:	1d3b      	adds	r3, r7, #4
 8007cb0:	3304      	adds	r3, #4
 8007cb2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d10a      	bne.n	8007cd0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cbe:	f383 8811 	msr	BASEPRI, r3
 8007cc2:	f3bf 8f6f 	isb	sy
 8007cc6:	f3bf 8f4f 	dsb	sy
 8007cca:	61fb      	str	r3, [r7, #28]
}
 8007ccc:	bf00      	nop
 8007cce:	e7fe      	b.n	8007cce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cd6:	6850      	ldr	r0, [r2, #4]
 8007cd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cda:	6892      	ldr	r2, [r2, #8]
 8007cdc:	4611      	mov	r1, r2
 8007cde:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f2c0 80aa 	blt.w	8007e3c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cee:	695b      	ldr	r3, [r3, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d004      	beq.n	8007cfe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	3304      	adds	r3, #4
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fe f880 	bl	8005dfe <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cfe:	463b      	mov	r3, r7
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7ff ff6b 	bl	8007bdc <prvSampleTimeNow>
 8007d06:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b09      	cmp	r3, #9
 8007d0c:	f200 8097 	bhi.w	8007e3e <prvProcessReceivedCommands+0x19e>
 8007d10:	a201      	add	r2, pc, #4	; (adr r2, 8007d18 <prvProcessReceivedCommands+0x78>)
 8007d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d16:	bf00      	nop
 8007d18:	08007d41 	.word	0x08007d41
 8007d1c:	08007d41 	.word	0x08007d41
 8007d20:	08007d41 	.word	0x08007d41
 8007d24:	08007db5 	.word	0x08007db5
 8007d28:	08007dc9 	.word	0x08007dc9
 8007d2c:	08007e13 	.word	0x08007e13
 8007d30:	08007d41 	.word	0x08007d41
 8007d34:	08007d41 	.word	0x08007d41
 8007d38:	08007db5 	.word	0x08007db5
 8007d3c:	08007dc9 	.word	0x08007dc9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d46:	f043 0301 	orr.w	r3, r3, #1
 8007d4a:	b2da      	uxtb	r2, r3
 8007d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d52:	68ba      	ldr	r2, [r7, #8]
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	699b      	ldr	r3, [r3, #24]
 8007d58:	18d1      	adds	r1, r2, r3
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d60:	f7ff ff5c 	bl	8007c1c <prvInsertTimerInActiveList>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d069      	beq.n	8007e3e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6c:	6a1b      	ldr	r3, [r3, #32]
 8007d6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d78:	f003 0304 	and.w	r3, r3, #4
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d05e      	beq.n	8007e3e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d80:	68ba      	ldr	r2, [r7, #8]
 8007d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	441a      	add	r2, r3
 8007d88:	2300      	movs	r3, #0
 8007d8a:	9300      	str	r3, [sp, #0]
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	2100      	movs	r1, #0
 8007d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d92:	f7ff fe05 	bl	80079a0 <xTimerGenericCommand>
 8007d96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d98:	6a3b      	ldr	r3, [r7, #32]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d14f      	bne.n	8007e3e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	61bb      	str	r3, [r7, #24]
}
 8007db0:	bf00      	nop
 8007db2:	e7fe      	b.n	8007db2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007db6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dba:	f023 0301 	bic.w	r3, r3, #1
 8007dbe:	b2da      	uxtb	r2, r3
 8007dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007dc6:	e03a      	b.n	8007e3e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dce:	f043 0301 	orr.w	r3, r3, #1
 8007dd2:	b2da      	uxtb	r2, r3
 8007dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10a      	bne.n	8007dfe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dec:	f383 8811 	msr	BASEPRI, r3
 8007df0:	f3bf 8f6f 	isb	sy
 8007df4:	f3bf 8f4f 	dsb	sy
 8007df8:	617b      	str	r3, [r7, #20]
}
 8007dfa:	bf00      	nop
 8007dfc:	e7fe      	b.n	8007dfc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	699a      	ldr	r2, [r3, #24]
 8007e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e04:	18d1      	adds	r1, r2, r3
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e0c:	f7ff ff06 	bl	8007c1c <prvInsertTimerInActiveList>
					break;
 8007e10:	e015      	b.n	8007e3e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e14:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e18:	f003 0302 	and.w	r3, r3, #2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d103      	bne.n	8007e28 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007e20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e22:	f000 fbdd 	bl	80085e0 <vPortFree>
 8007e26:	e00a      	b.n	8007e3e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e2e:	f023 0301 	bic.w	r3, r3, #1
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e3a:	e000      	b.n	8007e3e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007e3c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e3e:	4b08      	ldr	r3, [pc, #32]	; (8007e60 <prvProcessReceivedCommands+0x1c0>)
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	1d39      	adds	r1, r7, #4
 8007e44:	2200      	movs	r2, #0
 8007e46:	4618      	mov	r0, r3
 8007e48:	f7fe fadc 	bl	8006404 <xQueueReceive>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	f47f af2a 	bne.w	8007ca8 <prvProcessReceivedCommands+0x8>
	}
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	3730      	adds	r7, #48	; 0x30
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000f74 	.word	0x20000f74

08007e64 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b088      	sub	sp, #32
 8007e68:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e6a:	e048      	b.n	8007efe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e6c:	4b2d      	ldr	r3, [pc, #180]	; (8007f24 <prvSwitchTimerLists+0xc0>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e76:	4b2b      	ldr	r3, [pc, #172]	; (8007f24 <prvSwitchTimerLists+0xc0>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	3304      	adds	r3, #4
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fd ffba 	bl	8005dfe <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	6a1b      	ldr	r3, [r3, #32]
 8007e8e:	68f8      	ldr	r0, [r7, #12]
 8007e90:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d02e      	beq.n	8007efe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	699b      	ldr	r3, [r3, #24]
 8007ea4:	693a      	ldr	r2, [r7, #16]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d90e      	bls.n	8007ed0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	68fa      	ldr	r2, [r7, #12]
 8007ebc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ebe:	4b19      	ldr	r3, [pc, #100]	; (8007f24 <prvSwitchTimerLists+0xc0>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	4619      	mov	r1, r3
 8007ec8:	4610      	mov	r0, r2
 8007eca:	f7fd ff5f 	bl	8005d8c <vListInsert>
 8007ece:	e016      	b.n	8007efe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	2100      	movs	r1, #0
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f7ff fd60 	bl	80079a0 <xTimerGenericCommand>
 8007ee0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10a      	bne.n	8007efe <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eec:	f383 8811 	msr	BASEPRI, r3
 8007ef0:	f3bf 8f6f 	isb	sy
 8007ef4:	f3bf 8f4f 	dsb	sy
 8007ef8:	603b      	str	r3, [r7, #0]
}
 8007efa:	bf00      	nop
 8007efc:	e7fe      	b.n	8007efc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007efe:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <prvSwitchTimerLists+0xc0>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1b1      	bne.n	8007e6c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f08:	4b06      	ldr	r3, [pc, #24]	; (8007f24 <prvSwitchTimerLists+0xc0>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f0e:	4b06      	ldr	r3, [pc, #24]	; (8007f28 <prvSwitchTimerLists+0xc4>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4a04      	ldr	r2, [pc, #16]	; (8007f24 <prvSwitchTimerLists+0xc0>)
 8007f14:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f16:	4a04      	ldr	r2, [pc, #16]	; (8007f28 <prvSwitchTimerLists+0xc4>)
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	6013      	str	r3, [r2, #0]
}
 8007f1c:	bf00      	nop
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}
 8007f24:	20000f6c 	.word	0x20000f6c
 8007f28:	20000f70 	.word	0x20000f70

08007f2c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f32:	f000 f967 	bl	8008204 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f36:	4b15      	ldr	r3, [pc, #84]	; (8007f8c <prvCheckForValidListAndQueue+0x60>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d120      	bne.n	8007f80 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f3e:	4814      	ldr	r0, [pc, #80]	; (8007f90 <prvCheckForValidListAndQueue+0x64>)
 8007f40:	f7fd fed3 	bl	8005cea <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f44:	4813      	ldr	r0, [pc, #76]	; (8007f94 <prvCheckForValidListAndQueue+0x68>)
 8007f46:	f7fd fed0 	bl	8005cea <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f4a:	4b13      	ldr	r3, [pc, #76]	; (8007f98 <prvCheckForValidListAndQueue+0x6c>)
 8007f4c:	4a10      	ldr	r2, [pc, #64]	; (8007f90 <prvCheckForValidListAndQueue+0x64>)
 8007f4e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f50:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <prvCheckForValidListAndQueue+0x70>)
 8007f52:	4a10      	ldr	r2, [pc, #64]	; (8007f94 <prvCheckForValidListAndQueue+0x68>)
 8007f54:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f56:	2300      	movs	r3, #0
 8007f58:	9300      	str	r3, [sp, #0]
 8007f5a:	4b11      	ldr	r3, [pc, #68]	; (8007fa0 <prvCheckForValidListAndQueue+0x74>)
 8007f5c:	4a11      	ldr	r2, [pc, #68]	; (8007fa4 <prvCheckForValidListAndQueue+0x78>)
 8007f5e:	2110      	movs	r1, #16
 8007f60:	200a      	movs	r0, #10
 8007f62:	f7fd ffdf 	bl	8005f24 <xQueueGenericCreateStatic>
 8007f66:	4603      	mov	r3, r0
 8007f68:	4a08      	ldr	r2, [pc, #32]	; (8007f8c <prvCheckForValidListAndQueue+0x60>)
 8007f6a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f6c:	4b07      	ldr	r3, [pc, #28]	; (8007f8c <prvCheckForValidListAndQueue+0x60>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d005      	beq.n	8007f80 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f74:	4b05      	ldr	r3, [pc, #20]	; (8007f8c <prvCheckForValidListAndQueue+0x60>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	490b      	ldr	r1, [pc, #44]	; (8007fa8 <prvCheckForValidListAndQueue+0x7c>)
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7fe fcb2 	bl	80068e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f80:	f000 f970 	bl	8008264 <vPortExitCritical>
}
 8007f84:	bf00      	nop
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	20000f74 	.word	0x20000f74
 8007f90:	20000f44 	.word	0x20000f44
 8007f94:	20000f58 	.word	0x20000f58
 8007f98:	20000f6c 	.word	0x20000f6c
 8007f9c:	20000f70 	.word	0x20000f70
 8007fa0:	20001020 	.word	0x20001020
 8007fa4:	20000f80 	.word	0x20000f80
 8007fa8:	08008a90 	.word	0x08008a90

08007fac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007fac:	b480      	push	{r7}
 8007fae:	b085      	sub	sp, #20
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	3b04      	subs	r3, #4
 8007fbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	3b04      	subs	r3, #4
 8007fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	f023 0201 	bic.w	r2, r3, #1
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	3b04      	subs	r3, #4
 8007fda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007fdc:	4a0c      	ldr	r2, [pc, #48]	; (8008010 <pxPortInitialiseStack+0x64>)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	3b14      	subs	r3, #20
 8007fe6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	3b04      	subs	r3, #4
 8007ff2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f06f 0202 	mvn.w	r2, #2
 8007ffa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	3b20      	subs	r3, #32
 8008000:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008002:	68fb      	ldr	r3, [r7, #12]
}
 8008004:	4618      	mov	r0, r3
 8008006:	3714      	adds	r7, #20
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	08008015 	.word	0x08008015

08008014 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800801a:	2300      	movs	r3, #0
 800801c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800801e:	4b12      	ldr	r3, [pc, #72]	; (8008068 <prvTaskExitError+0x54>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008026:	d00a      	beq.n	800803e <prvTaskExitError+0x2a>
	__asm volatile
 8008028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800802c:	f383 8811 	msr	BASEPRI, r3
 8008030:	f3bf 8f6f 	isb	sy
 8008034:	f3bf 8f4f 	dsb	sy
 8008038:	60fb      	str	r3, [r7, #12]
}
 800803a:	bf00      	nop
 800803c:	e7fe      	b.n	800803c <prvTaskExitError+0x28>
	__asm volatile
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	60bb      	str	r3, [r7, #8]
}
 8008050:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008052:	bf00      	nop
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d0fc      	beq.n	8008054 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800805a:	bf00      	nop
 800805c:	bf00      	nop
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	20000010 	.word	0x20000010
 800806c:	00000000 	.word	0x00000000

08008070 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008070:	4b07      	ldr	r3, [pc, #28]	; (8008090 <pxCurrentTCBConst2>)
 8008072:	6819      	ldr	r1, [r3, #0]
 8008074:	6808      	ldr	r0, [r1, #0]
 8008076:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800807a:	f380 8809 	msr	PSP, r0
 800807e:	f3bf 8f6f 	isb	sy
 8008082:	f04f 0000 	mov.w	r0, #0
 8008086:	f380 8811 	msr	BASEPRI, r0
 800808a:	4770      	bx	lr
 800808c:	f3af 8000 	nop.w

08008090 <pxCurrentTCBConst2>:
 8008090:	20000a44 	.word	0x20000a44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008094:	bf00      	nop
 8008096:	bf00      	nop

08008098 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008098:	4808      	ldr	r0, [pc, #32]	; (80080bc <prvPortStartFirstTask+0x24>)
 800809a:	6800      	ldr	r0, [r0, #0]
 800809c:	6800      	ldr	r0, [r0, #0]
 800809e:	f380 8808 	msr	MSP, r0
 80080a2:	f04f 0000 	mov.w	r0, #0
 80080a6:	f380 8814 	msr	CONTROL, r0
 80080aa:	b662      	cpsie	i
 80080ac:	b661      	cpsie	f
 80080ae:	f3bf 8f4f 	dsb	sy
 80080b2:	f3bf 8f6f 	isb	sy
 80080b6:	df00      	svc	0
 80080b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80080ba:	bf00      	nop
 80080bc:	e000ed08 	.word	0xe000ed08

080080c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80080c6:	4b46      	ldr	r3, [pc, #280]	; (80081e0 <xPortStartScheduler+0x120>)
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a46      	ldr	r2, [pc, #280]	; (80081e4 <xPortStartScheduler+0x124>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d10a      	bne.n	80080e6 <xPortStartScheduler+0x26>
	__asm volatile
 80080d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d4:	f383 8811 	msr	BASEPRI, r3
 80080d8:	f3bf 8f6f 	isb	sy
 80080dc:	f3bf 8f4f 	dsb	sy
 80080e0:	613b      	str	r3, [r7, #16]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80080e6:	4b3e      	ldr	r3, [pc, #248]	; (80081e0 <xPortStartScheduler+0x120>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a3f      	ldr	r2, [pc, #252]	; (80081e8 <xPortStartScheduler+0x128>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d10a      	bne.n	8008106 <xPortStartScheduler+0x46>
	__asm volatile
 80080f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f4:	f383 8811 	msr	BASEPRI, r3
 80080f8:	f3bf 8f6f 	isb	sy
 80080fc:	f3bf 8f4f 	dsb	sy
 8008100:	60fb      	str	r3, [r7, #12]
}
 8008102:	bf00      	nop
 8008104:	e7fe      	b.n	8008104 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008106:	4b39      	ldr	r3, [pc, #228]	; (80081ec <xPortStartScheduler+0x12c>)
 8008108:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b2db      	uxtb	r3, r3
 8008110:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	22ff      	movs	r2, #255	; 0xff
 8008116:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	b2db      	uxtb	r3, r3
 800811e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008120:	78fb      	ldrb	r3, [r7, #3]
 8008122:	b2db      	uxtb	r3, r3
 8008124:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008128:	b2da      	uxtb	r2, r3
 800812a:	4b31      	ldr	r3, [pc, #196]	; (80081f0 <xPortStartScheduler+0x130>)
 800812c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800812e:	4b31      	ldr	r3, [pc, #196]	; (80081f4 <xPortStartScheduler+0x134>)
 8008130:	2207      	movs	r2, #7
 8008132:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008134:	e009      	b.n	800814a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008136:	4b2f      	ldr	r3, [pc, #188]	; (80081f4 <xPortStartScheduler+0x134>)
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3b01      	subs	r3, #1
 800813c:	4a2d      	ldr	r2, [pc, #180]	; (80081f4 <xPortStartScheduler+0x134>)
 800813e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008140:	78fb      	ldrb	r3, [r7, #3]
 8008142:	b2db      	uxtb	r3, r3
 8008144:	005b      	lsls	r3, r3, #1
 8008146:	b2db      	uxtb	r3, r3
 8008148:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800814a:	78fb      	ldrb	r3, [r7, #3]
 800814c:	b2db      	uxtb	r3, r3
 800814e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008152:	2b80      	cmp	r3, #128	; 0x80
 8008154:	d0ef      	beq.n	8008136 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008156:	4b27      	ldr	r3, [pc, #156]	; (80081f4 <xPortStartScheduler+0x134>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f1c3 0307 	rsb	r3, r3, #7
 800815e:	2b04      	cmp	r3, #4
 8008160:	d00a      	beq.n	8008178 <xPortStartScheduler+0xb8>
	__asm volatile
 8008162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008166:	f383 8811 	msr	BASEPRI, r3
 800816a:	f3bf 8f6f 	isb	sy
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	60bb      	str	r3, [r7, #8]
}
 8008174:	bf00      	nop
 8008176:	e7fe      	b.n	8008176 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008178:	4b1e      	ldr	r3, [pc, #120]	; (80081f4 <xPortStartScheduler+0x134>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	4a1d      	ldr	r2, [pc, #116]	; (80081f4 <xPortStartScheduler+0x134>)
 8008180:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008182:	4b1c      	ldr	r3, [pc, #112]	; (80081f4 <xPortStartScheduler+0x134>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800818a:	4a1a      	ldr	r2, [pc, #104]	; (80081f4 <xPortStartScheduler+0x134>)
 800818c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	b2da      	uxtb	r2, r3
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008196:	4b18      	ldr	r3, [pc, #96]	; (80081f8 <xPortStartScheduler+0x138>)
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a17      	ldr	r2, [pc, #92]	; (80081f8 <xPortStartScheduler+0x138>)
 800819c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80081a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80081a2:	4b15      	ldr	r3, [pc, #84]	; (80081f8 <xPortStartScheduler+0x138>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a14      	ldr	r2, [pc, #80]	; (80081f8 <xPortStartScheduler+0x138>)
 80081a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80081ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80081ae:	f000 f8dd 	bl	800836c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80081b2:	4b12      	ldr	r3, [pc, #72]	; (80081fc <xPortStartScheduler+0x13c>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80081b8:	f000 f8fc 	bl	80083b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80081bc:	4b10      	ldr	r3, [pc, #64]	; (8008200 <xPortStartScheduler+0x140>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a0f      	ldr	r2, [pc, #60]	; (8008200 <xPortStartScheduler+0x140>)
 80081c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80081c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80081c8:	f7ff ff66 	bl	8008098 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80081cc:	f7ff f84a 	bl	8007264 <vTaskSwitchContext>
	prvTaskExitError();
 80081d0:	f7ff ff20 	bl	8008014 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3718      	adds	r7, #24
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	bf00      	nop
 80081e0:	e000ed00 	.word	0xe000ed00
 80081e4:	410fc271 	.word	0x410fc271
 80081e8:	410fc270 	.word	0x410fc270
 80081ec:	e000e400 	.word	0xe000e400
 80081f0:	20001070 	.word	0x20001070
 80081f4:	20001074 	.word	0x20001074
 80081f8:	e000ed20 	.word	0xe000ed20
 80081fc:	20000010 	.word	0x20000010
 8008200:	e000ef34 	.word	0xe000ef34

08008204 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008204:	b480      	push	{r7}
 8008206:	b083      	sub	sp, #12
 8008208:	af00      	add	r7, sp, #0
	__asm volatile
 800820a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800820e:	f383 8811 	msr	BASEPRI, r3
 8008212:	f3bf 8f6f 	isb	sy
 8008216:	f3bf 8f4f 	dsb	sy
 800821a:	607b      	str	r3, [r7, #4]
}
 800821c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800821e:	4b0f      	ldr	r3, [pc, #60]	; (800825c <vPortEnterCritical+0x58>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	3301      	adds	r3, #1
 8008224:	4a0d      	ldr	r2, [pc, #52]	; (800825c <vPortEnterCritical+0x58>)
 8008226:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008228:	4b0c      	ldr	r3, [pc, #48]	; (800825c <vPortEnterCritical+0x58>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d10f      	bne.n	8008250 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008230:	4b0b      	ldr	r3, [pc, #44]	; (8008260 <vPortEnterCritical+0x5c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	b2db      	uxtb	r3, r3
 8008236:	2b00      	cmp	r3, #0
 8008238:	d00a      	beq.n	8008250 <vPortEnterCritical+0x4c>
	__asm volatile
 800823a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800823e:	f383 8811 	msr	BASEPRI, r3
 8008242:	f3bf 8f6f 	isb	sy
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	603b      	str	r3, [r7, #0]
}
 800824c:	bf00      	nop
 800824e:	e7fe      	b.n	800824e <vPortEnterCritical+0x4a>
	}
}
 8008250:	bf00      	nop
 8008252:	370c      	adds	r7, #12
 8008254:	46bd      	mov	sp, r7
 8008256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825a:	4770      	bx	lr
 800825c:	20000010 	.word	0x20000010
 8008260:	e000ed04 	.word	0xe000ed04

08008264 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008264:	b480      	push	{r7}
 8008266:	b083      	sub	sp, #12
 8008268:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800826a:	4b12      	ldr	r3, [pc, #72]	; (80082b4 <vPortExitCritical+0x50>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10a      	bne.n	8008288 <vPortExitCritical+0x24>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	607b      	str	r3, [r7, #4]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008288:	4b0a      	ldr	r3, [pc, #40]	; (80082b4 <vPortExitCritical+0x50>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	3b01      	subs	r3, #1
 800828e:	4a09      	ldr	r2, [pc, #36]	; (80082b4 <vPortExitCritical+0x50>)
 8008290:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008292:	4b08      	ldr	r3, [pc, #32]	; (80082b4 <vPortExitCritical+0x50>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d105      	bne.n	80082a6 <vPortExitCritical+0x42>
 800829a:	2300      	movs	r3, #0
 800829c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	f383 8811 	msr	BASEPRI, r3
}
 80082a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80082a6:	bf00      	nop
 80082a8:	370c      	adds	r7, #12
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	20000010 	.word	0x20000010
	...

080082c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80082c0:	f3ef 8009 	mrs	r0, PSP
 80082c4:	f3bf 8f6f 	isb	sy
 80082c8:	4b15      	ldr	r3, [pc, #84]	; (8008320 <pxCurrentTCBConst>)
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	f01e 0f10 	tst.w	lr, #16
 80082d0:	bf08      	it	eq
 80082d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80082d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082da:	6010      	str	r0, [r2, #0]
 80082dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80082e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80082e4:	f380 8811 	msr	BASEPRI, r0
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f7fe ffb8 	bl	8007264 <vTaskSwitchContext>
 80082f4:	f04f 0000 	mov.w	r0, #0
 80082f8:	f380 8811 	msr	BASEPRI, r0
 80082fc:	bc09      	pop	{r0, r3}
 80082fe:	6819      	ldr	r1, [r3, #0]
 8008300:	6808      	ldr	r0, [r1, #0]
 8008302:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008306:	f01e 0f10 	tst.w	lr, #16
 800830a:	bf08      	it	eq
 800830c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008310:	f380 8809 	msr	PSP, r0
 8008314:	f3bf 8f6f 	isb	sy
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	f3af 8000 	nop.w

08008320 <pxCurrentTCBConst>:
 8008320:	20000a44 	.word	0x20000a44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008324:	bf00      	nop
 8008326:	bf00      	nop

08008328 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
	__asm volatile
 800832e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008332:	f383 8811 	msr	BASEPRI, r3
 8008336:	f3bf 8f6f 	isb	sy
 800833a:	f3bf 8f4f 	dsb	sy
 800833e:	607b      	str	r3, [r7, #4]
}
 8008340:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008342:	f7fe fed5 	bl	80070f0 <xTaskIncrementTick>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800834c:	4b06      	ldr	r3, [pc, #24]	; (8008368 <xPortSysTickHandler+0x40>)
 800834e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008352:	601a      	str	r2, [r3, #0]
 8008354:	2300      	movs	r3, #0
 8008356:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	f383 8811 	msr	BASEPRI, r3
}
 800835e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008360:	bf00      	nop
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}
 8008368:	e000ed04 	.word	0xe000ed04

0800836c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800836c:	b480      	push	{r7}
 800836e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008370:	4b0b      	ldr	r3, [pc, #44]	; (80083a0 <vPortSetupTimerInterrupt+0x34>)
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008376:	4b0b      	ldr	r3, [pc, #44]	; (80083a4 <vPortSetupTimerInterrupt+0x38>)
 8008378:	2200      	movs	r2, #0
 800837a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800837c:	4b0a      	ldr	r3, [pc, #40]	; (80083a8 <vPortSetupTimerInterrupt+0x3c>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4a0a      	ldr	r2, [pc, #40]	; (80083ac <vPortSetupTimerInterrupt+0x40>)
 8008382:	fba2 2303 	umull	r2, r3, r2, r3
 8008386:	099b      	lsrs	r3, r3, #6
 8008388:	4a09      	ldr	r2, [pc, #36]	; (80083b0 <vPortSetupTimerInterrupt+0x44>)
 800838a:	3b01      	subs	r3, #1
 800838c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800838e:	4b04      	ldr	r3, [pc, #16]	; (80083a0 <vPortSetupTimerInterrupt+0x34>)
 8008390:	2207      	movs	r2, #7
 8008392:	601a      	str	r2, [r3, #0]
}
 8008394:	bf00      	nop
 8008396:	46bd      	mov	sp, r7
 8008398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839c:	4770      	bx	lr
 800839e:	bf00      	nop
 80083a0:	e000e010 	.word	0xe000e010
 80083a4:	e000e018 	.word	0xe000e018
 80083a8:	20000004 	.word	0x20000004
 80083ac:	10624dd3 	.word	0x10624dd3
 80083b0:	e000e014 	.word	0xe000e014

080083b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80083b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80083c4 <vPortEnableVFP+0x10>
 80083b8:	6801      	ldr	r1, [r0, #0]
 80083ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80083be:	6001      	str	r1, [r0, #0]
 80083c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80083c2:	bf00      	nop
 80083c4:	e000ed88 	.word	0xe000ed88

080083c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80083c8:	b480      	push	{r7}
 80083ca:	b085      	sub	sp, #20
 80083cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80083ce:	f3ef 8305 	mrs	r3, IPSR
 80083d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2b0f      	cmp	r3, #15
 80083d8:	d914      	bls.n	8008404 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80083da:	4a17      	ldr	r2, [pc, #92]	; (8008438 <vPortValidateInterruptPriority+0x70>)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	4413      	add	r3, r2
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80083e4:	4b15      	ldr	r3, [pc, #84]	; (800843c <vPortValidateInterruptPriority+0x74>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	7afa      	ldrb	r2, [r7, #11]
 80083ea:	429a      	cmp	r2, r3
 80083ec:	d20a      	bcs.n	8008404 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	607b      	str	r3, [r7, #4]
}
 8008400:	bf00      	nop
 8008402:	e7fe      	b.n	8008402 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008404:	4b0e      	ldr	r3, [pc, #56]	; (8008440 <vPortValidateInterruptPriority+0x78>)
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800840c:	4b0d      	ldr	r3, [pc, #52]	; (8008444 <vPortValidateInterruptPriority+0x7c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	429a      	cmp	r2, r3
 8008412:	d90a      	bls.n	800842a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	603b      	str	r3, [r7, #0]
}
 8008426:	bf00      	nop
 8008428:	e7fe      	b.n	8008428 <vPortValidateInterruptPriority+0x60>
	}
 800842a:	bf00      	nop
 800842c:	3714      	adds	r7, #20
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop
 8008438:	e000e3f0 	.word	0xe000e3f0
 800843c:	20001070 	.word	0x20001070
 8008440:	e000ed0c 	.word	0xe000ed0c
 8008444:	20001074 	.word	0x20001074

08008448 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b08a      	sub	sp, #40	; 0x28
 800844c:	af00      	add	r7, sp, #0
 800844e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008450:	2300      	movs	r3, #0
 8008452:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008454:	f7fe fd90 	bl	8006f78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008458:	4b5b      	ldr	r3, [pc, #364]	; (80085c8 <pvPortMalloc+0x180>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d101      	bne.n	8008464 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008460:	f000 f920 	bl	80086a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008464:	4b59      	ldr	r3, [pc, #356]	; (80085cc <pvPortMalloc+0x184>)
 8008466:	681a      	ldr	r2, [r3, #0]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	4013      	ands	r3, r2
 800846c:	2b00      	cmp	r3, #0
 800846e:	f040 8093 	bne.w	8008598 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01d      	beq.n	80084b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008478:	2208      	movs	r2, #8
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	4413      	add	r3, r2
 800847e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	2b00      	cmp	r3, #0
 8008488:	d014      	beq.n	80084b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f023 0307 	bic.w	r3, r3, #7
 8008490:	3308      	adds	r3, #8
 8008492:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f003 0307 	and.w	r3, r3, #7
 800849a:	2b00      	cmp	r3, #0
 800849c:	d00a      	beq.n	80084b4 <pvPortMalloc+0x6c>
	__asm volatile
 800849e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a2:	f383 8811 	msr	BASEPRI, r3
 80084a6:	f3bf 8f6f 	isb	sy
 80084aa:	f3bf 8f4f 	dsb	sy
 80084ae:	617b      	str	r3, [r7, #20]
}
 80084b0:	bf00      	nop
 80084b2:	e7fe      	b.n	80084b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d06e      	beq.n	8008598 <pvPortMalloc+0x150>
 80084ba:	4b45      	ldr	r3, [pc, #276]	; (80085d0 <pvPortMalloc+0x188>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	687a      	ldr	r2, [r7, #4]
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d869      	bhi.n	8008598 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80084c4:	4b43      	ldr	r3, [pc, #268]	; (80085d4 <pvPortMalloc+0x18c>)
 80084c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80084c8:	4b42      	ldr	r3, [pc, #264]	; (80085d4 <pvPortMalloc+0x18c>)
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084ce:	e004      	b.n	80084da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80084d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80084d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80084da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d903      	bls.n	80084ec <pvPortMalloc+0xa4>
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d1f1      	bne.n	80084d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80084ec:	4b36      	ldr	r3, [pc, #216]	; (80085c8 <pvPortMalloc+0x180>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084f2:	429a      	cmp	r2, r3
 80084f4:	d050      	beq.n	8008598 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80084f6:	6a3b      	ldr	r3, [r7, #32]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	2208      	movs	r2, #8
 80084fc:	4413      	add	r3, r2
 80084fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	6a3b      	ldr	r3, [r7, #32]
 8008506:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	1ad2      	subs	r2, r2, r3
 8008510:	2308      	movs	r3, #8
 8008512:	005b      	lsls	r3, r3, #1
 8008514:	429a      	cmp	r2, r3
 8008516:	d91f      	bls.n	8008558 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	4413      	add	r3, r2
 800851e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008520:	69bb      	ldr	r3, [r7, #24]
 8008522:	f003 0307 	and.w	r3, r3, #7
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00a      	beq.n	8008540 <pvPortMalloc+0xf8>
	__asm volatile
 800852a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852e:	f383 8811 	msr	BASEPRI, r3
 8008532:	f3bf 8f6f 	isb	sy
 8008536:	f3bf 8f4f 	dsb	sy
 800853a:	613b      	str	r3, [r7, #16]
}
 800853c:	bf00      	nop
 800853e:	e7fe      	b.n	800853e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	685a      	ldr	r2, [r3, #4]
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	1ad2      	subs	r2, r2, r3
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008552:	69b8      	ldr	r0, [r7, #24]
 8008554:	f000 f908 	bl	8008768 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008558:	4b1d      	ldr	r3, [pc, #116]	; (80085d0 <pvPortMalloc+0x188>)
 800855a:	681a      	ldr	r2, [r3, #0]
 800855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855e:	685b      	ldr	r3, [r3, #4]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	4a1b      	ldr	r2, [pc, #108]	; (80085d0 <pvPortMalloc+0x188>)
 8008564:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008566:	4b1a      	ldr	r3, [pc, #104]	; (80085d0 <pvPortMalloc+0x188>)
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	4b1b      	ldr	r3, [pc, #108]	; (80085d8 <pvPortMalloc+0x190>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	429a      	cmp	r2, r3
 8008570:	d203      	bcs.n	800857a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008572:	4b17      	ldr	r3, [pc, #92]	; (80085d0 <pvPortMalloc+0x188>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a18      	ldr	r2, [pc, #96]	; (80085d8 <pvPortMalloc+0x190>)
 8008578:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800857a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857c:	685a      	ldr	r2, [r3, #4]
 800857e:	4b13      	ldr	r3, [pc, #76]	; (80085cc <pvPortMalloc+0x184>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	431a      	orrs	r2, r3
 8008584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008586:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	2200      	movs	r2, #0
 800858c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800858e:	4b13      	ldr	r3, [pc, #76]	; (80085dc <pvPortMalloc+0x194>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3301      	adds	r3, #1
 8008594:	4a11      	ldr	r2, [pc, #68]	; (80085dc <pvPortMalloc+0x194>)
 8008596:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008598:	f7fe fcfc 	bl	8006f94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800859c:	69fb      	ldr	r3, [r7, #28]
 800859e:	f003 0307 	and.w	r3, r3, #7
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00a      	beq.n	80085bc <pvPortMalloc+0x174>
	__asm volatile
 80085a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085aa:	f383 8811 	msr	BASEPRI, r3
 80085ae:	f3bf 8f6f 	isb	sy
 80085b2:	f3bf 8f4f 	dsb	sy
 80085b6:	60fb      	str	r3, [r7, #12]
}
 80085b8:	bf00      	nop
 80085ba:	e7fe      	b.n	80085ba <pvPortMalloc+0x172>
	return pvReturn;
 80085bc:	69fb      	ldr	r3, [r7, #28]
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3728      	adds	r7, #40	; 0x28
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}
 80085c6:	bf00      	nop
 80085c8:	20001c38 	.word	0x20001c38
 80085cc:	20001c4c 	.word	0x20001c4c
 80085d0:	20001c3c 	.word	0x20001c3c
 80085d4:	20001c30 	.word	0x20001c30
 80085d8:	20001c40 	.word	0x20001c40
 80085dc:	20001c44 	.word	0x20001c44

080085e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d04d      	beq.n	800868e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80085f2:	2308      	movs	r3, #8
 80085f4:	425b      	negs	r3, r3
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	4413      	add	r3, r2
 80085fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008600:	693b      	ldr	r3, [r7, #16]
 8008602:	685a      	ldr	r2, [r3, #4]
 8008604:	4b24      	ldr	r3, [pc, #144]	; (8008698 <vPortFree+0xb8>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4013      	ands	r3, r2
 800860a:	2b00      	cmp	r3, #0
 800860c:	d10a      	bne.n	8008624 <vPortFree+0x44>
	__asm volatile
 800860e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008612:	f383 8811 	msr	BASEPRI, r3
 8008616:	f3bf 8f6f 	isb	sy
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	60fb      	str	r3, [r7, #12]
}
 8008620:	bf00      	nop
 8008622:	e7fe      	b.n	8008622 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d00a      	beq.n	8008642 <vPortFree+0x62>
	__asm volatile
 800862c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008630:	f383 8811 	msr	BASEPRI, r3
 8008634:	f3bf 8f6f 	isb	sy
 8008638:	f3bf 8f4f 	dsb	sy
 800863c:	60bb      	str	r3, [r7, #8]
}
 800863e:	bf00      	nop
 8008640:	e7fe      	b.n	8008640 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008642:	693b      	ldr	r3, [r7, #16]
 8008644:	685a      	ldr	r2, [r3, #4]
 8008646:	4b14      	ldr	r3, [pc, #80]	; (8008698 <vPortFree+0xb8>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4013      	ands	r3, r2
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01e      	beq.n	800868e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d11a      	bne.n	800868e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	685a      	ldr	r2, [r3, #4]
 800865c:	4b0e      	ldr	r3, [pc, #56]	; (8008698 <vPortFree+0xb8>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	43db      	mvns	r3, r3
 8008662:	401a      	ands	r2, r3
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008668:	f7fe fc86 	bl	8006f78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800866c:	693b      	ldr	r3, [r7, #16]
 800866e:	685a      	ldr	r2, [r3, #4]
 8008670:	4b0a      	ldr	r3, [pc, #40]	; (800869c <vPortFree+0xbc>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4413      	add	r3, r2
 8008676:	4a09      	ldr	r2, [pc, #36]	; (800869c <vPortFree+0xbc>)
 8008678:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800867a:	6938      	ldr	r0, [r7, #16]
 800867c:	f000 f874 	bl	8008768 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008680:	4b07      	ldr	r3, [pc, #28]	; (80086a0 <vPortFree+0xc0>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3301      	adds	r3, #1
 8008686:	4a06      	ldr	r2, [pc, #24]	; (80086a0 <vPortFree+0xc0>)
 8008688:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800868a:	f7fe fc83 	bl	8006f94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800868e:	bf00      	nop
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
 8008696:	bf00      	nop
 8008698:	20001c4c 	.word	0x20001c4c
 800869c:	20001c3c 	.word	0x20001c3c
 80086a0:	20001c48 	.word	0x20001c48

080086a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80086a4:	b480      	push	{r7}
 80086a6:	b085      	sub	sp, #20
 80086a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80086aa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80086ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80086b0:	4b27      	ldr	r3, [pc, #156]	; (8008750 <prvHeapInit+0xac>)
 80086b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d00c      	beq.n	80086d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	3307      	adds	r3, #7
 80086c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	f023 0307 	bic.w	r3, r3, #7
 80086ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	1ad3      	subs	r3, r2, r3
 80086d2:	4a1f      	ldr	r2, [pc, #124]	; (8008750 <prvHeapInit+0xac>)
 80086d4:	4413      	add	r3, r2
 80086d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80086dc:	4a1d      	ldr	r2, [pc, #116]	; (8008754 <prvHeapInit+0xb0>)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80086e2:	4b1c      	ldr	r3, [pc, #112]	; (8008754 <prvHeapInit+0xb0>)
 80086e4:	2200      	movs	r2, #0
 80086e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	68ba      	ldr	r2, [r7, #8]
 80086ec:	4413      	add	r3, r2
 80086ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80086f0:	2208      	movs	r2, #8
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	1a9b      	subs	r3, r3, r2
 80086f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	f023 0307 	bic.w	r3, r3, #7
 80086fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	4a15      	ldr	r2, [pc, #84]	; (8008758 <prvHeapInit+0xb4>)
 8008704:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008706:	4b14      	ldr	r3, [pc, #80]	; (8008758 <prvHeapInit+0xb4>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2200      	movs	r2, #0
 800870c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800870e:	4b12      	ldr	r3, [pc, #72]	; (8008758 <prvHeapInit+0xb4>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2200      	movs	r2, #0
 8008714:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	68fa      	ldr	r2, [r7, #12]
 800871e:	1ad2      	subs	r2, r2, r3
 8008720:	683b      	ldr	r3, [r7, #0]
 8008722:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008724:	4b0c      	ldr	r3, [pc, #48]	; (8008758 <prvHeapInit+0xb4>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	685b      	ldr	r3, [r3, #4]
 8008730:	4a0a      	ldr	r2, [pc, #40]	; (800875c <prvHeapInit+0xb8>)
 8008732:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	4a09      	ldr	r2, [pc, #36]	; (8008760 <prvHeapInit+0xbc>)
 800873a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800873c:	4b09      	ldr	r3, [pc, #36]	; (8008764 <prvHeapInit+0xc0>)
 800873e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008742:	601a      	str	r2, [r3, #0]
}
 8008744:	bf00      	nop
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr
 8008750:	20001078 	.word	0x20001078
 8008754:	20001c30 	.word	0x20001c30
 8008758:	20001c38 	.word	0x20001c38
 800875c:	20001c40 	.word	0x20001c40
 8008760:	20001c3c 	.word	0x20001c3c
 8008764:	20001c4c 	.word	0x20001c4c

08008768 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008770:	4b28      	ldr	r3, [pc, #160]	; (8008814 <prvInsertBlockIntoFreeList+0xac>)
 8008772:	60fb      	str	r3, [r7, #12]
 8008774:	e002      	b.n	800877c <prvInsertBlockIntoFreeList+0x14>
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	60fb      	str	r3, [r7, #12]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	429a      	cmp	r2, r3
 8008784:	d8f7      	bhi.n	8008776 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	68ba      	ldr	r2, [r7, #8]
 8008790:	4413      	add	r3, r2
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	429a      	cmp	r2, r3
 8008796:	d108      	bne.n	80087aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	685a      	ldr	r2, [r3, #4]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	441a      	add	r2, r3
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	68ba      	ldr	r2, [r7, #8]
 80087b4:	441a      	add	r2, r3
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d118      	bne.n	80087f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	4b15      	ldr	r3, [pc, #84]	; (8008818 <prvInsertBlockIntoFreeList+0xb0>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	429a      	cmp	r2, r3
 80087c8:	d00d      	beq.n	80087e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	685a      	ldr	r2, [r3, #4]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	441a      	add	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	681a      	ldr	r2, [r3, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	601a      	str	r2, [r3, #0]
 80087e4:	e008      	b.n	80087f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80087e6:	4b0c      	ldr	r3, [pc, #48]	; (8008818 <prvInsertBlockIntoFreeList+0xb0>)
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	601a      	str	r2, [r3, #0]
 80087ee:	e003      	b.n	80087f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681a      	ldr	r2, [r3, #0]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80087f8:	68fa      	ldr	r2, [r7, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d002      	beq.n	8008806 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008806:	bf00      	nop
 8008808:	3714      	adds	r7, #20
 800880a:	46bd      	mov	sp, r7
 800880c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	20001c30 	.word	0x20001c30
 8008818:	20001c38 	.word	0x20001c38

0800881c <__libc_init_array>:
 800881c:	b570      	push	{r4, r5, r6, lr}
 800881e:	4d0d      	ldr	r5, [pc, #52]	; (8008854 <__libc_init_array+0x38>)
 8008820:	4c0d      	ldr	r4, [pc, #52]	; (8008858 <__libc_init_array+0x3c>)
 8008822:	1b64      	subs	r4, r4, r5
 8008824:	10a4      	asrs	r4, r4, #2
 8008826:	2600      	movs	r6, #0
 8008828:	42a6      	cmp	r6, r4
 800882a:	d109      	bne.n	8008840 <__libc_init_array+0x24>
 800882c:	4d0b      	ldr	r5, [pc, #44]	; (800885c <__libc_init_array+0x40>)
 800882e:	4c0c      	ldr	r4, [pc, #48]	; (8008860 <__libc_init_array+0x44>)
 8008830:	f000 f8f2 	bl	8008a18 <_init>
 8008834:	1b64      	subs	r4, r4, r5
 8008836:	10a4      	asrs	r4, r4, #2
 8008838:	2600      	movs	r6, #0
 800883a:	42a6      	cmp	r6, r4
 800883c:	d105      	bne.n	800884a <__libc_init_array+0x2e>
 800883e:	bd70      	pop	{r4, r5, r6, pc}
 8008840:	f855 3b04 	ldr.w	r3, [r5], #4
 8008844:	4798      	blx	r3
 8008846:	3601      	adds	r6, #1
 8008848:	e7ee      	b.n	8008828 <__libc_init_array+0xc>
 800884a:	f855 3b04 	ldr.w	r3, [r5], #4
 800884e:	4798      	blx	r3
 8008850:	3601      	adds	r6, #1
 8008852:	e7f2      	b.n	800883a <__libc_init_array+0x1e>
 8008854:	080093ec 	.word	0x080093ec
 8008858:	080093ec 	.word	0x080093ec
 800885c:	080093ec 	.word	0x080093ec
 8008860:	080093f0 	.word	0x080093f0

08008864 <__retarget_lock_acquire_recursive>:
 8008864:	4770      	bx	lr

08008866 <__retarget_lock_release_recursive>:
 8008866:	4770      	bx	lr

08008868 <memcpy>:
 8008868:	440a      	add	r2, r1
 800886a:	4291      	cmp	r1, r2
 800886c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008870:	d100      	bne.n	8008874 <memcpy+0xc>
 8008872:	4770      	bx	lr
 8008874:	b510      	push	{r4, lr}
 8008876:	f811 4b01 	ldrb.w	r4, [r1], #1
 800887a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800887e:	4291      	cmp	r1, r2
 8008880:	d1f9      	bne.n	8008876 <memcpy+0xe>
 8008882:	bd10      	pop	{r4, pc}

08008884 <memset>:
 8008884:	4402      	add	r2, r0
 8008886:	4603      	mov	r3, r0
 8008888:	4293      	cmp	r3, r2
 800888a:	d100      	bne.n	800888e <memset+0xa>
 800888c:	4770      	bx	lr
 800888e:	f803 1b01 	strb.w	r1, [r3], #1
 8008892:	e7f9      	b.n	8008888 <memset+0x4>

08008894 <cleanup_glue>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	460c      	mov	r4, r1
 8008898:	6809      	ldr	r1, [r1, #0]
 800889a:	4605      	mov	r5, r0
 800889c:	b109      	cbz	r1, 80088a2 <cleanup_glue+0xe>
 800889e:	f7ff fff9 	bl	8008894 <cleanup_glue>
 80088a2:	4621      	mov	r1, r4
 80088a4:	4628      	mov	r0, r5
 80088a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088aa:	f000 b869 	b.w	8008980 <_free_r>
	...

080088b0 <_reclaim_reent>:
 80088b0:	4b2c      	ldr	r3, [pc, #176]	; (8008964 <_reclaim_reent+0xb4>)
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4283      	cmp	r3, r0
 80088b6:	b570      	push	{r4, r5, r6, lr}
 80088b8:	4604      	mov	r4, r0
 80088ba:	d051      	beq.n	8008960 <_reclaim_reent+0xb0>
 80088bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80088be:	b143      	cbz	r3, 80088d2 <_reclaim_reent+0x22>
 80088c0:	68db      	ldr	r3, [r3, #12]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d14a      	bne.n	800895c <_reclaim_reent+0xac>
 80088c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80088c8:	6819      	ldr	r1, [r3, #0]
 80088ca:	b111      	cbz	r1, 80088d2 <_reclaim_reent+0x22>
 80088cc:	4620      	mov	r0, r4
 80088ce:	f000 f857 	bl	8008980 <_free_r>
 80088d2:	6961      	ldr	r1, [r4, #20]
 80088d4:	b111      	cbz	r1, 80088dc <_reclaim_reent+0x2c>
 80088d6:	4620      	mov	r0, r4
 80088d8:	f000 f852 	bl	8008980 <_free_r>
 80088dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80088de:	b111      	cbz	r1, 80088e6 <_reclaim_reent+0x36>
 80088e0:	4620      	mov	r0, r4
 80088e2:	f000 f84d 	bl	8008980 <_free_r>
 80088e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80088e8:	b111      	cbz	r1, 80088f0 <_reclaim_reent+0x40>
 80088ea:	4620      	mov	r0, r4
 80088ec:	f000 f848 	bl	8008980 <_free_r>
 80088f0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80088f2:	b111      	cbz	r1, 80088fa <_reclaim_reent+0x4a>
 80088f4:	4620      	mov	r0, r4
 80088f6:	f000 f843 	bl	8008980 <_free_r>
 80088fa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80088fc:	b111      	cbz	r1, 8008904 <_reclaim_reent+0x54>
 80088fe:	4620      	mov	r0, r4
 8008900:	f000 f83e 	bl	8008980 <_free_r>
 8008904:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008906:	b111      	cbz	r1, 800890e <_reclaim_reent+0x5e>
 8008908:	4620      	mov	r0, r4
 800890a:	f000 f839 	bl	8008980 <_free_r>
 800890e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008910:	b111      	cbz	r1, 8008918 <_reclaim_reent+0x68>
 8008912:	4620      	mov	r0, r4
 8008914:	f000 f834 	bl	8008980 <_free_r>
 8008918:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800891a:	b111      	cbz	r1, 8008922 <_reclaim_reent+0x72>
 800891c:	4620      	mov	r0, r4
 800891e:	f000 f82f 	bl	8008980 <_free_r>
 8008922:	69a3      	ldr	r3, [r4, #24]
 8008924:	b1e3      	cbz	r3, 8008960 <_reclaim_reent+0xb0>
 8008926:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008928:	4620      	mov	r0, r4
 800892a:	4798      	blx	r3
 800892c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800892e:	b1b9      	cbz	r1, 8008960 <_reclaim_reent+0xb0>
 8008930:	4620      	mov	r0, r4
 8008932:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008936:	f7ff bfad 	b.w	8008894 <cleanup_glue>
 800893a:	5949      	ldr	r1, [r1, r5]
 800893c:	b941      	cbnz	r1, 8008950 <_reclaim_reent+0xa0>
 800893e:	3504      	adds	r5, #4
 8008940:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008942:	2d80      	cmp	r5, #128	; 0x80
 8008944:	68d9      	ldr	r1, [r3, #12]
 8008946:	d1f8      	bne.n	800893a <_reclaim_reent+0x8a>
 8008948:	4620      	mov	r0, r4
 800894a:	f000 f819 	bl	8008980 <_free_r>
 800894e:	e7ba      	b.n	80088c6 <_reclaim_reent+0x16>
 8008950:	680e      	ldr	r6, [r1, #0]
 8008952:	4620      	mov	r0, r4
 8008954:	f000 f814 	bl	8008980 <_free_r>
 8008958:	4631      	mov	r1, r6
 800895a:	e7ef      	b.n	800893c <_reclaim_reent+0x8c>
 800895c:	2500      	movs	r5, #0
 800895e:	e7ef      	b.n	8008940 <_reclaim_reent+0x90>
 8008960:	bd70      	pop	{r4, r5, r6, pc}
 8008962:	bf00      	nop
 8008964:	20000014 	.word	0x20000014

08008968 <__malloc_lock>:
 8008968:	4801      	ldr	r0, [pc, #4]	; (8008970 <__malloc_lock+0x8>)
 800896a:	f7ff bf7b 	b.w	8008864 <__retarget_lock_acquire_recursive>
 800896e:	bf00      	nop
 8008970:	20001c50 	.word	0x20001c50

08008974 <__malloc_unlock>:
 8008974:	4801      	ldr	r0, [pc, #4]	; (800897c <__malloc_unlock+0x8>)
 8008976:	f7ff bf76 	b.w	8008866 <__retarget_lock_release_recursive>
 800897a:	bf00      	nop
 800897c:	20001c50 	.word	0x20001c50

08008980 <_free_r>:
 8008980:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008982:	2900      	cmp	r1, #0
 8008984:	d044      	beq.n	8008a10 <_free_r+0x90>
 8008986:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800898a:	9001      	str	r0, [sp, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	f1a1 0404 	sub.w	r4, r1, #4
 8008992:	bfb8      	it	lt
 8008994:	18e4      	addlt	r4, r4, r3
 8008996:	f7ff ffe7 	bl	8008968 <__malloc_lock>
 800899a:	4a1e      	ldr	r2, [pc, #120]	; (8008a14 <_free_r+0x94>)
 800899c:	9801      	ldr	r0, [sp, #4]
 800899e:	6813      	ldr	r3, [r2, #0]
 80089a0:	b933      	cbnz	r3, 80089b0 <_free_r+0x30>
 80089a2:	6063      	str	r3, [r4, #4]
 80089a4:	6014      	str	r4, [r2, #0]
 80089a6:	b003      	add	sp, #12
 80089a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80089ac:	f7ff bfe2 	b.w	8008974 <__malloc_unlock>
 80089b0:	42a3      	cmp	r3, r4
 80089b2:	d908      	bls.n	80089c6 <_free_r+0x46>
 80089b4:	6825      	ldr	r5, [r4, #0]
 80089b6:	1961      	adds	r1, r4, r5
 80089b8:	428b      	cmp	r3, r1
 80089ba:	bf01      	itttt	eq
 80089bc:	6819      	ldreq	r1, [r3, #0]
 80089be:	685b      	ldreq	r3, [r3, #4]
 80089c0:	1949      	addeq	r1, r1, r5
 80089c2:	6021      	streq	r1, [r4, #0]
 80089c4:	e7ed      	b.n	80089a2 <_free_r+0x22>
 80089c6:	461a      	mov	r2, r3
 80089c8:	685b      	ldr	r3, [r3, #4]
 80089ca:	b10b      	cbz	r3, 80089d0 <_free_r+0x50>
 80089cc:	42a3      	cmp	r3, r4
 80089ce:	d9fa      	bls.n	80089c6 <_free_r+0x46>
 80089d0:	6811      	ldr	r1, [r2, #0]
 80089d2:	1855      	adds	r5, r2, r1
 80089d4:	42a5      	cmp	r5, r4
 80089d6:	d10b      	bne.n	80089f0 <_free_r+0x70>
 80089d8:	6824      	ldr	r4, [r4, #0]
 80089da:	4421      	add	r1, r4
 80089dc:	1854      	adds	r4, r2, r1
 80089de:	42a3      	cmp	r3, r4
 80089e0:	6011      	str	r1, [r2, #0]
 80089e2:	d1e0      	bne.n	80089a6 <_free_r+0x26>
 80089e4:	681c      	ldr	r4, [r3, #0]
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	6053      	str	r3, [r2, #4]
 80089ea:	4421      	add	r1, r4
 80089ec:	6011      	str	r1, [r2, #0]
 80089ee:	e7da      	b.n	80089a6 <_free_r+0x26>
 80089f0:	d902      	bls.n	80089f8 <_free_r+0x78>
 80089f2:	230c      	movs	r3, #12
 80089f4:	6003      	str	r3, [r0, #0]
 80089f6:	e7d6      	b.n	80089a6 <_free_r+0x26>
 80089f8:	6825      	ldr	r5, [r4, #0]
 80089fa:	1961      	adds	r1, r4, r5
 80089fc:	428b      	cmp	r3, r1
 80089fe:	bf04      	itt	eq
 8008a00:	6819      	ldreq	r1, [r3, #0]
 8008a02:	685b      	ldreq	r3, [r3, #4]
 8008a04:	6063      	str	r3, [r4, #4]
 8008a06:	bf04      	itt	eq
 8008a08:	1949      	addeq	r1, r1, r5
 8008a0a:	6021      	streq	r1, [r4, #0]
 8008a0c:	6054      	str	r4, [r2, #4]
 8008a0e:	e7ca      	b.n	80089a6 <_free_r+0x26>
 8008a10:	b003      	add	sp, #12
 8008a12:	bd30      	pop	{r4, r5, pc}
 8008a14:	20001c54 	.word	0x20001c54

08008a18 <_init>:
 8008a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a1a:	bf00      	nop
 8008a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a1e:	bc08      	pop	{r3}
 8008a20:	469e      	mov	lr, r3
 8008a22:	4770      	bx	lr

08008a24 <_fini>:
 8008a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a26:	bf00      	nop
 8008a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a2a:	bc08      	pop	{r3}
 8008a2c:	469e      	mov	lr, r3
 8008a2e:	4770      	bx	lr
